<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL：（六）sql优化</title>
    <url>/2024/08/23/01Mysql-sql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于sql优化，必须掌握的知识：<a href="https://rengoku.top/2024/08/15/MySQL-%E7%B4%A2%E5%BC%95/">MySQL：（一）索引底层原理与实现 </a> 、<a href="https://rengoku.top/2024/08/15/MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/">MySQL：（二）存储引擎 </a> </p>
<h1 id="一、插入数据"><a href="#一、插入数据" class="headerlink" title="一、插入数据"></a>一、插入数据</h1><h2 id="批量插入-手动事务"><a href="#批量插入-手动事务" class="headerlink" title="批量插入&amp;手动事务"></a>批量插入&amp;手动事务</h2><p>如果插入的数据是500-1000这个范围，可以使用<strong>数据批量插入</strong>的方式。那如果是几万条数据呢？那就使用<strong>多条数据</strong>批量插入语句。如果使用单条插入操作会多次建立与数据库的连接，性能肯定是比一次性连接的批量插入低的。</p>
<p>另外，InnoDB使用的是自动提交事务，每插入一次就自动进行事务的开启和关闭，因此可以手动控制事务，避免事务多次的开启和提交。</p>
<p>最后是主键顺序的问题。InnoDB使用的是B+树和双向链表，而B+树众所周知就是查的快，插入难，会导致页分裂等等问题。B+树如果按照主键顺序进行插入效率会高很多。</p>
<blockquote>
<p>主键顺序可参考：</p>
<ol>
<li>文章：<a href="https://rengoku.top/2024/08/15/MySQL-%E7%B4%A2%E5%BC%95/">MySQL：（一）索引底层原理与实现 </a> 中第四节：InnoDB B+树存储数据结构。</li>
<li>本篇文章第二节</li>
</ol>
</blockquote>
<p><img src="Snipaste_2024-08-23_01-26-23.png" alt="insert优化"></p>
<p><strong>总结一下：</strong></p>
<ol>
<li>批量插入</li>
<li>手动提交事务</li>
<li>主键按顺序进行插入</li>
</ol>
<h2 id="load指令"><a href="#load指令" class="headerlink" title="load指令"></a>load指令</h2><p>ok，下一模块。</p>
<p>如果插入的数据更大，数据来到了几百万的级别，那么使用<code>insert</code>的性能就不高了。</p>
<p>在MySQL中要涉及大量数据插入时，我们选择使用<code>load</code>指令进行大量数据批量插入操作：</p>
<p><img src="Snipaste_2024-08-23_01-36-58.png" alt="load指令"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数--local-infile</span><br><span class="line">mysql &gt; mysql --local-infile -u root -p</span><br><span class="line"></span><br><span class="line"># 设置全局参数local infile为 1，开启从本地加载文件导入数据的开关，local infile 的默认值是0;</span><br><span class="line">mysql &gt; set global local infile = 1;</span><br><span class="line"></span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中：</span><br><span class="line"># 1. &#x27;/root/sql1.log&#x27;是linux下的路径，里面存放了一份100w的数据</span><br><span class="line"># 2. fields terminated by &#x27;,&#x27;表示的是数据之间以逗号分开，如上图所示</span><br><span class="line"># 3. 行之间以换行符区分。</span><br><span class="line">mysql &gt; load data local infile &#x27;/root/sql1.log&#x27; into table &#x27;tb_ user&#x27; fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27; ;</span><br></pre></td></tr></table></figure>

<p><strong>插入的速度如图：</strong></p>
<p><img src="Snipaste_2024-08-23_01-47-09.png" alt="load指令的插入速度"></p>
<p>可以看到使用<code>load</code>指令插入数据花费的时间是<code>16.84s</code>。如果使用<code>insert</code>操作大概需要花费10+分钟。</p>
<p>使用<code>load</code>指令插入当然也是需要满足主键顺序插入的，和使用<code>insert</code>进行批 量插入时一样，原因是InnoDB底层都是使用B+树和双向链表（除了自适应哈希的情况，自适应哈希见文章：<a href="https://rengoku.top/2024/08/15/MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/">MySQL：（二）存储引擎 </a> 的内存架构）</p>
<p><strong>总结一下：</strong></p>
<ol>
<li>批量插入数据</li>
<li>手动开启事务</li>
<li>load指令输入大数据文件</li>
</ol>
<h1 id="二、主键优化"><a href="#二、主键优化" class="headerlink" title="二、主键优化"></a>二、主键优化</h1><h2 id="InnoDB逻辑存储结构-索引底层实现原理"><a href="#InnoDB逻辑存储结构-索引底层实现原理" class="headerlink" title="InnoDB逻辑存储结构&amp;索引底层实现原理"></a>InnoDB逻辑存储结构&amp;索引底层实现原理</h2><p>在讲索引的底层原理的时候，我们说过InnoDB底层都是使用B+树和双向链表存储数据的。对于聚簇索引，在InnoDB中默认是主键索引，叶子节点存放的都是行数据，而非聚簇索引存放的都是主键索引的地址值，因此会有回表的情况：<a href="https://rengoku.top/2024/08/15/MySQL-%E7%B4%A2%E5%BC%95/">MySQL：（一）索引底层原理与实现 </a></p>
<p>而在介绍InnoDB存储引擎的时候，也曾经说过InnoDB的逻辑存储结构：<a href="https://rengoku.top/2024/08/15/MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/">MySQL：（二）存储引擎 </a> </p>
<p><img src="Snipaste_2024-08-16_21-25-44.png"></p>
<p>里面提到的页（page）是InnoDB磁盘管理的最小单元，一个页的大小为16kb。在B+树的结构中，每个节点都是一个页，页里面就包含多条行数据。换句话说，非叶子节点对应的页负责分发索引，叶子节点对应的页负责存储具体行数据。</p>
<h2 id="页分裂"><a href="#页分裂" class="headerlink" title="页分裂"></a>页分裂</h2><p>B+树是要求主键顺序的，这里不多说了，我们就直接讨论<strong>主键乱序插入的情况。</strong></p>
<p><img src="Snipaste_2024-08-23_02-24-56.png"></p>
<p>现在我要将主键为50的数据插入到页中，由于要求顺序，这条数据不会直接被开辟到新的page空间，而是按顺序从根节点开始，找到叶子节点中应该插入的位置</p>
<p><img src="Snipaste_2024-08-23_02-25-24.png"></p>
<p>但是此时page1的空间已经满了，此时怎么办？</p>
<p>此时需要开辟新的page空间，这里就叫page3，InnoDB会尽量平均分配两个页的空间利用，将数据进行迁移。这里就是将page1的行数据迁移到page3中。</p>
<p><img src="Snipaste_2024-08-23_02-25-43.png"></p>
<p>接下来，主键为50的行数据，就应该拼接在page3后面。</p>
<p><img src="Snipaste_2024-08-23_02-25-55.png"></p>
<p>最后就是，页之间的链表关系重排序，重新设置链表指针。</p>
<p><img src="Snipaste_2024-08-23_02-31-52.png"></p>
<p>OK，以上就是页分类的流程。主键乱序插入的时候就有可能会产生页分裂的现象，并且页分裂也会消耗比较大的性能。</p>
<h2 id="页分类导致的问题"><a href="#页分类导致的问题" class="headerlink" title="页分类导致的问题"></a>页分类导致的问题</h2><h3 id="1-性能下降"><a href="#1-性能下降" class="headerlink" title="1. 性能下降"></a>1. 性能下降</h3><ul>
<li><strong>增加I&#x2F;O操作</strong>：页分裂需要创建新的数据页，并将原页中的部分数据移动到新页中，这增加了磁盘的I&#x2F;O操作次数。磁盘I&#x2F;O通常是数据库操作中的瓶颈，因此页分裂会直接影响查询和更新操作的性能。</li>
<li><strong>降低缓存效率</strong>：数据库系统通常会将数据页缓存在内存中以提高访问速度。页分裂会导致缓存中的数据页失效，因为新生成的数据页需要重新加载到缓存中。这降低了缓存的命中率，进而影响了数据库的整体性能。</li>
</ul>
<h3 id="2-空间利用率降低"><a href="#2-空间利用率降低" class="headerlink" title="2. 空间利用率降低"></a>2. 空间利用率降低</h3><ul>
<li><strong>空间浪费</strong>：页分裂后，原数据页和新数据页可能都无法完全填满，导致空间利用率降低。在某些情况下，空间利用率可能会降低约50%（如参考文章1所述），这取决于数据的具体分布和页分裂的触发条件。</li>
<li><strong>碎片化</strong>：频繁的页分裂会导致数据库中的数据页变得碎片化，即数据不再连续存储在磁盘上。这会增加读取数据时的寻道时间和I&#x2F;O操作次数，进一步降低性能。</li>
</ul>
<h3 id="3-索引重构"><a href="#3-索引重构" class="headerlink" title="3. 索引重构"></a>3. 索引重构</h3><ul>
<li><strong>索引失效</strong>：在某些情况下，页分裂可能会导致索引失效或变得不连续。这会影响基于索引的查询操作的性能，因为索引无法快速定位到目标数据页。</li>
<li><strong>重建索引</strong>：为了恢复索引的连续性和性能，可能需要定期重建索引。然而，重建索引本身也是一个资源密集型的操作，它会占用大量的CPU和I&#x2F;O资源，并可能影响数据库的在线性能。</li>
</ul>
<p><strong>总结一下：增加磁盘io，降低缓存效率，空间产生碎片，索引重构。</strong></p>
<h2 id="页合并"><a href="#页合并" class="headerlink" title="页合并"></a>页合并</h2><p>页分裂是插入数据时的问题，而页合并是删除数据的现象。</p>
<p><img src="Snipaste_2024-08-23_02-42-26.png"></p>
<p>如果将主键为：<code>13,14,15,16</code>的行数据进行逻辑删除，那么page3的数据将会迁移到page2</p>
<h2 id="主键设计原则"><a href="#主键设计原则" class="headerlink" title="主键设计原则"></a><img src="Snipaste_2024-08-23_02-42-44.png">主键设计原则</h2><p>根据页分类的现象总结出四点：</p>
<p><img src="Snipaste_2024-08-23_02-46-52.png"></p>
<p>原则都是围绕避免出现页分裂的情况进行设计的。</p>
<h1 id="三、order-by优化"><a href="#三、order-by优化" class="headerlink" title="三、order by优化"></a>三、order by优化</h1><p><img src="Snipaste_2024-08-23_11-36-51.png"></p>
<p>对于单个主键索引，如果排序走索引，order by升序或者降序都不会有性能差异，都是using index。</p>
<p>接下来讲联合索引的情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 假设tb_user表中存在字段：id，name，age，phone。现在对gae字段创建索引</span><br><span class="line">create index inx_user_age_phone on tb_user(age,phone);</span><br><span class="line"></span><br><span class="line"># 排序走索引，using index</span><br><span class="line">select id, name, age from tb_user order by age;</span><br><span class="line"></span><br><span class="line"># 如果没有age索引，排序走filesort</span><br><span class="line">select id, name, age from tb_user order by age;</span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-08-23_11-56-35.png" alt="没有age索引"></p>
<p><img src="Snipaste_2024-08-23_11-56-18.png" alt="有age索引"></p>
<p>如果按照两个字段进行排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id, name, age from tb_user order by age, phone;</span><br></pre></td></tr></table></figure>

<p>此时也会走using index</p>
<p><img src="Snipaste_2024-08-23_12-01-27.png"></p>
<p>如果两个字段同时倒序排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id, name, age from tb_user order by age desc, phone desc;</span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-08-23_12-02-05.png"></p>
<p>可以看到backward index scan。这是倒序的索引扫描，效率也是高的。</p>
<blockquote>
<p>之前讲过联合索引的B+树会依次按照主键顺序进行比较，例如这里，age相同的话再比较phone，phone更大的值最终将在叶子结点右边。因此联合索引都是有序的。倒序也就是正序反过来，没差的。</p>
</blockquote>
<p>如果一个字段正序，一个字段倒序：</p>
<p><img src="Snipaste_2024-08-23_12-07-19.png"></p>
<p>可以看到，已经出现using filesort了。</p>
<p><strong>为什么会这样呢？</strong></p>
<p>原因是因为索引其实也是有一个字段标记顺序的：</p>
<p><img src="Snipaste_2024-08-23_12-11-58.png"></p>
<p>如果索引创建方式是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index inx_user_age_phone on tb_user(age asc,phone desc);</span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-08-23_12-13-42.png"></p>
<p>查看索引的时候可以看到，我给phone字段添加倒序的索引。</p>
<p>此时一正序一降序的问题就可以得到解决：</p>
<p><img src="Snipaste_2024-08-23_12-14-56.png"></p>
<p>原因就是创建倒序索引了以后，一正序一倒序的查，就可以直接拿到数据了</p>
<p><img src="Snipaste_2024-08-23_12-16-14.png"></p>
<p><strong>总结一下：</strong></p>
<ol>
<li>排序的时候走索引效率高。</li>
<li>排序的时候可以走普通索引提升效率。</li>
<li>合索引要么排序只用第一个字段（最左前缀），要么多个字段共同升序降序，又或是按照排序方式添加联合索引。</li>
</ol>
<p>前提都是查询走了索引，否则不生效。</p>
<h1 id="四、group-by优化"><a href="#四、group-by优化" class="headerlink" title="四、group by优化"></a>四、group by优化</h1><p>group by优化主要是索引对分组的影响。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建索引</span><br><span class="line">create index inx_user_name_age on tb_user(name,age);</span><br><span class="line"># 进行查询操作</span><br><span class="line"># using index</span><br><span class="line">select id, name, age from tb_user group by name;</span><br><span class="line"></span><br><span class="line"># using temporary</span><br><span class="line">select id, name, age from tb_user group by age;</span><br><span class="line"></span><br><span class="line"># using index</span><br><span class="line">select id, name, age from tb_user where name = &#x27;张三&#x27; group by age;</span><br></pre></td></tr></table></figure>

<p>很简单，联合索引满足最左前缀原则就行了。</p>
<h1 id="五、limit优化"><a href="#五、limit优化" class="headerlink" title="五、limit优化"></a>五、limit优化</h1><p>使用<code>limit</code>的时候，越往后面的页花费时间越多。由于在finalshell里打印结果的篇幅原因，我就不放上图片了，这里直接给出运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select conut(*) from tb_user; # 表中存在1000000条数据。</span><br><span class="line">select id, name, age from tb_user limit 0,10; # 这个数量级查询花费时间的数量级在10^(-2)</span><br><span class="line">select id, name, age from tb_user limit 1000,10;</span><br><span class="line">select id, name, age from tb_user limit 100000,10;</span><br><span class="line">select id, name, age from tb_user limit 900000,10; # 这个数量级的查询花费将近花费20秒</span><br></pre></td></tr></table></figure>

<p>原因是什么呢？很简单，这样查询需要回表。</p>
<p>对这个的解决方案，官方给出的方式是<strong>覆盖索引 + 子查询。</strong></p>
<blockquote>
<p>覆盖索引是指一个索引包含了所有需要查询的列，即查询语句中的SELECT字段全部在索引中，通过索引就可以直接获取查询结果，而无需回表查询数据行。</p>
</blockquote>
<p>什么意思呢，我们来看看</p>
<p>首先我们进行<code>select *  ...</code>操作，肯定是要回表的，而且在上面讲了查询效率很低，随着往后查询的数据越大，时间花费越多；但是如果我先查询 id 作为子结果集，然后再查询id对应的数据是不是就行了呢？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一步，查询id,这一步就是使用覆盖索引id（因为我没创建其他索引，默认只有主键索引），作为子查询的结果集</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> tb_user limit <span class="number">900000</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"># 第二步，查询id对应的结果</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> tb_user limit <span class="number">900000</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-08-24_13-56-43.png"></p>
<p>然而这样的sql报错语法问题，不允许<code>in</code>关键字中有<code>limit</code>。</p>
<p>但是我们可以将子查询作为一个表做多表联查：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">as</span> a , (<span class="keyword">select</span> id <span class="keyword">from</span> tb_user limit <span class="number">900000</span>,<span class="number">10</span>) <span class="keyword">as</span> b <span class="keyword">where</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>

<p>可以看到结果还是很快的，用了<code>11.46S</code></p>
<p><img src="Snipaste_2024-08-24_14-02-29.png"></p>
<p>总结一下：</p>
<p>limit采用多表联查的方式，结合覆盖索引（id）+ 子查询做优化，解决数据页靠后时查询速度显著下降的问题。</p>
<h1 id="六、count优化"><a href="#六、count优化" class="headerlink" title="六、count优化"></a>六、count优化</h1><p><img src="Snipaste_2024-08-24_14-20-31.png"></p>
<p><img src="Snipaste_2024-08-24_14-24-36.png"></p>
<h1 id="七、update优化"><a href="#七、update优化" class="headerlink" title="七、update优化"></a>七、update优化</h1><p>首先你得先复习一下mysql的行锁：<a href="https://rengoku.top/2024/08/15/MySQL-%E9%94%81/">MySQL：（三）全局锁、表级锁、行级锁 </a></p>
<p><strong>在dml语句中，mysql的行锁是自动添加的，并且不走索引的情况下，行锁会升级为表锁。</strong></p>
<p>还是之前的表 tb_user 和字段 id,name,age，id为主键。现在有两个线程，分别是线程A和线程B。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+---------+------------+-------+</span><br><span class="line">|   <span class="built_in">id</span>    |    name    |  age  |</span><br><span class="line">+---------+------------+-------+</span><br><span class="line">|    1    |    张三    |  18   |</span><br><span class="line">|    2    |    李四    |  19   |   </span><br><span class="line">|    3    |    王五    |  20   |</span><br><span class="line">+---------+------------+-------+</span><br></pre></td></tr></table></figure>

<h2 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h2><p>线程A先执行操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> tb_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;赵六&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>线程B此时也开启事务：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> tb_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;路人甲&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><strong>此时线程B可以修改成功吗？</strong></p>
<p>可以的，现在A修改的是 id &#x3D; 1 的数据，而B改的是 id &#x3D; 2 的数据，行锁不冲突。两个线程之后各自提交事务就行了。</p>
<h2 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h2><p>线程A先执行操作：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> tb_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;赵六&#x27;</span> <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p>线程B此时也开启事务：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> tb_user <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;路人甲&#x27;</span> <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p><strong>此时线程B可以修改成功吗？</strong></p>
<p>不可以，因为现在是表锁而不是行锁，事务 B 会被阻塞。</p>
<p><strong>为什么现在是表锁不是行锁？事务 B 为什么被阻塞？？？？</strong></p>
<p>因为我们曾经说过，如果不走索引的话，行锁是会失效的，因为行锁是 innodb 基于B+树来实现的。而现在表中只有主键索引 id ，而没有 age 对应的索引。</p>
<p><strong>总结一下：</strong></p>
<p>我们在更新数据的时候，需要根据索引进行 update 操作，否则在多个线程甚至是高并发的情况下，行锁有可能会升级成表锁</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li><p>insert：对于大量数据的插入，应该结合手动开启事务，进行批量插入以减少和数据库连接的多次开启；并且按照主键进行插入。对于更大的数量级，采用 load 指令插入数据，这些数据需要统一格式。</p>
</li>
<li><p>主键优化：围绕避免出现页分裂的问题展开，比如按主键顺序插入数据、避免对主键修改。</p>
</li>
<li><p>order by：排序问题。单一字段排序时走索引；覆盖索引的情况：如果单一字段，using index；如果多个字段排序，需要满足最左前缀原则。查询的多个字段都有索引时，索引的排序要统一（即都是正序索引或者都是倒序索引），否则可以考虑建立一正序一倒序的覆盖索引。</p>
<blockquote>
<p>覆盖索引关注的是索引是否包含了查询所需的所有列，而联合索引关注的是索引是否同时包含了多个列。一个索引可以是覆盖索引但不一定是联合索引（如只包含一个列的索引且该列满足查询需求），也可以是联合索引但不一定是覆盖索引（如包含多个列但查询还需要其他列的数据）。</p>
</blockquote>
</li>
<li><p>group by：分组的字段索引满足最左前缀原则或是主键索引。</p>
</li>
<li><p>limit：覆盖索引 + 子查询的方式优化全表往后扫描时速度非常低的问题。为了解决 in 中不能使用 limit 的问题，使用子查询作为表的形式进行多表联查。</p>
</li>
<li><p>count：默认使用 conut（*）的形式就是速度最高的。因为innodb只能累加，而MyISAM可以在磁盘中直接取conut的值。</p>
</li>
<li><p>update：更新的where条件中，字段需要有对应索引，避免多线程的情况下，表锁降低性能。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis：（一）内存数据结构存储</title>
    <url>/2024/08/28/02Redis%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p><strong>Redis 官方文档：</strong></p>
<p><strong>Redis</strong> 是一个开源(BSD 许可)的<strong>内存数据结构存储</strong>，用作数据库、缓存、消息代理和流引擎。Redis提供数据结构，例如字符串、散列、列表、集合、带范围查询的排序集合、位图、超日志、地理空间索引和流。Redis 内置了复制、Lua 脚本、LRU驱逐、事务和不同级别的磁盘持久性，并通过以下方式提供高可用性 <strong>Redis Sentinel</strong> 和 <strong>Redis Cluster</strong> 的自动分区。</p>
<p>使用 <strong>Redis</strong> 可以对这些类型运行原子操作，例如附加到字符串；增加哈希值；将元素推入列表；计算集交、并、差；或获取排序集中排名最高的成员。<br>为了达到最佳性能，<strong>Redis</strong> 使用内存中的数据集。根据您的用例，Redis 可以通过定期将数据集转储到磁盘或将每个命令附加到基于磁盘的日志来持久化您的数据。如果您只需要一个功能丰富的网络内存缓存，您也可以禁用持久性。</p>
<p>Redis支持<strong>异步复制</strong>，具有快速非阻塞同步和自动重新连接以及网络拆分上的部分重新同步。</p>
<p>Redis还包括：</p>
<ul>
<li>交易</li>
<li>发布&#x2F;订阅</li>
<li>Lua脚本</li>
<li>生命周期有限的密钥</li>
<li>LRU驱逐密钥</li>
<li>自动故障转移</li>
</ul>
<h2 id="Redis-VS-Memcached"><a href="#Redis-VS-Memcached" class="headerlink" title="Redis VS Memcached"></a>Redis VS Memcached</h2><p>很多人都说用Redis作为缓存，但是Memcached也是基于内存的数据库，为什么不选择它作为缓存呢?<br>要解答这个问题，我们就要弄清楚Redis和Memcached的区别。Redis 与Memcached共同点:</p>
<ol>
<li>都是基于内存的数据库，一般都用来当做缓存使用。</li>
<li>都有过期策略。</li>
<li>两者的性能都非常高。</li>
</ol>
<p>Redis与Memcached区别:</p>
<ol>
<li>Redis支持的数据类型更丰富(String、 Hash、 List、 Set、 ZSet) ，而Memcached只支持最简单的key-value数据类型；</li>
<li>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用，而Memcached没有持久化功能，数据全部存在内存之中，Memcached 重启或者挂掉后，数据就没了；</li>
<li>Redis原生支持集群模式，Memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据</li>
<li>Redis 支持发布订阅模型、Lua 脚本、事务等功能，而Memcached不支持；</li>
</ol>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="基本数据结构-版本迭代新增"><a href="#基本数据结构-版本迭代新增" class="headerlink" title="基本数据结构 &amp; 版本迭代新增"></a>基本数据结构 &amp; 版本迭代新增</h2><p>Redis3.0之前提供了5中基本类型：<strong>string、list、hash、set、zset。</strong></p>
<p><img src="%E5%9B%BE%E7%89%871.png"></p>
<p>每个数据结构存储的内容如下：</p>
<p><img src="Snipaste_2024-08-28_17-58-06.png"></p>
<p>随着Redis版本的更新，后面又支持了四种数据类型: BitMap (2.2 版新增)、HyperLogLog (2.8 版新增)、GEO (3.2 版新增)、Stream (5.0 版新增)</p>
<ul>
<li>BitMap (2.2版新增) ：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</li>
<li>HyperLogLog (2.8 版新增) ：海量数据基数统计的场景，比如百万级网页UV计数等；</li>
<li>GEO (3.2版新增) ：存储地理位置信息的场景，比如滴滴叫车；</li>
<li>Stream (5.0版新增) ：消息队列，相比于基于List类型实现的消息队列，有这两个特有的特性:自动生成全局唯一消息ID， 支持以消费组形式消费数据。</li>
</ul>
<p>值得一提的是，有序集合可以用来处理热点数据。比如，一段时间内访问量比较多时，有序集合的成员对应的分数值可以偏高。但是设置分数是手动的，实现 “自动” 可以问下AI。</p>
<h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p><img src="Snipaste_2024-08-28_18-10-03.png"></p>
<p>我挑几个来写：</p>
<h3 id="String：SDS"><a href="#String：SDS" class="headerlink" title="String：SDS"></a>String：SDS</h3><p><strong>SDS，simple dynamic string，简单动态字符串。</strong>SDS 和我们认识的C字符串不太一样，之所以没有使用C语言的字符串表示，因为SDS相比于C的原生字符串具有如下的特点:</p>
<ul>
<li>SDS不仅可以保存文本数据，还可以保存二进制数据。因为SDS使用len属性的值而不是空字符来判断字符串是否结束，并且SDS的所有API都会以处理二进制的方式来处理SDS存放在buf[]数组里的数据。所以SDS不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li>
<li>SDS获取字符串长度的时间复杂度是0(1)。 因为C语言的字符串并不记录自身长度，所以获取长度的复杂度为O(n)；而SDS结构里用len属性记录了字符串长度，所以复杂度为0(1)。</li>
<li>Redis的SDS API是安全的，拼接字符串不会造成缓冲区溢出。因为SDS在拼接字符串之前会检查SDS空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。</li>
</ul>
<h3 id="listpack"><a href="#listpack" class="headerlink" title="listpack"></a>listpack</h3><p>ziplist的改进，旨在更高效地存储小数据集合，如字符串、整数等。</p>
<h3 id="skiplist"><a href="#skiplist" class="headerlink" title="skiplist"></a>skiplist</h3><p>优化有序链表的查找。一个节点不是像链表一样按顺序，而是连接多个节点。</p>
<p><img src="Snipaste_2024-08-28_18-18-18.png"></p>
<h1 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h1><h2 id="新增的三个后台线程"><a href="#新增的三个后台线程" class="headerlink" title="新增的三个后台线程"></a>新增的三个后台线程</h2><p><strong>Redis单线程指的是「接收客户端请求- &gt;解析请求-&gt;进行数据读写等操作-&gt;发送数据给客户端」这个过程是由一个线程(主线程)来完成的，这也是我们常说Redis是单线程的原因。</strong>redis 中的读写操作都是靠的主线程。</p>
<p>但是，Redis 程序并不是单线程的，Redis 在启动的时候，是会启动后台线程(BIO) 的：</p>
<ul>
<li>Redis在2.6版本，会启动2个后台线程，分别处理<strong>关闭文件、AOF刷盘</strong>这两个任务；</li>
<li>Redis在4.0版本之后，新增了一个新的后台线程，用来<strong>异步释放Redis内存</strong>，也就是lazyfree线程。</li>
</ul>
<p>例如执行unlink key &#x2F; flushdb async &#x2F; flushall async等命令，会把这些删除操作交给后台线程来执行，好处是不会导致Redis主线程卡顿。因此，当我们要删除一个大 key的时候，不要使用del命令删除，因为del是在主线程处理的，这样会导致Redis主线程卡顿，因此我们应该使用unlink命令来异步删除大key。</p>
<p>之所以Redis为「关闭文件、AOF 刷盘、释放内存」这些任务创建单独的线程来处理，是因为这些任务的操作都是很耗时的，如果把这些任务都放在主线程来处理，那么Redis主线程就很容易发生阻塞，这样就无法处理后续的请求了。</p>
<p>后台线程相当于一个消费者，生产者把耗时任务丢到任务队列中，消费者(BIO) 不停轮询这个队列，拿出任务就去执行对应的方法即可。</p>
<p><img src="Snipaste_2024-08-29_00-04-59.png"></p>
<p>关闭文件、AOF 刷盘、释放内存这三个任务都有各自的任务队列:</p>
<ol>
<li>BIO_CLOSE_ FILE，关闭文件任务队列：当队列有任务后，后台线程会调用close(fd) ，将文件关闭；</li>
<li>BIO_ AOF_ FSYNC， AOF刷盘任务队列：当AOF日志配置成everysec选项后，主线程会把AOF写日志操作封装成一个任务，也放到队列中。当发现队列有任务后，后台线程会调用fsync(fd)，将AOF文件刷盘；</li>
<li>BIO_ LAZY_ FREE， lazy free任务队列：Lazy Free机制允许Redis以异步方式释放键所占用的内存。当使用Lazy Free时，删除操作不会立即释放内存，而是将删除任务交给后台线程BIO来处理。当队列有任务后，后台线程会free(obj) 释放对象&#x2F; free(dict)删除数据库所有对象&#x2F; free(skiplist)释放跳表对象；</li>
</ol>
<h2 id="文件任务队列关闭什么文件？"><a href="#文件任务队列关闭什么文件？" class="headerlink" title="文件任务队列关闭什么文件？"></a>文件任务队列关闭什么文件？</h2><p>Redis在运行时需要打开多个文件描述符，这些文件描述符可能代表：</p>
<ol>
<li><strong>客户端连接</strong>：Redis服务器监听端口上的每个客户端连接都会占用一个文件描述符。</li>
<li><strong>AOF文件</strong>：如果启用了AOF持久化，Redis会打开一个（或多个，在AOF重写时）文件描述符来写入AOF文件。</li>
<li><strong>RDB快照文件</strong>：在创建RDB快照时，Redis会打开一个文件描述符来写入快照数据。</li>
<li><strong>临时文件</strong>：Redis在执行某些操作时（如AOF重写）可能会使用临时文件，这些文件也需要文件描述符。</li>
</ol>
<h2 id="Lazy-Free有什么内存淘汰策略的关联？"><a href="#Lazy-Free有什么内存淘汰策略的关联？" class="headerlink" title="Lazy Free有什么内存淘汰策略的关联？"></a>Lazy Free有什么内存淘汰策略的关联？</h2><ul>
<li><strong>关联点</strong>：在内存淘汰过程中，如果启用了Lazy Free机制，那么被淘汰的键的删除操作可能会被异步执行。这意味着，当Redis根据内存淘汰策略选择了一些键进行删除时，这些删除操作不会立即在主线程中同步完成，而是会被放入BIO队列中，由后台线程异步处理。</li>
<li><strong>不同点</strong>：内存淘汰机制是Redis在内存不足时用于释放内存的策略选择，而Lazy Free机制则是一种优化删除操作的手段。Lazy Free可以与内存淘汰机制结合使用，但不是内存淘汰机制的必要组成部分。</li>
</ul>
<blockquote>
<p>内存淘汰策略指的是按照一定的算法，对长期不使用的数据清理掉。下文会介绍详细的内容。</p>
</blockquote>
<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB快照文件"><a href="#RDB快照文件" class="headerlink" title="RDB快照文件"></a>RDB快照文件</h2><p><img src="Snipaste_2024-08-29_19-07-06.png"></p>
<p>在Linux的部分：可以看到RDB持久化在Redis中是默认实现的。</p>
<p><img src="%E5%9B%BE%E7%89%872.png"></p>
<p><strong>演示一下Redis的持久化：</strong>在先前的终端启动redis后，打开另外一个终端测试redis持久化</p>
<p><img src="Snipaste_2024-08-29_19-13-11.png"></p>
<h3 id="save-bgsave"><a href="#save-bgsave" class="headerlink" title="save &amp; bgsave"></a>save &amp; bgsave</h3><p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave，他们的区别就在于是否在「主线程」里执行：</p>
<ul>
<li>执行了 save 命令，就会在主线程生成 RDB 文件，由于和执行操作命令在同一个线程，所以如果写入 RDB 文件的时间太长，<strong>会阻塞主线程</strong>；</li>
<li>执行了 bgsave 命令，会创建一个子进程来生成 RDB 文件，这样可以<strong>避免主线程的阻塞</strong>；</li>
</ul>
<p>Redis 还可以通过配置文件的选项来实现每隔一段时间自动执行一次 bgsave 命令，默认会提供以下配置：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>别看选项名叫 save，实际上执行的是 bgsave 命令，也就是会创建子进程来生成 RDB 快照文件。</p>
<p>只要满足上面条件的任意一个，就会执行 bgsave，它们的意思分别是：</p>
<ul>
<li>900 秒之内，对数据库进行了至少 1 次修改；</li>
<li>300 秒之内，对数据库进行了至少 10 次修改；</li>
<li>60 秒之内，对数据库进行了至少 10000 次修改。</li>
</ul>
<p>这里提一点，Redis 的快照是<strong>全量快照</strong>，也就是说每次执行快照，都是把内存中的「所有数据」都记录到磁盘中。</p>
<p>所以可以认为，执行快照是一个比较重的操作，如果频率太频繁，可能会对 Redis 性能产生影响。如果频率太低，服务器故障时，丢失的数据会更多。</p>
<p>通常可能设置至少 5 分钟才保存一次快照，这时如果 Redis 出现宕机等情况，则意味着最多可能丢失 5 分钟数据。</p>
<p>这就是 RDB 快照的缺点，在服务器发生故障时，丢失的数据会比 AOF 持久化的方式更多，因为 RDB 快照是全量快照的方式，因此执行的频率不能太频繁，否则会影响 Redis 性能，而 AOF 日志可以以秒级的方式记录操作命令，所以丢失的数据就相对更少。</p>
<h3 id="执行快照时，数据是否可以被修改"><a href="#执行快照时，数据是否可以被修改" class="headerlink" title="执行快照时，数据是否可以被修改"></a>执行快照时，数据是否可以被修改</h3><p>执行 bgsave 过程中，Redis 依然<strong>可以继续处理操作命令</strong>的，也就是数据是能被修改的。</p>
<p>那具体如何做到到呢？关键的技术就在于<strong>写时复制技术（Copy-On-Write, COW）。</strong></p>
<p>执行 bgsave 命令的时候，会通过 <code>fork()</code> 创建子进程，此时子进程和父进程是共享同一片内存数据的，因为创建子进程的时候，会复制父进程的页表，但是页表指向的物理内存还是一个。</p>
<p><img src="c34a9d1f58d602ff1fe8601f7270baa7.png"></p>
<p>只有在发生修改内存数据的情况时，物理内存才会被复制一份。</p>
<p><img src="ebd620db8a1af66fbeb8f4d4ef6adc68.png"></p>
<p>这样的目的是为了减少创建子进程时的性能损耗，从而加快创建子进程的速度，毕竟创建子进程的过程中，是会阻塞主线程的。</p>
<p>所以，创建 bgsave 子进程后，由于共享父进程的所有内存数据，于是就可以直接读取主线程（父进程）里的内存数据，并将数据写入到 RDB 文件。</p>
<p><strong>可能发生的情况：</strong></p>
<p>bgsave 快照过程中，如果主线程修改了共享数据，<strong>发生了写时复制后，RDB 快照保存的是原本的内存数据</strong>，而主线程刚修改的数据，是没办法在这一时间写入 RDB 文件的，只能交由下一次的 bgsave 快照。</p>
<p>所以 Redis 在使用 bgsave 快照过程中，如果主线程修改了内存数据，不管是否是共享的内存数据，RDB 快照都无法写入主线程刚修改的数据，因为此时主线程（父进程）的内存数据和子进程的内存数据已经分离了，子进程写入到 RDB 文件的内存数据只能是原本的内存数据。</p>
<p>如果系统恰好在 RDB 快照文件创建完毕后崩溃了，那么 Redis 将会丢失主线程在快照期间修改的数据。</p>
<h2 id="AOF追加文件"><a href="#AOF追加文件" class="headerlink" title="AOF追加文件"></a>AOF追加文件</h2><p>缓冲中的<strong>写操作的具体指令</strong>（读操作记录是没有意义的），会写AOF文件中，进行数据恢复时将文件中的指令逐一执行。</p>
<p><img src="image-20240829205020922.png"></p>
<h3 id="开启配置和刷新频率"><a href="#开启配置和刷新频率" class="headerlink" title="开启配置和刷新频率"></a>开启配置和刷新频率</h3><p>AOF文件默认关闭，需要手动开启。</p>
<p><img src="Snipaste_2024-08-29_20-53-39.png"></p>
<h3 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h3><p>AOF 日志是一个文件，随着执行的写操作命令越来越多，文件的大小会越来越大。</p>
<p>如果当 AOF 日志文件过大就会带来性能问题，比如重启 Redis 后，需要读 AOF 文件的内容以恢复数据，如果文件过大，整个恢复的过程就会很慢。</p>
<p>所以，Redis 为了避免 AOF 文件越写越大，提供了 <strong>AOF 重写机制</strong>，当 AOF 文件的大小超过所设定的阈值后，Redis 就会启用 AOF 重写机制，来压缩 AOF 文件。</p>
<p><img src="Snipaste_2024-08-29_21-08-08.png" alt="重写机制"></p>
<p>自动重写就是使用两个参数，后台重写是使用<code>bgrewriteaof</code>命令和fork()线程，通过<strong>写时复制技术</strong>实现的。</p>
<h1 id="过期删除策略"><a href="#过期删除策略" class="headerlink" title="过期删除策略"></a>过期删除策略</h1><p>Redis 使用的过期删除策略是「<strong>惰性删除+定期删除</strong>」这两种策略配和使用。由于 Redis 的是 <strong>主线程</strong> 删除，因此需要考虑 CPU 和内存的关系。</p>
<h2 id="惰性删除策略"><a href="#惰性删除策略" class="headerlink" title="惰性删除策略"></a>惰性删除策略</h2><p>Redis 是可以对 key 设置过期时间的，因此需要有相应的机制将已过期的键值对删除，而做这个工作的就是过期键值删除策略。</p>
<p>每当我们对一个 key 设置了过期时间时，Redis 会把该 key 带上过期时间存储到一个<strong>过期字典</strong>（expires dict）中，也就是说「过期字典」保存了数据库中所有 key 的过期时间。</p>
<p>当我们查询一个 key 时，Redis 首先检查该 key 是否存在于过期字典中：</p>
<ul>
<li>如果不在，则正常读取键值；</li>
<li>如果存在，则会获取该 key 的过期时间，然后与当前系统时间进行比对，如果比系统时间大，那就没有过期，否则判定该 key 已过期。</li>
</ul>
<p>惰性删除策略的做法是，<strong>不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。</strong></p>
<img src="%E6%83%B0%E6%80%A7%E5%88%A0%E9%99%A4.jpg" alt="img" style="zoom:200%;">



<p>惰性删除策略的<strong>优点</strong>：</p>
<ul>
<li>因为每次访问时，才会检查 key 是否过期，所以此策略只会使用很少的系统资源，因此，惰性删除策略对 CPU 时间最友好。</li>
</ul>
<p>惰性删除策略的<strong>缺点</strong>：</p>
<ul>
<li>如果一个 key 已经过期，而这个 key 又仍然保留在数据库中，那么只要这个过期 key 一直没有被访问，它所占用的内存就不会释放，造成了一定的内存空间浪费。所以，惰性删除策略对内存不友好。</li>
</ul>
<h2 id="定期删除策略"><a href="#定期删除策略" class="headerlink" title="定期删除策略"></a>定期删除策略</h2><p>定期删除策略的做法是，<strong>每隔一段时间「随机」从数据库中取出一定数量的 key 进行检查，并删除其中的过期key。</strong></p>
<p>Redis 的定期删除的流程：</p>
<ol>
<li>从过期字典中随机抽取 20 个 key；</li>
<li>检查这 20 个 key 是否过期，并删除已过期的 key；</li>
<li>如果本轮检查的已过期 key 的数量，超过 5 个（20&#x2F;4），也就是「已过期 key 的数量」占比「随机抽取 key 的数量」大于 25%，则继续重复步骤 1；如果已过期的 key 比例小于 25%，则停止继续删除过期 key，然后等待下一轮再检查。</li>
</ol>
<p>可以看到，定期删除是一个循环的流程。那 Redis 为了保证定期删除不会出现循环过度，导致线程卡死现象，为此增加了定期删除循环流程的时间上限，默认不会超过 25ms。</p>
<p>定期删除策略的<strong>优点</strong>：</p>
<ul>
<li><p>内存压力适中</p>
<p>定期删除策略通过周期性轮询Redis库中的时效性数据，并采用随机抽取的策略来检查并删除过期的key，从而有效释放了过期键占用的内存。这种方式避免了内存被长期占用，减少了内存浪费。</p>
</li>
<li><p>CPU压力可控</p>
<p>与定时删除策略相比，定期删除策略不会在每个key过期时都立即执行删除操作，从而避免了CPU资源的过度占用</p>
</li>
</ul>
<p>定期删除策略的<strong>缺点</strong>：</p>
<ul>
<li>难以确定删除操作执行的时长和频率。如果执行的太频繁，就会对 CPU 不友好；如果执行的太少，那又和惰性删除一样了，过期 key 占用的内存不会及时得到释放。</li>
</ul>
<h2 id="Redis-持久化时，对过期键会如何处理的？"><a href="#Redis-持久化时，对过期键会如何处理的？" class="headerlink" title="Redis 持久化时，对过期键会如何处理的？"></a>Redis 持久化时，对过期键会如何处理的？</h2><p>Redis 持久化文件有两种格式：RDB（Redis Database）和 AOF（Append Only File），下面我们分别来看过期键在这两种格式中的呈现状态。</p>
<p>RDB 文件分为两个阶段，RDB 文件生成阶段和加载阶段。</p>
<ol>
<li><strong>RDB 文件生成阶段</strong>：从内存状态持久化成 RDB（文件）的时候，会对 key 进行过期检查，<strong>过期的键「不会」被保存到新的 RDB 文件中</strong>，因此 Redis 中的过期键不会对生成新 RDB 文件产生任何影响。</li>
<li><strong>RDB 加载阶段：</strong>RDB 加载阶段时，要看服务器是主服务器还是从服务器，分别对应以下两种情况：<ul>
<li><strong>如果 Redis 是「主服务器」运行模式的话，在载入 RDB 文件时，程序会对文件中保存的键进行检查，过期键「不会」被载入到数据库中</strong>。所以过期键不会对载入 RDB 文件的主服务器造成影响；</li>
<li><strong>如果 Redis 是「从服务器」运行模式的话，在载入 RDB 文件时，不论键是否过期都会被载入到数据库中</strong>。但由于主从服务器在进行数据同步时，从服务器的数据会被清空。所以一般来说，过期键对载入 RDB 文件的从服务器也不会造成影响。</li>
</ul>
</li>
</ol>
<p>AOF 文件分为两个阶段，AOF 文件写入阶段和 AOF 重写阶段。</p>
<ol>
<li><strong>AOF 文件写入阶段</strong>：当 Redis 以 AOF 模式持久化时，<strong>如果数据库某个过期键还没被删除，那么 AOF 文件会保留此过期键，当此过期键被删除后，Redis 会向 AOF 文件追加一条 DEL 命令来显式地删除该键值</strong>。</li>
<li><strong>AOF 重写阶段</strong>：执行 AOF 重写时，会对 Redis 中的键值对进行检查，<strong>已过期的键不会被保存到重写后的 AOF 文件中</strong>，因此不会对 AOF 重写造成任何影响。</li>
</ol>
<h1 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h1><p>当 redis 的内存满了以后就会触发内存淘汰策略。</p>
<p>Redis 内存淘汰策略共有八种，这八种策略大体分为「不进行数据淘汰」和「进行数据淘汰」两类策略。</p>
<p><em><strong>1、不进行数据淘汰的策略</strong></em></p>
<p><strong>noeviction</strong>（Redis3.0之后，默认的内存淘汰策略） ：它表示当运行内存超过最大设置内存时，不淘汰任何数据，而是不再提供服务，直接返回错误。</p>
<p><em><strong>2、进行数据淘汰的策略</strong></em></p>
<p>针对「进行数据淘汰」这一类策略，又可以细分为「在设置了过期时间的数据中进行淘汰」和「在所有数据范围内进行淘汰」这两类策略。 在设置了过期时间的数据中进行淘汰：</p>
<ul>
<li><strong>volatile-random</strong>：随机淘汰设置了过期时间的任意键值；</li>
<li><strong>volatile-ttl</strong>（time to live）：优先淘汰过期并且<strong>存活时间最短</strong>的键。适用于缓存场景，并且希望首先淘汰即将过期的数据。</li>
<li><strong>volatile-lru</strong>（Least Recently Used）（Redis3.0 之前，默认的内存淘汰策略）：淘汰所有设置了过期时间的键值中，<strong>最久没被使用的</strong>键值；</li>
<li><strong>volatile-lfu</strong>（Least Frequently Used）（Redis 4.0 后新增的内存淘汰策略）：淘汰所有设置了过期时间的键值中，<strong>最少使用</strong>的键值；</li>
</ul>
<p>在所有数据范围内进行淘汰：</p>
<ul>
<li><strong>allkeys-random</strong>：随机淘汰任意键值;</li>
<li><strong>allkeys-lru</strong>：淘汰整个键值中最久未使用的键值；</li>
<li><strong>allkeys-lfu</strong>（Redis 4.0 后新增的内存淘汰策略）：淘汰整个键值中最少使用的键值。</li>
</ul>
<h2 id="volatile-lru-和-volatile-lfu有什么区别？"><a href="#volatile-lru-和-volatile-lfu有什么区别？" class="headerlink" title="volatile-lru 和 volatile-lfu有什么区别？"></a>volatile-lru 和 volatile-lfu有什么区别？</h2><p><strong>volatile-lru：</strong></p>
<p>Redis 实现的是一种<strong>近似 LRU 算法</strong>，目的是为了更好的节约内存，它的<strong>实现方式是在 Redis 的对象结构体中添加一个额外的字段，用于记录此数据的最后一次访问时间</strong>。</p>
<p>当 Redis 进行内存淘汰时，volatile-lru会使用<strong>随机采样的方式来淘汰数据</strong>，它是随机取 5 个值（此值可配置），然后<strong>淘汰最久没有使用的那个</strong>。</p>
<p><strong>volatile-lfu：</strong></p>
<p>volatile-lfu是基于频率，在键还没有被淘汰时，这个键在一定时间内被访问的次数和这段时间的比值就构成了频率，淘汰后如果是lfu算法，则比较的是这个频率。</p>
<p>LFU 算法是根据数据访问次数来淘汰数据的，它的核心思想是“如果数据过去被访问多次，那么将来被访问的频率也更高”。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis：（二）Redis集群</title>
    <url>/2024/08/30/03Redis%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><p>搭建一个高可用集群有以下内容：主从复制，哨兵模式，切片集群。</p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>虽然使用 AOF 和 RDB 可以保证持久化，但是如果单点暴毙了，那么两个持久化文件也就没有意义了。</p>
<p>因此，可以通过集群的方式，避免单点暴毙的问题。通过一主多从的集群方式，保证服务的可使用。</p>
<p>主从复制是 Redis 高可用服务的最基础的保证，实现方案就是将从前的一台 Redis 服务器，同步数据到多台从 Redis 服务器上，即一主多从的模式，且主从服务器之间采用的是「读写分离」的方式。</p>
<p>主服务器可以进行读写操作，当发生写操作时自动将写操作同步给从服务器，而从服务器一般是只读，并接受主服务器同步过来写操作命令，然后执行这条命令。</p>
<p><img src="2b7231b6aabb9a9a2e2390ab3a280b2d.png" alt="主从复制"></p>
<p>也就是说，所有的数据修改只在主服务器上进行，然后将最新的数据同步给从服务器，这样就使得主从服务器的数据是一致的。</p>
<p>注意，主从服务器之间的命令复制是<strong>异步</strong>进行的。所以，无法实现强一致性保证（主从数据时时刻刻保持一致），数据不一致是难以避免的。</p>
<h3 id="全量同步：第一次同步"><a href="#全量同步：第一次同步" class="headerlink" title="全量同步：第一次同步"></a>全量同步：第一次同步</h3><p><img src="Snipaste_2024-09-01_20-20-52.png" alt="全量同步"></p>
<blockquote>
<p>在第一阶段中，如何判断从节点是不是第一次同步？</p>
</blockquote>
<p>执行了 <code>replicaof</code> 命令后，图中的1.1阶段请求数据同步，从服务器就会给主服务器发送 <code>psync</code> 命令，表示要进行数据同步。</p>
<p>psync 命令包含两个参数，分别是<strong>主服务器的 Replid</strong> 和<strong>复制进度 offset</strong>。</p>
<p><img src="Snipaste_2024-09-01_20-29-06.png" alt="psync命令参数"></p>
<p>也就是说，如果从节点的replid和主节点的不一致，说明从节点是第一次和主节点进行数据同步的。</p>
<blockquote>
<p>第二阶段中，使用的 RDB 快照文件为什么还需要repl_baklog日志（缓冲区）？</p>
</blockquote>
<p>因为 RDB 持久化是异步操作，也就是说，主节点进行 RDB 快照的时候，仍然允许客户端进行写操作，然而 RDB 是快照文件，因此需要将打快照后新写的数据暂存在日志中，在第三阶段发送给从节点。</p>
<h3 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h3><p><img src="Snipaste_2024-09-01_20-35-49.png" alt="增量复制"></p>
<blockquote>
<p>什么时候会进行增量同步？</p>
</blockquote>
<p>比如从节点重启，由于暂时的网络波动，使得主节点和从节点断开，重连以后，只需要续写主节点中新增的命令就可以了。</p>
<blockquote>
<p>续写规则是什么？</p>
</blockquote>
<p>在全量复制中提到，repl_baklog 缓冲区是记录主节点生成 RDB 快照以后的数据，这个缓冲区实际上是一个环形的数据结构。</p>
<p>在图中，左边的环形就是repl_baklog 缓冲区。假设主节点打RDB快照以后，主节点在repl_baklog 缓冲区的数据写了一部分。那么从节点在恢复连接后，将根据<strong>offset 值（记录repl_baklog偏移量，说白了就是从节点复制主节点的时候复制到repl_baklog的哪了，继续复制）</strong>，从repl_baklog 缓冲区中续写数据。图中圆环上的绿色和红色部分就是offset指向的地方，也就是说，从节点复制到这个位置了，继续顺时针方向把这个圆复制下去。</p>
<p><img src="Snipaste_2024-09-01_20-48-58.png"></p>
<blockquote>
<p>当圆形复制满一圈，但是从节点还有没有复制数据怎么办？</p>
</blockquote>
<p><img src="Snipaste_2024-09-01_20-56-51.png"></p>
<p>此时只能做全量复制了。</p>
<blockquote>
<p>优化方案</p>
</blockquote>
<p><img src="Snipaste_2024-09-01_20-59-07.png"></p>
<p>方案一采用网络传输的方式。因为 RDB 文件是写入磁盘的，然后从节点从磁盘拿到 RDB 文件，这个增加了磁盘IO。如果网络快的情况下可以使用网络传输，反之网络阻塞的情况下会更慢。</p>
<h2 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h2><p>在使用 Redis 主从服务的时候，会有一个问题，就是当 Redis 的主从服务器出现故障宕机时，需要手动进行恢复。</p>
<p>为了解决这个问题，Redis 增加了哨兵模式（<strong>Redis Sentinel</strong>），因为哨兵模式做到了可以监控主从服务器，并且提供<strong>主从节点故障转移的功能。</strong></p>
<p><img src="26f88373d8454682b9e0c1d4fd1611b4.png" alt="哨兵机制"></p>
<blockquote>
<p>为什么要有哨兵机制？</p>
</blockquote>
<p>在 Redis 的主从架构中，由于主从模式是读写分离的，如果主节点（master）挂了，那么将没有主节点来服务客户端的写操作请求，也没有主节点给从节点（slave）进行数据同步了。</p>
<p>哨兵其实是一个运行在特殊模式下的 Redis 进程，<strong>所以它也是一个节点。</strong>从“哨兵”这个名字也可以看得出来，它相当于是“观察者节点”，观察的对象是主从节点。<strong>为了实现监控功能，哨兵节点往往也会做成集群。</strong></p>
<p>当然，它不仅仅是观察那么简单，在它观察到有异常的状况下，会做出一些“动作”，来修复异常状态。</p>
<p>哨兵节点主要负责三件事情：<strong>监控、选主、通知</strong>。</p>
<p>所以，我们重点要学习这三件事情：</p>
<ul>
<li>哨兵节点是如何监控节点的？又是如何判断主节点是否真的故障了？</li>
<li>根据什么规则选择一个从节点切换为主节点？</li>
<li>怎么把新主节点的相关信息通知给从节点和客户端呢？</li>
</ul>
<h3 id="监控：主节点下线"><a href="#监控：主节点下线" class="headerlink" title="监控：主节点下线"></a>监控：主节点下线</h3><p>监控就是哨兵节点对集群的实时监控，哨兵节点对于主节点下线的类型有两种：<strong>主观下线和客观下线。</strong></p>
<h4 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h4><p>如果主节点和从节点在规定的时间内没有响应哨兵节点的 <code>ping 命令</code>，则这个哨兵节点认为主节点主观下线。这个「规定的时间」是配置项 <code>down-after-milliseconds</code> 参数设定的，单位是毫秒。</p>
<p><img src="26f88373d8454682b9e0c1d4fd1611b4-17250140826045.png" alt="哨兵监控主从节点"></p>
<h4 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h4><p><strong>客观下线只适用于主节点。</strong></p>
<p>之所以针对「主节点」设计「主观下线」和「客观下线」两个状态，是因为有可能「主节点」其实并没有故障，可能只是因为主节点的系统压力比较大或者网络发送了拥塞，导致主节点没有在规定时间内响应哨兵的 PING 命令。</p>
<p>所以，为了减少误判的情况，哨兵在部署的时候不会只部署一个节点，而是用多个节点部署成<strong>哨兵集群</strong>（<em>最少需要三台机器来部署哨兵集群</em>），<strong>通过多个哨兵节点一起判断，就可以就可以避免单个哨兵因为自身网络状况不好，而误判主节点下线的情况</strong>。同时，多个哨兵的网络同时不稳定的概率较小，由它们一起做决策，误判率也能降低。</p>
<p><img src="13e4361407ba46979e802eaa654dcf67.png" alt="客观下线"></p>
<p>当一个哨兵节点判断主节点客观下线以后，会通过<strong>发布&#x2F;订阅模式（下文介绍）</strong>与其他哨兵节点进行通信，询问它们是否也观察到相同的主节点不可达状态。如果同意发起主节点主观下线的哨兵节点，那么则【同意】这个哨兵节点的判断。<strong>当达到哨兵配置文件中<code>quorum</code>（法定人数）指定的哨兵节点数量都认为主节点为主观下线时，主节点会被标记为客观下线。</strong></p>
<blockquote>
<p>quorum 是一个关键参数，它决定了需要多少哨兵节点的同意才能确认主节点的客观下线状态。</p>
</blockquote>
<h3 id="选主：哨兵-Leader"><a href="#选主：哨兵-Leader" class="headerlink" title="选主：哨兵 Leader"></a>选主：哨兵 Leader</h3><p><strong>由哪个哨兵进行主从故障转移？</strong></p>
<p>进行主从故障转移的哨兵就是一个「Leader」，成为Leader之前还得是一个「候选者」。</p>
<p><strong>成为候选者：</strong></p>
<p>认为主节点主观下线的同时得的赞同票数达到一半以上且大于等于哨兵配置文件中<code>quorum</code>。</p>
<blockquote>
<p>判断主节点主观下线的时候，只能是一个哨兵节点发起判断命令，候选者只能是一个节点吗？</p>
<p>不是的，并不是只能是一个哨兵节点发起判断命令。我们说过判断主观下线的时候有一个规定的时间，这个「规定的时间」是配置项 <code>down-after-milliseconds</code> 参数设定的，单位是毫秒。那么在规定的时间内判断主节点主观下线的哨兵节点都可以成为候选者。</p>
</blockquote>
<p><strong>候选者如何选举成为 Leader：</strong></p>
<p>候选者会向其他哨兵发送命令，表明希望成为 Leader 来执行主从切换，并让所有其他哨兵对它进行投票。</p>
<p>每个哨兵只有一次投票机会，如果用完后就不能参与投票了，可以投给自己或投给别人，但是只有候选者才能把票投给自己。</p>
<p>那么在投票过程中，任何一个「候选者」，要满足两个条件：</p>
<ul>
<li>第一，拿到半数以上的赞成票；</li>
<li>第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。</li>
</ul>
<p>每位候选者都会先给自己投一票，然后向其他哨兵发起投票请求。如果投票者先收到「候选者 A」的投票请求，就会先投票给它，如果投票者用完投票机会后，收到「候选者 B」的投票请求后，就会拒绝投票。这时，候选者 A 先满足了上面的那两个条件，所以「候选者 A」就会被选举为 Leader。</p>
<h3 id="通知：主从故障转移"><a href="#通知：主从故障转移" class="headerlink" title="通知：主从故障转移"></a>通知：主从故障转移</h3><p>主从故障转移操作包含以下四个步骤：</p>
<blockquote>
<p>第一步：在已下线主节点（旧主节点）属下的所有「从节点」里面，挑选出一个从节点，并将其转换为主节点。</p>
</blockquote>
<p>第一轮考察：优先级最高的从节点胜出。</p>
<p>第二轮考察：复制进度最靠前的从节点胜出。</p>
<blockquote>
<p>第二步：让已下线主节点属下的所有「从节点」修改复制目标，修改为复制「新主节点」。</p>
</blockquote>
<p>当新主节点出现之后，哨兵 leader 下一步要做的就是，让已下线主节点属下的所有「从节点」指向「新主节点」，这一动作可以通过向「从节点」发送 <code>SLAVEOF</code> 命令来实现。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli SLAVEOF 新主节点的IP地址 新主节点的端口号</span><br></pre></td></tr></table></figure>



<blockquote>
<p>第三步：将新主节点的 IP 地址和信息，通过「发布者&#x2F;订阅者机制」通知给客户端；</p>
</blockquote>
<p><strong>通过 Redis 的发布者&#x2F;订阅者机制来实现</strong></p>
<p><img src="%E5%93%A8%E5%85%B5%E9%A2%91%E9%81%93.webp" alt="发布订阅模式"></p>
<p>客户端和哨兵建立连接后，客户端会订阅哨兵提供的频道。<strong>主从切换完成后，哨兵就会向 <code>+switch-master</code> 频道发布新主节点的 IP 地址和端口的消息，这个时候客户端就可以收到这条信息，然后用这里面的新主节点的 IP 地址和端口进行通信了</strong>。</p>
<p>通过发布者&#x2F;订阅者机制机制，有了这些事件通知，客户端不仅可以在主从切换后得到新主节点的连接信息，还可以监控到主从节点切换过程中发生的各个重要事件。这样，客户端就可以知道主从切换进行到哪一步了，有助于了解切换进度。</p>
<blockquote>
<p>第四步：继续监视旧主节点，当这个旧主节点重新上线时，将它设置为新主节点的从节点。</p>
</blockquote>
<p>同样采用<code>SLAVEOF</code> 命令来实现。</p>
<p><strong>设置从服务器</strong>：假设你有一个主服务器运行在 <code>192.168.1.100</code> 的 <code>6379</code> 端口上，你想将当前 Redis 实例设置为这个主服务器的从服务器，你可以执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SLAVEOF 192.168.1.100 6379</span><br></pre></td></tr></table></figure>

<h3 id="发布者-订阅者模式"><a href="#发布者-订阅者模式" class="headerlink" title="发布者&#x2F;订阅者模式"></a>发布者&#x2F;订阅者模式</h3><p>哨兵如何构成哨兵集群的？哨兵之间如何互相感知对方？</p>
<p><strong>哨兵节点之间是通过 Redis 的发布者&#x2F;订阅者机制来相互发现的</strong>。</p>
<p>在主从集群中，主节点上有一个名为<code>__sentinel__:hello</code>的频道，不同哨兵就是通过它来相互发现，实现互相通信的。</p>
<p><img src="a6286053c6884cf58bf397d01674fe80.png" alt="发布订阅者模式"></p>
<blockquote>
<p>哨兵如何感知从节点？</p>
</blockquote>
<p>在主观下线中提到，哨兵对主节点是通过PING命令感知主节点的。而哨兵对从节点的感知则是通过 <strong>INFO命令</strong>。</p>
<p>主节点知道所有「从节点」的信息，所以哨兵会每 10 秒一次的频率向主节点发送 INFO 命令来获取所有「从节点」的信息。</p>
<p>如下图所示，哨兵 B 给主节点发送 INFO 命令，主节点接受到这个命令后，就会把从节点列表返回给哨兵。接着，哨兵就可以根据从节点列表中的连接信息，和每个从节点建立连接，并在这个连接上持续地对从节点进行监控。哨兵 A 和 C 可以通过相同的方法和从节点建立连接。</p>
<p><img src="fdd5f695bb3643258662886f9fba0aab.png" alt="哨兵之间互相感知"></p>
<h2 id="切片集群模式"><a href="#切片集群模式" class="headerlink" title="切片集群模式"></a>切片集群模式</h2><p>当 Redis 缓存数据量大到一台服务器无法缓存时，就需要使用 <strong>Redis 切片集群</strong>（Redis Cluster ）方案，它将数据分布在不同的服务器上，以此来降低系统对单主节点的依赖，从而提高 Redis 服务的读写性能。</p>
<p>Redis Cluster 方案采用哈希槽（Hash Slot），来处理数据和节点之间的映射关系。在 Redis Cluster 方案中，<strong>一个切片集群共有 16384 个哈希槽</strong>，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中，具体执行过程分为两大步：</p>
<ul>
<li>根据键值对的 key，按照<a href="https://www.cnblogs.com/skullboyer/p/8342167.html">CRC16算法</a>计算一个 16 bit 的值。</li>
<li>再用 16bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽。</li>
</ul>
<p>接下来的问题就是，这些哈希槽怎么被映射到具体的 Redis 节点上的呢？有两种方案：</p>
<ul>
<li><strong>平均分配：</strong> 在使用 cluster create 命令创建 Redis 集群时，Redis 会自动把所有哈希槽平均分布到集群节点上。比如集群中有 9 个节点，则每个节点上槽的个数为 16384&#x2F;9 个。</li>
<li><strong>手动分配：</strong> 可以使用 cluster meet 命令手动建立节点间的连接，组成集群，再使用 cluster addslots 命令，指定每个节点上的哈希槽个数。</li>
</ul>
<p>假设集群中有 2 个 redis 节点，哈希槽有 4 个（正常是16384），我采用手动分配的方式将slot 0，slot 1分配给 redis实例1 ，将slot 2，slot 3分配给 redis实例2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.1.10 –p 6379 cluster addslots 0,1</span><br><span class="line">redis-cli -h 192.168.1.11 –p 6379 cluster addslots 2,3</span><br></pre></td></tr></table></figure>

<p>此时插入方式如下：如果键通过CRC16算法然后对哈希槽个数（4）取余得到1 ，那么就将数据插入slot 1中，slot对应的是redis 实例1，其他哈希槽同理。</p>
<p><img src="redis%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4%E6%98%A0%E5%B0%84%E5%88%86%E5%B8%83%E5%85%B3%E7%B3%BB.jpg" alt="哈希槽"></p>
<h3 id="集群脑裂"><a href="#集群脑裂" class="headerlink" title="集群脑裂"></a>集群脑裂</h3><p>在哨兵机制中提到，如果主节点被客观下线以后，哨兵节点（Leader）会重新选举一个从节点作为新的主节点。</p>
<blockquote>
<p>假设如下场景：客户端和主节点连接正常，主节点和 redis 集群连接不正常，此时会发生什么？</p>
</blockquote>
<p><strong>客户端和主节点连接正常</strong></p>
<p>此时客户端正常向主节点执行写操作和部分读操作。</p>
<p><strong>主节点和 redis 集群连接不正常</strong></p>
<p>主节点和 redis 集群之间可能发生网络波动，导致哨兵集群认为主节点客观下线，哨兵节点（Leader）会重新选举一个从节点作为新的主节点。</p>
<p>此时，选举出来的主节点和原来的主节点一共就有两个主节点了，这就是脑裂。</p>
<p><strong>脑裂问题</strong></p>
<p>之后网络波动的主节点恢复正常后，新的主节点则会把原来的主节点降为从节点，此时进行全量复制时，会清空之前客户端正常向网络波动的主节点执行写操作的数据，然后再进行全量复制这就是脑裂带来的问题。</p>
<p><strong>解决方案</strong></p>
<p>在 Redis 的配置文件中有两个参数我们可以设置：</p>
<ul>
<li>min-slaves-to-write x，主节点必须要有至少 x 个从节点连接，如果小于这个数，主节点会禁止写数据。</li>
<li>min-slaves-max-lag x，主从数据复制和同步的延迟不能超过 x 秒，如果超过，主节点会禁止写数据。</li>
</ul>
<p>通过指定这两个参数，使得旧的主节点无法写数据，让新的主节点上线时再进行写操作。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis：（三）缓存设计</title>
    <url>/2024/09/02/04Redis%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>通常我们为了保证缓存中的数据与数据库中的数据一致性，会给 Redis 里的数据设置过期时间，当缓存数据过期后，用户访问的数据如果不在缓存里，业务系统需要重新生成缓存，因此就会访问数据库，并将数据更新到 Redis 里，这样后续请求都可以直接命中缓存。</p>
<p><img src="e2b8d2eb5536aa71664772457792ec40.png" alt="img"></p>
<p>那么，当<strong>大量缓存数据在同一时间过期（失效）时，如果此时有大量的用户请求，都无法在 Redis 中处理，于是全部请求都直接访问数据库，从而导致数据库的压力骤增，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃，这就是缓存雪崩</strong>的问题。</p>
<p>对于缓存雪崩问题，我们可以采用两种方案解决。</p>
<ul>
<li><strong>将缓存失效时间随机打散：</strong> 我们可以在原有的失效时间基础上增加一个随机值（比如 1 到 10 分钟）这样每个缓存的过期时间都不重复了，也就降低了缓存集体失效的概率。</li>
<li><strong>设置缓存不过期：</strong> 我们可以通过后台服务来更新缓存数据，从而避免因为缓存失效造成的缓存雪崩，也可以在一定程度上避免缓存并发问题。</li>
</ul>
<h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p>我们的业务通常会有几个数据会被频繁地访问，比如秒杀活动，这类被频地访问的数据被称为热点数据。</p>
<p>如果缓存中的<strong>某个热点数据过期</strong>了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮，这就是<strong>缓存击穿</strong>的问题。</p>
<p>可以发现缓存击穿跟缓存雪崩很相似，你可以认为缓存击穿是缓存雪崩的一个子集。 应对缓存击穿可以采取前面说到两种方案：</p>
<ul>
<li>互斥锁方案（Redis 中使用 setNX 方法设置一个状态位，表示这是一种锁定状态），保证同一时间只有一个业务线程请求缓存，未能获取互斥锁的请求，要么等待锁释放后重新读取缓存，要么就返回空值或者默认值。</li>
<li>不给热点数据设置过期时间，由后台异步更新缓存，或者在热点数据准备要过期前，提前通知后台线程更新缓存以及重新设置过期时间；</li>
</ul>
<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>Redis的缓存穿透问题是一个在缓存应用中常见的性能问题，具体指的是用户<strong>请求的数据在缓存中不存在，且在数据库中也不存在。</strong>由于缓存未命中，这些请求会绕过缓存直接访问数据库，导致数据库压力骤增，甚至可能引发系统崩溃。</p>
<p>假设在一个电商系统中，用户通过商品ID来查询商品信息。这个系统使用了Redis作为缓存层，MySQL作为数据存储层。正常情况下，用户请求商品信息时，系统会首先在Redis中查找，如果找到则直接返回结果；如果Redis中没有找到，则去MySQL中查询，并将查询结果缓存到Redis中以便后续使用。</p>
<p>然而，如果攻击者知道某些商品ID在数据库中并不存在（比如通过扫描商品ID范围或使用非法参数），他们就可以大量发送这些不存在的商品ID的查询请求。由于这些请求在Redis中找不到对应的数据，它们会全部打到MySQL上。如果这类请求的数量非常庞大，就会给MySQL带来巨大的压力，甚至可能导致MySQL崩溃，从而影响整个系统的正常运行。</p>
<p>缓存穿透的发生一般有这两种情况：</p>
<ul>
<li>业务误操作，缓存中的数据和数据库中的数据都被误删除了，所以导致缓存和数据库中都没有数据；</li>
<li>黑客恶意攻击，故意大量访问某些读取不存在数据的业务；</li>
</ul>
<p>应对缓存穿透的方案，常见的方案有三种。</p>
<ul>
<li><p><strong>非法请求的限制</strong>：当有大量恶意请求访问不存在的数据的时候，也会发生缓存穿透，因此在 API 入口处我们要判断求请求参数是否合理，请求参数是否含有非法值、请求字段是否存在，如果判断出是恶意请求就直接返回错误，避免进一步访问缓存和数据库。</p>
</li>
<li><p><strong>设置空值或者默认值</strong>：当我们线上业务发现缓存穿透的现象时，可以针对查询的数据，在缓存中设置一个空值或者默认值，这样后续请求就可以从缓存中读取到空值或者默认值，返回给应用，而不会继续查询数据库。</p>
</li>
<li><p><strong>使用布隆过滤器快速判断数据是否存在，避免通过查询数据库来判断数据是否存在</strong>：我们可以在写入数据库数据时，使用布隆过滤器做个标记，然后在用户请求到来时，业务线程确认缓存失效后，可以通过查询布隆过滤器快速判断数据是否存在，如果不存在，就不用通过查询数据库来判断数据是否存在，即使发生了缓存穿透，大量请求只会查询 Redis 和布隆过滤器，而不会查询数据库，保证了数据库能正常运行，Redis 自身也是支持布隆过滤器的。</p>
<blockquote>
<p>布隆过滤器是一种概率型数据结构，用于判断一个元素是否在一个集合中。虽然它存在一定的误判率，但可以有效地减少不必要的数据库查询。在查询Redis之前，先使用布隆过滤器判断请求的商品ID是否存在，如果不存在则直接返回，不再查询数据库。</p>
</blockquote>
</li>
</ul>
<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p><a href="https://blog.csdn.net/qq_41125219/article/details/119982158">布隆(Bloom Filter)过滤器——全面讲解，建议收藏-CSDN博客</a></p>
<p>Q：假设已经将布隆过滤器注册为bean对象，为了防止缓存穿透的问题，我在其他service层使用布隆过滤器的时候的逻辑如何写？查询不到的话直接返回空对象吗？</p>
<p>A：在使用布隆过滤器来防止缓存穿透时，你的策略通常是在访问缓存之前先通过布隆过滤器快速检查请求的数据是否可能存在于你的数据库中或缓存中。如果布隆过滤器判断该数据“不存在”（即<code>mightContain</code>方法返回<code>false</code>），则可以直接返回一个空对象或错误信息，避免进一步查询数据库或缓存。如果布隆过滤器判断该数据“可能存在”（即<code>mightContain</code>方法返回<code>true</code>），则继续执行后续的缓存查询或数据库查询逻辑。</p>
<p>以下是一个简化的服务层方法示例，该方法展示了如何在使用Spring Boot和布隆过滤器时防止缓存穿透：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate; <span class="comment">// 假设这是你的缓存服务  </span></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> BloomFilterService bloomFilterService; <span class="comment">// 假设这是你的布隆过滤器服务</span></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> YourDatabaseService yourDatabaseService; <span class="comment">// 假设这是你的数据库服务  </span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 业务做查询的方法</span></span><br><span class="line">    <span class="keyword">public</span> YourDataObject <span class="title function_">getDataById</span><span class="params">(String id)</span> &#123;  </span><br><span class="line">        <span class="comment">// 首先，通过布隆过滤器检查该id是否可能存在  </span></span><br><span class="line">        <span class="keyword">if</span> (!bloomFilterService.mightContain(id)) &#123;  </span><br><span class="line">            <span class="comment">// 如果布隆过滤器判断该id不存在，则直接返回一个空对象或错误信息  </span></span><br><span class="line">            <span class="comment">// 这里以返回null为例，但实际应用中可能需要更明确的响应  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 如果布隆过滤器判断该id可能存在，则继续查询缓存  </span></span><br><span class="line">        <span class="type">YourDataObject</span> <span class="variable">cachedData</span> <span class="operator">=</span> redisTemplate.get(id);  </span><br><span class="line">        <span class="keyword">if</span> (cachedData != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="comment">// 如果缓存中有数据，则直接返回缓存数据  </span></span><br><span class="line">            <span class="keyword">return</span> cachedData;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 如果缓存中没有数据，则查询数据库  </span></span><br><span class="line">        <span class="type">YourDataObject</span> <span class="variable">dbData</span> <span class="operator">=</span> yourDatabaseService.getById(id);  </span><br><span class="line">        <span class="keyword">if</span> (dbData != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="comment">// 如果数据库中有数据，则更新缓存（如果需要）并返回数据  </span></span><br><span class="line">            yourCacheService.put(id, dbData); <span class="comment">// 假设这是你的缓存更新方法  </span></span><br><span class="line">            <span class="keyword">return</span> dbData;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 如果数据库中也没有数据，则返回一个空对象或错误信息  </span></span><br><span class="line">        <span class="comment">// 这里以返回null为例  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Spring-Boot项目中使用布隆过滤器"><a href="#Spring-Boot项目中使用布隆过滤器" class="headerlink" title="Spring Boot项目中使用布隆过滤器"></a>Spring Boot项目中使用布隆过滤器</h2><p>在Spring Boot项目中使用布隆过滤器（Bloom Filter）可以有效地减少查询数据库或缓存的次数，特别是在处理大量数据并判断元素是否存在于某个集合时。布隆过滤器通过牺牲一定的错误率（即假正率）来换取空间效率和查询时间的显著提升。</p>
<h3 id="步骤一：添加依赖"><a href="#步骤一：添加依赖" class="headerlink" title="步骤一：添加依赖"></a>步骤一：添加依赖</h3><p>首先，你需要找到一个Java实现的布隆过滤器库。Google的Guava库提供了布隆过滤器的实现，你可以通过Maven或Gradle将其添加到你的项目中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>你的Guava版本号<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请替换<code>你的Guava版本号</code>为最新的或者适合你项目的版本。</p>
<h3 id="步骤二：配置布隆过滤器"><a href="#步骤二：配置布隆过滤器" class="headerlink" title="步骤二：配置布隆过滤器"></a>步骤二：配置布隆过滤器</h3><p>在你的Spring Boot应用中，你可能需要配置一个布隆过滤器，并决定其预期的元素数量、错误率等参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;  </span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Hashing;  </span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Charsets;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterConfig</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedInsertions</span> <span class="operator">=</span> <span class="number">1000000</span>; <span class="comment">// 预期插入的元素数量  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">fpp</span> <span class="operator">=</span> <span class="number">0.01</span>; <span class="comment">// 假正率  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BloomFilter&lt;CharSequence&gt; <span class="title function_">createBloomFilter</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">// 使用Guava的BloomFilter.create函数创建布隆过滤器  </span></span><br><span class="line">        <span class="comment">// Funnels.stringFunnel(Charsets.UTF_8) 是将字符串转换为字节序列的函数  </span></span><br><span class="line">        <span class="keyword">return</span> BloomFilter.create(  </span><br><span class="line">            Funnels.stringFunnel(Charsets.UTF_8),  </span><br><span class="line">            expectedInsertions,  </span><br><span class="line">            fpp  </span><br><span class="line">        );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="步骤三：使用布隆过滤器"><a href="#步骤三：使用布隆过滤器" class="headerlink" title="步骤三：使用布隆过滤器"></a>步骤三：使用布隆过滤器</h3><p>在Spring Boot应用中，你可以在服务层或数据访问层使用布隆过滤器来减少不必要的数据库或缓存查询。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BloomFilter&lt;CharSequence&gt; bloomFilter;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SomeService</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.bloomFilter = BloomFilterConfig.createBloomFilter();  </span><br><span class="line">        <span class="comment">// 初始化时，可以添加一些元素到布隆过滤器中  </span></span><br><span class="line">        <span class="comment">// bloomFilter.put(&quot;someElement&quot;);  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mightContain</span><span class="params">(String element)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> bloomFilter.mightContain(element);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 在需要的地方使用mightContain来减少查询  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">elementToCheck</span> <span class="operator">=</span> <span class="string">&quot;testElement&quot;</span>;  </span><br><span class="line">        <span class="keyword">if</span> (bloomFilter.mightContain(elementToCheck)) &#123;  </span><br><span class="line">            <span class="comment">// 假设这里执行数据库或缓存查询  </span></span><br><span class="line">            <span class="comment">// 注意：布隆过滤器可能有假正率，所以这里的查询是必要的  </span></span><br><span class="line">            <span class="comment">// ...  </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">// 元素肯定不在集合中，无需进一步查询  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>布隆过滤器只能告诉你某个元素<strong>可能</strong>存在于集合中，但不能保证一定存在。</li>
<li>当你从布隆过滤器得到<code>true</code>时，你需要进一步验证元素是否真的存在于你的数据源中（比如数据库或缓存）。</li>
<li>当你从布隆过滤器得到<code>false</code>时，你可以确信元素<strong>不在</strong>集合中，因为布隆过滤器不会有假负率。</li>
<li>布隆过滤器的性能和空间效率受其参数（如预期插入的元素数量和假正率）的影响，需要根据你的具体需求进行调整。</li>
</ul>
<h2 id="数据插入布隆过滤器的时机"><a href="#数据插入布隆过滤器的时机" class="headerlink" title="数据插入布隆过滤器的时机"></a>数据插入布隆过滤器的时机</h2><p>将数据插入布隆过滤器（Bloom Filter）的时机主要取决于你的应用场景和需求。一般来说，以下情况是将数据插入布隆过滤器的常见时机：</p>
<ol>
<li>新增数据时<ul>
<li>当有新数据需要被加入到你的系统中，并且这些数据未来可能需要被快速检查是否存在时，你应该在新增数据的同时将其插入到布隆过滤器中。这样可以利用布隆过滤器的空间效率和查询速度优势，快速判断新数据是否已存在，避免重复插入或执行不必要的操作。</li>
</ul>
</li>
<li>数据更新时（视情况而定）<ul>
<li>数据更新时是否需要将数据重新插入布隆过滤器取决于你的具体需求。如果数据更新只是修改了某些字段的值，而这些字段与布隆过滤器中的检查逻辑无关，那么可能不需要重新插入。但是，如果数据更新改变了布隆过滤器中用于判断的关键信息（比如唯一标识符），那么你可能需要重新插入更新后的数据到布隆过滤器中，以确保查询的准确性。</li>
</ul>
</li>
<li>缓存失效或数据库数据变动时<ul>
<li>在使用布隆过滤器作为缓存失效或数据库数据存在性检查的辅助手段时，如果缓存中的数据失效或数据库中的数据发生了变动（如新增、删除等），你需要同步更新布隆过滤器中的数据，以保持其与实际数据的一致性。</li>
</ul>
</li>
<li>初始化或系统启动时<ul>
<li>在系统初始化或启动时，如果你需要将一些基础数据或热点数据预先加载到布隆过滤器中以提高查询效率，那么此时也是将数据插入布隆过滤器的合适时机。</li>
</ul>
</li>
</ol>
<p>需要注意的是，布隆过滤器存在误判率，即有可能将不存在的元素误判为存在。因此，在使用布隆过滤器进行存在性判断时，如果得到的结果为“存在”，你可能还需要通过其他方式（如直接查询数据库或缓存）来进一步验证。</p>
<p>此外，由于布隆过滤器不支持删除操作（或删除操作会导致误判率增加），因此在设计系统时需要考虑到这一点，避免在需要频繁删除元素的场景中使用布隆过滤器。如果确实需要删除元素，可以考虑使用其他数据结构或算法来辅助实现。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2024/09/04/05SpringAMQP/</url>
    <content><![CDATA[<h1 id="同步通信与异步通信"><a href="#同步通信与异步通信" class="headerlink" title="同步通信与异步通信"></a>同步通信与异步通信</h1><h2 id="feign-无法解决的问题"><a href="#feign-无法解决的问题" class="headerlink" title="feign 无法解决的问题"></a>feign 无法解决的问题</h2><p>假设有一个场景：</p>
<p>客户端发起请求购买商品，此时使用feign的时候，调用链应该如下</p>
<p>客户端 -&gt; 支付服务 -&gt; 订单服务 -&gt; 支付服务 -&gt; 仓储服务 -&gt; 后续服务 -&gt; 支付服务 -&gt; 客户端</p>
<p><img src="image-20240904221927859.png" alt="同步调用时的请求链"></p>
<p>可以看到，这条链还是非常长的，而且引发了以下问题：</p>
<p><strong>代码耦合度非常高：</strong></p>
<p>假设在需要加入新的业务需求，那么就需要在支付服务（见下图）中改代码，来一个新需求加一个，非常麻烦。</p>
<p>再来就是业务之间是一个调用一个的链式调用，如果中途有个服务挂了，那么整个项目也就一起挂了。</p>
<p><strong>同步调用非耗时间：</strong></p>
<p>每当有客户发送支付服务的请求，就需要等待订单服务反馈回支付服务后才能继续发送仓储服务的请求，如此反复的把所有业务跑完，非常耗时间。假设回到支付服务再反馈到客户所需时间需要500毫秒，也就等于1秒中只能处理两个客户，效率非常低。这种接口等待引发的问题甚至导致资源利用率下降，每个接口都需要等待其他业务响应结束才能执行。</p>
<p><strong>资源浪费：</strong></p>
<p>同步调用的时候，调用链中的每个服务都在等待响应，不能释放请求的资源，高并发的场景下会极度的浪费资源。</p>
<p><img src="image-20240904215509077.png" alt="feign问题"></p>
<h2 id="异步调用方案"><a href="#异步调用方案" class="headerlink" title="异步调用方案"></a>异步调用方案</h2><p>在同步调用的基础上改造代码，通过使用中间件的方式（发布&#x2F;订阅者模式）异步实现。</p>
<p><img src="image-20240904215120129.png" alt="异步通知"></p>
<p><strong>同步调用时的流程：</strong></p>
<p>客户端 -&gt; 支付服务 -&gt; 订单服务 -&gt; 支付服务 -&gt; 仓储服务 -&gt; 后续服务 -&gt; 支付服务 -&gt; 客户端</p>
<p><strong>异步调用时的流程：</strong></p>
<p>客户端 -&gt; 支付服务 -&gt; broker ，此时根据订阅的 broker 的服务进行异步的调用服务：</p>
<p><strong>也就是说，到 broker 开始，同时进行的服务有：</strong></p>
<p>broker -&gt; 订单服务</p>
<p>broker -&gt; 仓储服务</p>
<p>broker -&gt; 短信服务</p>
<p>broker -&gt; 支付服务 -&gt; 客户端</p>
<p>同时进行的服务取决于是否和 broker 为<strong>发布&#x2F;订阅模式。</strong></p>
<p><strong>broker相当于一个服务的代理，能解决的问题：</strong></p>
<ol>
<li>耦合度降低。支付服务不再需要调用订单服务等接口，只需要后续服务在broker接口注册服务，然后让支付服务发送一个通知即可。</li>
<li>吞吐量提升。既然不需要后续服务等待，只是发布通知，用户调用支付服务接口再调用broker后就可以返回用户反馈，时间缩短。</li>
<li>故障隔离。假设仓储服务挂了也不影响支付服务反馈给客户，自己处理仓储服务的故障即可。</li>
<li>流量削峰。多并发时可以对访问量进行缓冲，微服务基于自己的能力从broker中获取访问量处理业务。</li>
</ol>
<h1 id="Broker：MQ"><a href="#Broker：MQ" class="headerlink" title="Broker：MQ"></a>Broker：MQ</h1><p><strong>使用异步通信的中间件通常是消息队列，也就是MQ。</strong></p>
<h2 id="常用-MQ"><a href="#常用-MQ" class="headerlink" title="常用 MQ"></a>常用 MQ</h2><p><img src="image-20240904221454969.png" alt="MQ介绍"></p>
<p>这里结合 RabbitMQ 和 SpringCloud 介绍一下如何使用 MQ 优化项目的速度，在那之前先介绍几个概念：</p>
<h1 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h1><p>结合刚刚订单的例子，不难发现，<strong>支付服务为 publisher，也就是发布者；订单服务、仓储服务等为 consumer，也就是消费者；中间件 broker为我们即将介绍的 rabbitMQ。</strong></p>
<p>所以学习 MQ，我认为需要知道的知识就只有几个：</p>
<ul>
<li>MQ 内的构造是怎样的？</li>
<li>publisher 如何将消息发送给 MQ?</li>
<li>MQ 如何将消息发送给 consumer？</li>
</ul>
<p>结合这几个问题，我们来开始学习MQ。</p>
<h2 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h2><p>由于我使用的是docker，所以我按照docker来写教学</p>
<p>第一步：拉取镜像，拉取的版本可自行决定，报错的话另外找命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitMQ latest</span><br></pre></td></tr></table></figure>

<p>第二步：给mq镜像创建容器，中间设置的账号密码可以改成自己记得住的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=root \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=root \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure>

<p>此时容器正常运行会返回我圈出来的那一部分。</p>
<p><img src="image-20240906142442851.png" alt="虚拟机中docker跑mq"></p>
<p>第三步：浏览器输入ip+端口号打开客户端。有正常显示登陆的页面则配置ok。账号密码为第二步你设置的值。</p>
<p><img src="image-20240906142554844.png" alt="mq客户端"></p>
<p><img src="Snipaste_2024-09-06_14-35-17.png"></p>
<p>下面根据这个主页对内部结构做介绍。</p>
<h2 id="RabbitMQ内部结构"><a href="#RabbitMQ内部结构" class="headerlink" title="RabbitMQ内部结构"></a>RabbitMQ内部结构</h2><p>RabbitMQ中的几个概念：</p>
<p>•    channel：通道，操作MQ的工具</p>
<p>•    exchange：交换机，<strong>路由</strong>消息到队列中</p>
<p>•    queue：队列，消息存储，缓存消息</p>
<p>•    virtual host：虚拟主机，根据不同用户对queue、exchange等资源的逻辑<strong>分组</strong>，避免队列冲突。就和nacos的namespace一样，分组后队列名字即使相同但是彼此之间不可见对方的队列。</p>
<p><img src="image-20240904222142460.png" alt="RabbitMQ结构"></p>
<h1 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h1><p>这是一个mq的demo的项目结构</p>
<p><img src="image-20240906144915914.png" alt="mq-demo"></p>
<p>使用MQ之前需要在项目中引入springAMQP的依赖。这一步直接在父项目中添加。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在发布者和消费者的项目中添加yml文件配置。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.88</span><span class="number">.133</span> <span class="comment"># rabbitMQ的ip地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>然后接下来通过消息模型来实践MQ。</p>
<h1 id="快速入门：基本消息队列"><a href="#快速入门：基本消息队列" class="headerlink" title="快速入门：基本消息队列"></a>快速入门：基本消息队列</h1><p>基本消息队列通过发布者 -&gt; queue -&gt; 消费者的方式实现。基本消息队列不使用exchange交换机，而只是使用队列queue。</p>
<p>发布者中，创建一个测试类去编写测试方法，通过 rabbitTemplate 类，将消息和队列作为参数调用 convertAndSend 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage2SimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在消费者中，消费传递过来的消息，使用@RabbitListener注解监听simple.queue队列的消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;消费者接收到simple.queue的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在客户端中，创建一个叫simple.queue的队列</p>
<p><img src="image-20240906151200265.png" alt="客户端添加队列"></p>
<p>此时跑一下测试方法，返回浏览器可以看到具体的信息。</p>
<p><img src="image-20240906151334702.png" alt="客户端具体信息"></p>
<p>由于消费者被处理成一个bean，所以我们需要将消费者的启动类跑起来。里面的<code>Jackson2JsonMessageConverter</code>，在消息转换器中介绍。</p>
<p><img src="image-20240906152219758.png" alt="消费者接收消息"></p>
<p>OK，到此处我们已经将队列的基本流程弄清楚了。</p>
<p><strong>总结一下：</strong></p>
<ul>
<li>引入依赖</li>
<li>消费者、发布者配置ip，端口号，mq账号密码等信息</li>
<li>发布者编写测试方法，mq注册一个队列</li>
<li>消费者注册成bean，绑定同一个队列，接收消息</li>
</ul>
<h1 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h1><p>MQ的消息队列有以下5中，根据使用方式又分为<strong>是否使用交换机。</strong></p>
<p><img src="Snipaste_2024-09-06_14-38-16.png">刚刚介绍了基本消息队列，现在我们介绍其他的队列模式。</p>
<h2 id="工作消息队列"><a href="#工作消息队列" class="headerlink" title="工作消息队列"></a>工作消息队列</h2><p>和基本消息队列的代码（原理）一样，在基本队列的基础上连接多个consumer。</p>
<p><img src="image-20240906150054802.png" alt="工作消息队列"></p>
<p>假设consumer1的处理速度比consumer2的处理速度快，为了实现能者多劳的效果，可以在application.yml文件中配置预取消息的上限。设置后会让队列中的消息无法进入没有处理完业务的消费者，而是能者多劳，处理业务更快的消费者多拿消息，防止效率低的拿了但是处理速率慢，消息滞留。比如我让方法1睡20毫秒，方法2睡200毫秒，然后发布者一秒发50条消息：</p>
<p>发布者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSendMessage2WorkQueue() throws InterruptedException &#123;</span><br><span class="line">    String queueName = &quot;simple.queue&quot;;</span><br><span class="line">    String message = &quot;hello, message__&quot;;</span><br><span class="line">    for (int i = 1; i &lt;= 50; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(20);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打开消费预取限制：</p>
<p><img src="image-20240906150111553.png" alt="消费者中取消消费限制"></p>
<p>也是刚才的场景，如果方法2执行的速度更慢一些，那么可以打开这个限制，让每个方法都执行完业务以后再从队列中获取消息，防止消息在处理速度慢的消费者中滞留却不能运行，保证能者多劳。</p>
<p><img src="image-20240906153905577.png"></p>
<h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><p><img src="image-20240906155008233.png" alt="发布订阅模式">一开始说的同步和异步的问题，我们是为了实现一个服务通过broker对后续服务进行发布，但是使用基本消息队列和工作消息队列就不能实现这个要求。因为消息被一个消费者处理以后就消失了。而MQ的发布订阅模式可以实现这个要求，决定消息发给哪些队列，则是靠<strong>交换机</strong>实现的。</p>
<h2 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h2><p><img src="wps1.jpg" alt="img"> </p>
<p>配置类FanoutConfig中需要绑定交换器和队列（DirectExchange 中提供简化方案）</p>
<p>FanoutExchange类，用于定义交换器</p>
<p>Queue类（amqp.core），用于创建队列对象</p>
<p>binding类，用于绑定交换机和队列。</p>
<p><img src="wps2.jpg" alt="img"> </p>
<p>publisher使用rabbitTemplate调用convertAndSend方法时第一个参数不是队列，而是交换机的变量名。</p>
<p><img src="wps3.jpg" alt="img"> </p>
<p>consumer根据队列绑定同一个FanoutExchange接受同一个消息。</p>
<p><img src="wps4.jpg" alt="img"> </p>
<h2 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h2><p><img src="wps5.jpg" alt="img"> </p>
<p>在publisher中指定RoutingKey指定绑定规则：</p>
<p><img src="wps6.jpg" alt="img"> </p>
<p>简化configuration类去配置交换机和队列的绑定，使用@RabbitListener注解的binding属性的@queueBinding值配置队列、交换机、路由规则：</p>
<p>@RabbitListener注解作用在consumer类中</p>
<p><img src="wps7.jpg" alt="img"> </p>
<h2 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h2><p><img src="wps8.jpg" alt="img"> </p>
<h1 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h1><p>publisher调用convertAndSend方法时，可以发送的参数类型是object类型。但是在发送时，在队列中会对对象进行序列化成字节发送。为了提高可读性可传输效率，推荐使用json的方式进行序列化</p>
<p><img src="wps9.jpg" alt="img"> </p>
<p><img src="wps10.jpg" alt="img"> </p>
<p>使用json的bean对象注入ioc容器中，会覆盖原本的SimpleMessage -Convcerter处理方式。同时需要保证publisher和consumer使用一样的消息转换方式，否则信息不一致。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>MQ进阶</title>
    <url>/2024/09/09/06MQ%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="1-消息可靠性"><a href="#1-消息可靠性" class="headerlink" title="1.  消息可靠性"></a>1.  消息可靠性</h1><h2 id="1-1-生产者确认机制"><a href="#1-1-生产者确认机制" class="headerlink" title="1.1 生产者确认机制"></a>1.1 生产者确认机制</h2><p><img src="clip_image002.jpg"></p>
<p><img src="clip_image004.jpg"><img src="clip_image006.gif"><img src="clip_image008.gif"></p>
<h2 id="1-2-消息持久化（默认就是持久化，了解代码）"><a href="#1-2-消息持久化（默认就是持久化，了解代码）" class="headerlink" title="1.2 消息持久化（默认就是持久化，了解代码）"></a>1.2 消息持久化（默认就是持久化，了解代码）</h2><p><img src="clip_image010.jpg"></p>
<h2 id="1-3-消费者消息确认"><a href="#1-3-消费者消息确认" class="headerlink" title="1.3 消费者消息确认"></a>1.3 消费者消息确认</h2><p><img src="clip_image012.jpg"></p>
<h3 id="1-3-1-none模式"><a href="#1-3-1-none模式" class="headerlink" title="1.3.1 none模式"></a>1.3.1 none模式</h3><p><img src="clip_image014.jpg"></p>
<h3 id="1-3-2-auto模式"><a href="#1-3-2-auto模式" class="headerlink" title="1.3.2 auto模式"></a>1.3.2 auto模式</h3><p><img src="clip_image016.jpg"></p>
<h2 id="1-4-消费者重试机制"><a href="#1-4-消费者重试机制" class="headerlink" title="1.4 消费者重试机制"></a>1.4 消费者重试机制</h2><h3 id="1-4-1-本地重试（默认的RejectAndDontRequeueRecoverer策略）"><a href="#1-4-1-本地重试（默认的RejectAndDontRequeueRecoverer策略）" class="headerlink" title="1.4.1 本地重试（默认的RejectAndDontRequeueRecoverer策略）"></a>1.4.1 本地重试（默认的RejectAndDontRequeueRecoverer策略）</h3><p>基于1.3.2的auto模式，发送失败的消息会重新放入队列queue中，导致mq反复处理失败的消息，带来过多的压力。因此通过本地重试的方式，将失败的队列进行retry处理（spring），而不是反复放入队列。</p>
<p>在消费者的application.yml文件中配置启动失败重试开关、以及重复的次数：</p>
<p><img src="clip_image018.jpg"></p>
<h3 id="1-4-2-三个失败策略（RepublishMessageRecoverer实例）"><a href="#1-4-2-三个失败策略（RepublishMessageRecoverer实例）" class="headerlink" title="1.4.2 三个失败策略（RepublishMessageRecoverer实例）"></a>1.4.2 三个失败策略（RepublishMessageRecoverer实例）</h3><p>在springAMQP中的失败策略有三个，1.4.1中是默认的处理方式。对于废弃的消息，如果不希望消息的丢失，可以采用RepublishMessageRecoverer策略。流程图：</p>
<p><img src="clip_image020.jpg"></p>
<p>消费者中绑定error交换机后，由交换机根据rountingkey（例子中key&#x3D;error）转发到error.queue队列。</p>
<p>对于MessageRecoverer接口，在1.4.1中的重试机制是默认的，因此接口对应1.4.1也是默认的（不需要声明）。但是使用RepublishMessage -Recoverer方式实现重试机制需要覆盖MessageRecoverer接口。</p>
<p>声明在消费者模块中的config类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessageConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//声明交换机：当重试机制触发上限时，消费者自动递交失败消息的交换机errorExchange</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> DirectExchange <span class="title function_">errorMessageExchange</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;error.direct&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//声明队列：绑定errorExchange的队列errorQueue</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">errorQueue</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;error.queue&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//绑定errorExchange交换机和errorQueue队列</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Binding <span class="title function_">errorMessageBinding</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> BindingBuilder.bind(errorQueue()).to(errorMessageExchange()).with(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//声明MessageRecoverer接口，覆盖默认RejectAndDontRequeueRecoverer方式</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> MessageRecoverer <span class="title function_">republishMessageRecoverer</span><span class="params">(RabbitTemplate rabbitTemplate)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RepublishMessageRecoverer</span>(rabbitTemplate, <span class="string">&quot;error.direct&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-死信交换机"><a href="#2-死信交换机" class="headerlink" title="2. 死信交换机"></a>2. 死信交换机</h1><h2 id="2-1-成为死信的条件"><a href="#2-1-成为死信的条件" class="headerlink" title="2.1 成为死信的条件"></a>2.1 成为死信的条件</h2><p>成为死信的前提消费者没有重试机制，</p>
<p><img src="clip_image022.jpg"></p>
<p>基于config实现2.1的流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明普通的 simple.queue队列，并且为其指定死信交换机：dl.direct</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> Queue <span class="title function_">simpleQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> QueueBuilder.*durable*(**<span class="string">&quot;**simple.queue**&quot;</span>**) <span class="comment">// 指定队列名称，并持久化</span></span><br><span class="line">       .deadLetterExchange(<span class="string">&quot;dl.direct&quot;</span>) <span class="comment">// 指定死信交换机</span></span><br><span class="line">       .build();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 声明死信交换机 dl.direct</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> DirectExchange <span class="title function_">dlExchange</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;dl.direct&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 声明存储死信的队列 dl.queue</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> Queue <span class="title function_">dlQueue</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(**<span class="string">&quot;**dl.queue**&quot;</span>**, <span class="literal">true</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 将死信队列 与 死信交换机绑定</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> Binding <span class="title function_">dlBinding</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> BindingBuilder.*bind*(dlQueue()).to(dlExchange()).with(<span class="string">&quot;simple&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-结合TTL和死信交换机实现延时发送消息"><a href="#2-2-结合TTL和死信交换机实现延时发送消息" class="headerlink" title="2.2 结合TTL和死信交换机实现延时发送消息"></a>2.2 结合TTL和死信交换机实现延时发送消息</h2><p><img src="clip_image024.jpg"></p>
<p><img src="clip_image026.jpg"></p>
<h3 id="2-2-1-2-2-2-声明死信交换机和指定TTL的队列"><a href="#2-2-1-2-2-2-声明死信交换机和指定TTL的队列" class="headerlink" title="2.2.1 &amp; 2.2.2 声明死信交换机和指定TTL的队列"></a>2.2.1 &amp; 2.2.2 声明死信交换机和指定TTL的队列</h3><img src="clip_image028.jpg" style="zoom: 150%;">

 

<p><img src="clip_image030.jpg"></p>
<p><img src="clip_image032.jpg"></p>
<h3 id="2-2-3-消息指定TTL"><a href="#2-2-3-消息指定TTL" class="headerlink" title="2.2.3 消息指定TTL"></a>2.2.3 消息指定TTL</h3><img src="clip_image034.jpg" style="zoom:150%;">

 

<h2 id="2-3-DelayExchange（mq插件）"><a href="#2-3-DelayExchange（mq插件）" class="headerlink" title="2.3 DelayExchange（mq插件）"></a>2.3 DelayExchange（mq插件）</h2><p>插件用来改进2.2方式，但是我觉得特别麻烦我选择用2.2。另外官方推荐版本3.9.0适配当前docker中装的mq。另外，在docker创建mq的容器时需要指定数据卷，不然把容器删了重新创建，此时注意修改账号密码，不然登不进mq客户端（最后给创建容器命令）。需要将插件拖进去（使用finalshell）</p>
<img src="clip_image036.jpg" style="zoom:67%;">

<img src="clip_image038.jpg" style="zoom:150%;">

 

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=root\</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=root \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>



<h1 id="3-惰性队列"><a href="#3-惰性队列" class="headerlink" title="3. 惰性队列"></a>3. 惰性队列</h1><h2 id="3-1-消息堆积问题"><a href="#3-1-消息堆积问题" class="headerlink" title="3.1 消息堆积问题"></a>3.1 消息堆积问题</h2><p><img src="clip_image040.jpg"></p>
<h2 id="3-2-惰性队列"><a href="#3-2-惰性队列" class="headerlink" title="3.2 惰性队列"></a>3.2 惰性队列</h2><p><img src="clip_image042.gif"> <img src="clip_image044.jpg"></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>项目总结</title>
    <url>/2024/09/11/07%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="de8f1d75725920ca5caabb1d578fc84cc5a8f1c1aeb55e7eaf23b5e81b63079e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Nacos：负载均衡、Eureka</title>
    <url>/2024/09/11/08Nacos/</url>
    <content><![CDATA[<h1 id="如何在SpringCloud中使用Nacos"><a href="#如何在SpringCloud中使用Nacos" class="headerlink" title="如何在SpringCloud中使用Nacos"></a>如何在SpringCloud中使用Nacos</h1><p>面试官提问，怎么在你的服务中使用Nacos？</p>
<blockquote>
<p>下载安装&amp;使用</p>
</blockquote>
<p>使用window直接在<a href="https://nacos.io/">Nacos官网</a>下载就可以了，或者使用docker拉取nacos的镜像，我使用的是windows安装。</p>
<p>安装Nacos后在bin目录下使用cmd，执行命令startup.cmd -m standalone，以单机的模式启动nacos。打开浏览器中默认的账号和密码都是nacos。</p>
<blockquote>
<p>springcloud引入依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--nacos管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>方式一：不使用Nacos做统一配置管理，在application.yml配置nacos的地址</p>
</blockquote>
<p>服务中配置nacos的地址。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/tb_user</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">     <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">     <span class="attr">discovery:</span></span><br><span class="line">       <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">       <span class="string">.......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式二：使用Nacos做统一配置管理，使用bootstrap.yml，引导类文件。</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 环境</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure>



<h1 id="Nacos负载均衡的原理"><a href="#Nacos负载均衡的原理" class="headerlink" title="Nacos负载均衡的原理"></a>Nacos负载均衡的原理</h1><p>在 SpringCloud 中，Nacos 或者 eureka 作为服务注册与发现中心<strong>能够提供服务列表</strong>，而<code>@LoadBalanced</code>注解则为微服务提供负载均衡。因此<strong>讨论负载均衡是基于<code>@LoadBalanced</code>这个注解去讨论的</strong>，而服务注册与发现中心作为集群的管理站（提供服务拉取），两者的关系十分密切。</p>
<h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><p>@LoadBalanced注解在旧版本中是基于ribbon实现的，先看看ribbon的实现原理。</p>
<h3 id="LoadBalancerInterceptor类"><a href="#LoadBalancerInterceptor类" class="headerlink" title="LoadBalancerInterceptor类"></a>LoadBalancerInterceptor类</h3><p>LoadBalancerInterceptor类是<code>@LoadBalanced</code>注解的底层实现，先看一下源码</p>
<p><img src="image-20240911215044491.png" alt="LoadBalancerInterceptor源码"></p>
<p>可以看到，这个类是实现了一个接口，叫 ClientHttpRequestInterceptor，继续跟进编辑器，可以看到这个接口就是负责拦截请求的。比如使用restTemplate发起一个请求，请求就会被拦截下来。</p>
<p><img src="image-20240911215704799.png" alt="拦截请求"></p>
<p>LoadBalancerInterceptor类实现了ClientHttpRequestInterceptor接口，那么就要重写接口的方法了，这个方法就是intercept()。</p>
<p><img src="image-20240911215854937.png" alt="重写interrupt方法"></p>
<p>接下来分析这个方法是如何实现的。</p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>首先基于一个场景：在做订单查询的时候，需要把用户的信息也一并展示出来</p>
<img src="image-20240911221511009.png" alt="请求结果" style="zoom:80%;">

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>orderController是正常写，在orderService的地方使用restTemplate发起请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2.利用RestTemplate发起http请求，查询用户</span></span><br><span class="line">        <span class="comment">// 2.1.url路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br><span class="line">        <span class="comment">// 2.2.发送http请求，实现远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">// 3.封装user到Order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>userService服务名称正常写： name: userservice</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/tb_user</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">default-database-strategy:</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">     <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">     <span class="attr">discovery:</span></span><br><span class="line">       <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.itcast.user.pojo</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">MM-dd</span> <span class="string">HH:mm:ss:SSS</span></span><br></pre></td></tr></table></figure>

<p>order的启动类中也注册了restTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients(clients = UserClient.class,defaultConfiguration = DefaultFeignConfiguration.class)</span></span><br><span class="line"><span class="comment">//@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建RestTemplate并注入Spring容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* @Bean</span></span><br><span class="line"><span class="comment">    public IRule randomRule() &#123;</span></span><br><span class="line"><span class="comment">        return new RandomRule();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解释源码"><a href="#解释源码" class="headerlink" title="解释源码"></a>解释源码</h4><p>现在我在浏览器发起一个请求：userservice&#x2F;user&#x2F;1，此时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br></pre></td></tr></table></figure>

<p>结果就是 <a href="http://userservice/user/1%E3%80%82">http://userservice/user/1。</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> originalUri.getHost();</span><br></pre></td></tr></table></figure>

<p>得到服务名称userservice。此时进行服务拉取，比如nacos，eureka。拿到服务名称后交给后边去执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.loadBalancer.execute(serviceName,</span><br><span class="line">				<span class="built_in">this</span>.requestFactory.createRequest(request, body, execution));</span><br></pre></td></tr></table></figure>

<p>跟进execute方法</p>
<p><img src="image-20240911224322165.png" alt="跟进execute方法"></p>
<p>此处没有方法体，源码中应该存在方法体，方法体中存在execute方法（原因：根据实际代码debug可能会有，或者源码不一样，总之继续跟进），继续跟进，此时来到了RibbonLoadBalancerClient的execute方法</p>
<p><img src="image-20240911224637243.png" alt="ribbon"></p>
<p>继续跟进execute方法，发现以下代码：</p>
<p><img src="image-20240911225014029.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ILoadBalancer loadBalancer = getLoadBalancer(serviceId);</span><br></pre></td></tr></table></figure>

<p>拿着服务名称（userservice，也就是参数serviceid），生成ILoadBalancer类的实例，源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Copyright 2013 Netflix, Inc.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">* you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">* You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">* See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">* limitations under the License.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> com.netflix.loadbalancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface that defines the operations for a software loadbalancer. A typical</span></span><br><span class="line"><span class="comment"> * loadbalancer minimally need a set of servers to loadbalance for, a method to</span></span><br><span class="line"><span class="comment"> * mark a particular server to be out of rotation and a call that will choose a</span></span><br><span class="line"><span class="comment"> * server from the existing list of server.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> stonse</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILoadBalancer</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Initial list of servers.</span></span><br><span class="line"><span class="comment">	 * This API also serves to add additional ones at a later time</span></span><br><span class="line"><span class="comment">	 * The same logical server (host:port) could essentially be added multiple times</span></span><br><span class="line"><span class="comment">	 * (helpful in cases where you want to give more &quot;weightage&quot; perhaps ..)</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> newServers new servers to add</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addServers</span><span class="params">(List&lt;Server&gt; newServers)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Choose a server from load balancer.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key An object that the load balancer may use to determine which server to return. null if </span></span><br><span class="line"><span class="comment">	 *         the load balancer does not use this parameter.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> server chosen</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> Server <span class="title function_">chooseServer</span><span class="params">(Object key)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * To be called by the clients of the load balancer to notify that a Server is down</span></span><br><span class="line"><span class="comment">	 * else, the LB will think its still Alive until the next Ping cycle - potentially</span></span><br><span class="line"><span class="comment">	 * (assuming that the LB Impl does a ping)</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> server Server to mark as down</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">markServerDown</span><span class="params">(Server server)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@deprecated</span> 2016-01-20 This method is deprecated in favor of the</span></span><br><span class="line"><span class="comment">	 * cleaner &#123;<span class="doctag">@link</span> #getReachableServers&#125; (equivalent to availableOnly=true)</span></span><br><span class="line"><span class="comment">	 * and &#123;<span class="doctag">@link</span> #getAllServers&#125; API (equivalent to availableOnly=false).</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * Get the current list of servers.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> availableOnly if true, only live and available servers should be returned</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Deprecated</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getServerList</span><span class="params">(<span class="type">boolean</span> availableOnly)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> Only the servers that are up and reachable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getReachableServers</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> All known servers, both reachable and unreachable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="keyword">public</span> List&lt;Server&gt; <span class="title function_">getAllServers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>public List<Server> getServerList 就拿到的服务列表，服务列表意思就是所有提供userservice的服务（学习的时候使用不同端口号来模拟不同集群节点或者是不同ip的服务器节点），这就是为什么需要nacos或者eureka，因为这俩货可以提供服务列表。</Server></p>
<p>接下来就是负载均衡：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server server = getServer(loadBalancer, hint);</span><br></pre></td></tr></table></figure>

<p>跟进getServer方法</p>
<p><img src="image-20240911225742940.png"></p>
<p>chooseServer？跟进去，发现调用父类</p>
<p><img src="image-20240911230114678.png"></p>
<p>找父类以后发现提供规则Rule</p>
<p><img src="image-20240911230158734.png"></p>
<p>跟进它发现是IRule接口，ctrl+H看一下实现类：</p>
<p><img src="image-20240911230544550.png"></p>
<p>可以发现，IRule接口的实现类决定了负载均衡的实现规则。</p>
<p>所以决定负载均衡的实现有IRule接口定义的规则。</p>
<h3 id="IRule"><a href="#IRule" class="headerlink" title="IRule"></a>IRule</h3><p><img src="image-20240911232056466.png" alt="irule"></p>
<p><img src="image-20240911232117600.png"></p>
<h3 id="实现流程图"><a href="#实现流程图" class="headerlink" title="实现流程图"></a>实现流程图</h3><p><img src="image-20240912000445053.png" alt="实现流程图"></p>
<h3 id="Nacos根据集群实现负载均衡"><a href="#Nacos根据集群实现负载均衡" class="headerlink" title="Nacos根据集群实现负载均衡"></a>Nacos根据集群实现负载均衡</h3><p>如果不设置负载均衡新规则则会采用默认的轮询方式选择服务，进而导致不优先访问本地集群的服务但是跨集群访问服务的情况。</p>
<p>所以需要消费者的yml文件中配置负载均衡的规则。NacosRule规则为集群优先规则。</p>
<p><img src="image-20240912152308328.png"></p>
<h3 id="Nacos服务实例的权重设置"><a href="#Nacos服务实例的权重设置" class="headerlink" title="Nacos服务实例的权重设置"></a>Nacos服务实例的权重设置</h3><p>采用NacosRule的负载规则以后，服务会优先选择同集群的提供者提供服务。但是访问的实例是随机的。</p>
<p>由于在实际部署中，希望性能好的设备能够承担更多的请求来提高服务的速度，因此需要控制访问频率来达到控制性能高的设备接受请求越多的效果。</p>
<p><img src="wps1.jpg"> </p>
<p><img src="wps2.jpg"></p>
<h2 id="Spring-Cloud-LoadBalancer"><a href="#Spring-Cloud-LoadBalancer" class="headerlink" title="Spring Cloud LoadBalancer"></a>Spring Cloud LoadBalancer</h2><p>随着springcloud的版本升级，负载均衡的底层实现由ribbon变成了Spring Cloud LoadBalancer，实现原理放一篇csdn的博客，原理和上边基本相同，不过博客将具体使用的类讲得比较清楚，作为最新版本实现所以注重一下Spring Cloud LoadBalancer的总结。</p>
<p><a href="https://blog.csdn.net/erik_tse/article/details/116062792">Spring Cloud：负载均衡 - Spring Cloud Loadbalancer原理_spring-cloud-starter-loadbalancer-CSDN博客</a></p>
<h3 id="ReactorLoadBalancer-ServiceInstance"><a href="#ReactorLoadBalancer-ServiceInstance" class="headerlink" title="ReactorLoadBalancer&lt; ServiceInstance &gt;"></a>ReactorLoadBalancer&lt; ServiceInstance &gt;</h3><p>可以通过实现<code>ReactorLoadBalancer&lt;ServiceInstance&gt;</code>接口来创建自定义的负载均衡器。然后，你需要在Spring容器中以Bean的形式注册这个自定义的负载均衡器，并确保它在适当的时候被用于服务调用。不过，这种方法需要更深入地了解Spring Cloud LoadBalancer的工作原理，并且可能需要通过编程方式在服务消费者中显式地引用这个负载均衡器。</p>
<p>实际开发的算法比较困难，这里提一嘴(AIGC)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.Request;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.Response;  </span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomLoadBalancer</span> <span class="keyword">implements</span> <span class="title class_">ReactorLoadBalancer</span>&lt;ServiceInstance&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; <span class="title function_">choose</span><span class="params">(Request&lt;ServiceInstance&gt; request)</span> &#123;  </span><br><span class="line">        <span class="comment">// 这里实现你的负载均衡逻辑  </span></span><br><span class="line">        <span class="comment">// 例如，我们可以简单地随机选择一个服务实例  </span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = request.getServerList();  </span><br><span class="line">        <span class="keyword">if</span> (instances.isEmpty()) &#123;  </span><br><span class="line">            <span class="keyword">return</span> Mono.empty();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 随机选择一个实例（这里仅为示例，实际中可能需要更复杂的逻辑）  </span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(instances.size()));  </span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> <span class="title class_">Response</span>&lt;&gt;(instance));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="Nacos-VS-Eureka"><a href="#Nacos-VS-Eureka" class="headerlink" title="Nacos VS Eureka"></a>Nacos VS Eureka</h1><p>nacos和eureka都作为注册中心，服务提供者将服务列表注册到注册中心，而服务消费者定时将服务拉取（pull）到本地缓存。</p>
<p><img src="image-20240912144613644.png"></p>
<p>然而，nacos会将服务的提供者划分成<strong>「临时实例」和「非临时实例」。默认情况下，所有实例都是临时实例。</strong></p>
<p>临时实例中，nacos采用心跳检测，临时实例每隔一段时间会向nacos发送请求检查服务是否宕机，如果宕机，nacos会直接把服务剔除。</p>
<p>非临时实例，nacos主动向服务发送请求，检测服务是否宕机。如果宕机，nacos是不会剔除服务的，仅仅只是将服务标记为不健康。</p>
<p><img src="image-20240912144938915.png"></p>
<p>在消费者的地方，如果服务宕机了，eureka采用的是pull，来更新消费者本地缓存，变相的通知消费者，有服务宕机不能再使用了，而nacos不同，nacos会主动push消息给消费者更新本地缓存，通知可能有服务宕机。因此eureka的更新效率低于nacos。</p>
<p>Nacos还支持统一配置管理，eureka不支持，因此基于springcloud的开发用的都是nacos，而eureka都不做选择。</p>
<p>此外，nacos支持AP，CP模式，默认情况下，nacos集群默认采用AP模式，存在临时实例时采用CP模式，而eureka仅仅支持AP模式。</p>
<blockquote>
<p>AP、CP模式将在Seata中介绍具体的内容，包括base理论和CAP定理等。</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><blockquote>
<p>ribbon</p>
</blockquote>
<p>LoadBalancerInterceptor的execute方法 &#x3D;&gt; LoadBalancerClient接口的execute方法 &#x3D;&gt;RibbonLoadBalancerClient类的execute方法 &#x3D;&gt; 方法中ILoadBalancer的getServerList可以拉取服务列表，ILoadBalancer的chooseServer方法跟进后，Server类中的方法调用IRule的接口，以及实现类去实现负载原理。</p>
<blockquote>
<p>NacosRule</p>
</blockquote>
<p>基于ribbon的实现。在集群中可以修改除了轮询或者随机的方式。</p>
<blockquote>
<p>Spring Cloud LoadBalancer：</p>
</blockquote>
<p>Spring Cloud LoadBalancer同样提供了LoadBalancerClient接口，但其实现类（如BlockingLoadBalancerClient、ReactorLoadBalancer&lt;ServiceInstance&gt;等）是基于Spring Cloud LoadBalancer的新实现。</p>
<p>和ribbon的用的类和接口差不多，LoadBalancerClient，不过底层重写负载均衡的策略改为了ReactorLoadBalancer&lt;ServiceInstance&gt;等。</p>
<h2 id="Nacos-VS-Eureka-1"><a href="#Nacos-VS-Eureka-1" class="headerlink" title="Nacos VS Eureka"></a>Nacos VS Eureka</h2><p>nacos对实例划分临时实例和非临时实例，且对应不同的检查机制。</p>
<p>nacos对消费者提供push操作更新消费者本地缓存的服务列表。</p>
<p>nacos对CAP模式有AP,CP的选择。</p>
<p>nacos支持统一配置管理。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级：动态代理、反射</title>
    <url>/2024/09/12/09%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="什么是动态代理"><a href="#什么是动态代理" class="headerlink" title="什么是动态代理"></a>什么是动态代理</h2><p>为了避免代码侵入式的修改，在程序运行时，目标对象不变，对目标对象生成代理对象，代理对象中的方法是目标对象方法的增强方法，最终达到目标对象增强的效果。</p>
<h2 id="Java中动态代理的实现"><a href="#Java中动态代理的实现" class="headerlink" title="Java中动态代理的实现"></a>Java中动态代理的实现</h2><p>第一种：基于接口实现动态代理</p>
<p>基于接口的动态代理，用到的类是Proxy的newProxyInstance静态方法创建，<strong>要求</strong>被代理对象至少实现一个接口，如果没有，则不能创建代理对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyDemo</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成对象的代理对象，对被代理对象进行所有方法日志增强</span></span><br><span class="line"><span class="comment">     * 参数：原始对象</span></span><br><span class="line"><span class="comment">     * 返回值：被代理的对象</span></span><br><span class="line"><span class="comment">     * JDK 动态代理</span></span><br><span class="line"><span class="comment">     *  基于接口的动态代理</span></span><br><span class="line"><span class="comment">     *  被代理类必须实现接口</span></span><br><span class="line"><span class="comment">     *  JDK提供的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="type">MyInterface</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (MyInterface) Proxy.newProxyInstance(  </span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建对象的代理对象</span></span><br><span class="line"><span class="comment">         * 参数一：类加载器</span></span><br><span class="line"><span class="comment">         * 参数二：对象的接口</span></span><br><span class="line"><span class="comment">         * 参数三：调用处理器，代理对象中的方法被调用，都会在执行方法。对所有被代理对象的方法进行拦截</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">            MyInterface.class.getClassLoader(),  </span><br><span class="line">            MyInterface.getClass().getInterface(),  <span class="comment">//new Class[] &#123; MyInterface.class &#125;,多个接口的情况</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;  </span><br><span class="line">                <span class="meta">@Override</span>  </span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;  </span><br><span class="line">                    System.out.println(<span class="string">&quot;Before method: &quot;</span> + method.getName());  </span><br><span class="line">                    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(<span class="keyword">new</span> <span class="title class_">MyInterfaceTarget</span>(), args); <span class="comment">//假设MyInterfaceTarget是实现MyInterface的类 </span></span><br><span class="line">                    System.out.println(<span class="string">&quot;After method: &quot;</span> + method.getName());  </span><br><span class="line">                    <span class="keyword">return</span> result;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        );  </span><br><span class="line">  </span><br><span class="line">        proxyInstance.doSomething(); <span class="comment">// 调用代理实例的方法  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 假设的实现类  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyInterfaceTarget</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;Doing something...&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，参数三InvocationHandler是一个函数式接口，这里采用匿名内部类的形式重写方法，这个方法中的这行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(<span class="keyword">new</span> <span class="title class_">MyInterfaceTarget</span>(), args);</span><br></pre></td></tr></table></figure>

<p>就是利用反射，拿到目标对象的方法，而上下两行的打印语句就是被增强的地方。</p>
<p>方法返回原始方法method。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> result;  </span><br></pre></td></tr></table></figure>

<p>最终返回结果是原始方法，因为增强的功能已经执行了。</p>
<p>第二种：基于第三方库CGLib</p>
<p><strong>要导入cglib第三方库</strong>，使用的类是Enhancer的create静态方法创建，<strong>要求</strong>被代理类不能是最终类，即不能用final修饰，如String类。</p>
<p>CGLib 实现步骤</p>
<ol>
<li>创建一个实现接口 MethodInterceptor 的代理类，重写 intercept 方法；</li>
<li>创建获取被代理类的方法 getInstance(Object target);</li>
<li>获取代理类，通过代理调用方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObjectByCGLib</span><span class="params">(<span class="keyword">final</span> Object obj)</span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 使用CGLib的Enhancer创建代理对象</span></span><br><span class="line"><span class="comment">        * 参数一：对象的字节码文件</span></span><br><span class="line"><span class="comment">        * 参数二：方法的拦截器</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">proxyObj</span> <span class="operator">=</span> Enhancer.create(obj.getClass(), <span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">           <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">               <span class="comment">//方法执行前</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">               <span class="type">Object</span> <span class="variable">invokeObject</span> <span class="operator">=</span> method.invoke(obj, objects);<span class="comment">//执行方法的调用</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//方法执行后</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">               <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line">               System.out.printf(String.format(<span class="string">&quot;%s方法执行结束时间：%%s ；方法执行耗时：%%d%%n&quot;</span></span><br><span class="line">                       , method.getName()), sdf.format(endTime), endTime - startTime);</span><br><span class="line">               <span class="keyword">return</span> invokeObject;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> proxyObj;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 注意：这个方法返回的是代理对象的实例，但它与被代理对象（obj）在内存中是两个不同的实例。</span></span><br><span class="line">   <span class="comment">// 如果你需要代理对象和被代理对象在某些场景下是同一个实例（比如单例模式），这种方法就不适用了。</span></span><br></pre></td></tr></table></figure>

<h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><p>JDK Proxy 和 CGLib 的区别主要体现在以下方面：</p>
<ul>
<li>JDK Proxy 是 Java 语言自带的功能，无需通过加载第三方类实现；</li>
<li>Java 对 JDK Proxy 提供了稳定的支持，并且会持续的升级和更新，Java 8 版本中的 JDK Proxy 性能相比于之前版本提升了很多；</li>
<li>JDK Proxy 是通过拦截器加反射的方式实现的；</li>
<li>JDK Proxy 只能代理实现接口的类；</li>
<li>JDK Proxy 实现和调用起来比较简单；</li>
<li>CGLib 是第三方提供的工具，基于 ASM 实现的，性能比较高；</li>
<li>CGLib 无需通过接口来实现，它是针对类实现代理，主要是对指定的类生成一个子类，它是通过实现子类的方式来完成调用的。</li>
</ul>
<h2 id="ASM"><a href="#ASM" class="headerlink" title="ASM"></a>ASM</h2><p>ASM是一个Java字节码操作和分析框架，它提供了一套直接操作Java字节码的API。与Java反射机制相比，ASM通过直接操作字节码来避免了许多反射带来的性能开销，因此能够显著提高应用程序的性能。ASM的API设计得非常灵活且强大，它允许开发者在类被加载到Java虚拟机之前动态地修改类的行为，包括添加、删除或修改方法、字段等。</p>
<p>具体来说，当CGLib需要创建一个代理对象时，它会利用ASM来动态生成这个代理类的字节码。这个过程中，CGLib会根据被代理类的结构、需要增强的方法等信息，生成相应的字节码，并加载到Java虚拟机中。这样，CGLib就能够在运行时动态地创建代理类，而无需编写大量的模板代码。</p>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>Reflection 是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序对自身进行检查，或者说“自审”，并能直接操作程序的内部属性、方法、构造函数、访问修饰符等信息。例如，使用它能获得 Java 类中各成员的名称并显示出来。在运行时动态加载类等。第三方主流的框架如：spring, springMVC, mybatis 等内部都大量的使用反射技术。</p>
<blockquote>
<p>面试官问你什么是反射</p>
</blockquote>
<p>只需要答出来，<strong>反射机制指的是在程序运行时（JVM时期）可以获取自身的信息。在Java中只需要给定类名，就可以通过反射机制获取该类所有的属性和方法。</strong></p>
<ol>
<li><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p>
</li>
<li><p>Java反射机制主要提供了以下功能： </p>
<ol>
<li>在运行时判断任意一个对象所属的类；</li>
</ol>
<ol start="2">
<li>在运行时构造任意一个类的对象；</li>
<li>在运行时判断任意一个类所具有的成员变量和方法；</li>
<li>在运行时调用任意一个对象的方法；</li>
<li>生成动态代理。</li>
</ol>
<ul>
<li>反射 <code>java.lang.Class</code> 实例：表示正在运行的类的信息</li>
<li>通过 <code>java.lang.Class</code>反射<code>Constructor</code><em>（构造函数）</em>实例</li>
<li>通过 <code>java.lang.Class</code>反射<code>Field</code><em>（字段、属性）</em>实例</li>
<li>通过 <code>java.lang.Class</code>反射<code>Method</code><em>（方法）</em>实例</li>
</ul>
</li>
</ol>
<h2 id="Java代码实现反射"><a href="#Java代码实现反射" class="headerlink" title="Java代码实现反射"></a>Java代码实现反射</h2><h3 id="反射-Class"><a href="#反射-Class" class="headerlink" title="反射 Class"></a>反射 Class</h3><p><img src="image-20240912164039483.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//反射类</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//方式1.</span></span><br><span class="line">            <span class="comment">//获得 Employee类在JVM 中运行时的java.lang.Class实例</span></span><br><span class="line">            java.lang.<span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.lanqiao.reflect.Employee&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果Class&lt;Employee&gt;使用了泛型，则创建实例直接返回实际的类型</span></span><br><span class="line">            <span class="comment">// Employee employee = clazz.newInstance();</span></span><br><span class="line">            <span class="comment">// System.out.println(employee);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式2.</span></span><br><span class="line">            java.lang.Class&lt;?&gt; clazz2 = Employee.class;</span><br><span class="line">            <span class="comment">//System.out.println(Employee.class.getName());</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//方式3.</span></span><br><span class="line">            <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            Class&lt;? extends ?&gt; aClass = e.getClass();</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123; <span class="comment">//找不到类的异常(字符串类名错误)</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射构造方法"><a href="#反射构造方法" class="headerlink" title="反射构造方法"></a>反射构造方法</h3><p><img src="image-20240912164101219.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//方式1.</span></span><br><span class="line">            <span class="comment">//获得 Employee类在JVM 中运行时的java.lang.Class实例</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.lanqiao.reflect.Employee&quot;</span>);</span><br><span class="line">            <span class="comment">//反射构造函数</span></span><br><span class="line">            <span class="comment">//getDeclaredConstructors(...)得到类中声明的所有构造函数，包括private,public,default</span></span><br><span class="line">            Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">            <span class="comment">//仅得到public 声明的构造函数</span></span><br><span class="line">            constructors = clazz.getConstructors();</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">                System.out.println(constructor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到指定参数列表的构造函数</span></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//修改构造函数的访问性为可访问,即 public</span></span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过构造函数创建实例（反射调用构造）</span></span><br><span class="line">            <span class="comment">//调用 private Employee(String ename, int month)</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">emp</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;james&quot;</span>, <span class="number">11</span>);</span><br><span class="line">            System.out.println(emp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用 Employee(String ename, Double sal, int month)</span></span><br><span class="line">            constructor = clazz.getDeclaredConstructor(String.class, Double.class, <span class="type">int</span>.class);</span><br><span class="line">            emp = constructor.newInstance(<span class="string">&quot;mike&quot;</span>, <span class="number">999.9</span>, <span class="number">11</span>);</span><br><span class="line">            System.out.println(emp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123; <span class="comment">// 找不到方法或构造函数的异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射成员属性"><a href="#反射成员属性" class="headerlink" title="反射成员属性"></a>反射成员属性</h3><p><img src="image-20240912164113399.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionField</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获得 Employee类在JVM 中运行时的java.lang.Class实例</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.lanqiao.reflect.Employee&quot;</span>);</span><br><span class="line">            <span class="comment">//通过默认构造函数创建 Employee实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">             <span class="comment">//public声明的字段</span></span><br><span class="line">            Field[] fields = clazz.getFields();</span><br><span class="line">            <span class="comment">//反射所有字段（属性）</span></span><br><span class="line">            fields = clazz.getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                System.out.println(field);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到指定字段</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">          	<span class="comment">//修改属性的可访问性为 public</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//给name字段赋值</span></span><br><span class="line">            field.set(instance, <span class="string">&quot;jerry&quot;</span>); <span class="comment">//等价于：instance.ename= &quot;jerry&quot;;</span></span><br><span class="line"></span><br><span class="line">            field = clazz.getDeclaredField(<span class="string">&quot;sal&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(instance, <span class="number">999.88</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(instance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="反射成员方法"><a href="#反射成员方法" class="headerlink" title="反射成员方法"></a>反射成员方法</h3><p><img src="image-20240912164149773.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获得 Employee类在JVM 中运行时的java.lang.Class实例</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.lanqiao.reflect.Employee&quot;</span>);</span><br><span class="line">            <span class="comment">//通过默认构造函数创建 Employee实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到所有 public 的方法，包括类声明的和从父类继承的</span></span><br><span class="line">            Method[] methods = clazz.getMethods();</span><br><span class="line">            <span class="comment">//得到本类所有声明的方法，不包括从父类继承的</span></span><br><span class="line">            methods = clazz.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                System.out.println(method);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过指定参数列表类型得到某个方法实例</span></span><br><span class="line">          	<span class="comment">//也就是：public void setEname(String s)&#123; ... &#125; 方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;setEname&quot;</span>, String.class);</span><br><span class="line">            <span class="comment">//反射调用方法,如果方法无返回则为 null</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> method.invoke(instance,<span class="string">&quot;jerry&quot;</span>); 		</span><br><span class="line">          	<span class="comment">//instance.setEname(&quot;jerry&quot;);</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;调用 setEname 方法的返回值：&quot;</span> + returnValue);</span><br><span class="line">            System.out.println(instance);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到 String test(String msg, int a)&#123; ... &#125; 方法</span></span><br><span class="line">            method = clazz.getDeclaredMethod(<span class="string">&quot;test&quot;</span>, String.class, <span class="type">int</span>.class);</span><br><span class="line">            method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//反射调用test方法</span></span><br><span class="line">            returnValue = method.invoke(instance, <span class="string">&quot;hello &quot;</span>, <span class="number">22</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;调用 test 方法的返回值：&quot;</span> + returnValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123; <span class="comment">//调用异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射为什么慢"><a href="#反射为什么慢" class="headerlink" title="反射为什么慢"></a>反射为什么慢</h2><blockquote>
<p>Java虚拟机限制</p>
</blockquote>
<p>在JVM中，将字节码翻译成机械码的方式有：Java自带的解释器和JIT即时编译器。</p>
<p><img src="what-is-jvm-20231030185742.png"></p>
<p>由于反射涉及到动态解析的类型，对此不能执行java虚拟机的某些优化机制, 比如JIT优化。</p>
<p><img src="what-is-jvm-20231223102608.png"></p>
<p>这两种方式的区别在于，前者启动速度快但运行速度慢，后者启动速度慢但运行速度快，原因是因为解释器不需要像JIT编译器一样，将所有<strong>字节码</strong>都转化为<strong>机器码</strong>，自然就少去了优化时间。</p>
<p><a href="https://blog.csdn.net/mandy1526/article/details/117195647">一文看懂为什么java反射性能慢、效率低_反射为什么消耗性能大-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/m0_68723562/article/details/138012914">Java的反射机制? 为什么反射慢_java反射性能低下的原因-CSDN博客</a></p>
<blockquote>
<p>需要反复装箱拆箱</p>
</blockquote>
<p>在使用反射时, 参数需要包装成Object类型, 但是真正执行方法的时候, 又需要拆包成真正的类型</p>
<blockquote>
<p>触发GC次数多</p>
</blockquote>
<p>需要额外的内存分配，反射操作可能涉及到临时的对象创建，比如method,field等对象，导致垃圾回收的成本变高，造成额外的开销</p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务：Seata</title>
    <url>/2024/09/13/10seata/</url>
    <content><![CDATA[<h1 id="微服务下的事务场景"><a href="#微服务下的事务场景" class="headerlink" title="微服务下的事务场景"></a>微服务下的事务场景</h1><p>在以下场景中，用户支付成功后，订单服务创建业务，同时使用 restTemplate 或者 feign 对其他服务发起远程调用，完成整个业务流程。</p>
<p>照理来说所有业务要么都成功，要么都失败，在没有加上事务管理时，是否能保证事务一致性？</p>
<p><img src="image-20240913165752601.png"></p>
<p>实际上不会。假设在第三个库存服务中，商品库存不够了，那么后端确实会给前端报错信息（报500状态码），但是在前面两个服务不会同时失败。也就是说，订单确实创建了，钱也确实少了，但是给不了货儿，明白了吧？<strong>此时事务就不是一致的。</strong></p>
<p>在分布式系统中，一个业务跨越了多个服务或数据源，<strong>每个事务都是一个分支事务，而整个事务称为全局事务。</strong>保证所有分支事务的最终一致性，这样的事务就是分布式事务。</p>
<p>那么，如何保证分布式事务？先从基本的理论开始~</p>
<h1 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h1><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>四张图介绍CAP定理。</p>
<p><img src="image-20240913164829813.png" alt="CAP定理"></p>
<p><img src="image-20240913164929460.png" alt="一致性"></p>
<p><img src="image-20240913164939739.png" alt="可用性"></p>
<p><img src="image-20240913164957181.png" alt="分区容错性"></p>
<h2 id="Base理论"><a href="#Base理论" class="headerlink" title="Base理论"></a>Base理论</h2><p>在CAP中，P是一定会发生的。想想看，网络故障，或者仅仅是普通的网络波动等其他原因，都有可能会导致集群中的节点不可用。因此满足P的前提下，能产生的模式也就只有两个了，<strong>那就是CP模式和AP模式。</strong></p>
<p><img src="image-20240913165311349.png" alt="Base理论"></p>
<p>无论是AP模式还是CP模式，他俩都在一开始我们提出分布式事务中遇到问题的解决方案，那就是<strong>如何实现服务之间的通信。</strong></p>
<p>只有服务之间能够互相感知，才能保证整个分布式事务最终一致性。因此，接下来要讲的 Seata ，就起到了很大的作用。</p>
<h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><h2 id="Seata简介"><a href="#Seata简介" class="headerlink" title="Seata简介"></a>Seata简介</h2><p>先从seata的架构开始。</p>
<p><img src="image-20240913173225286.png" alt="seata架构"></p>
<p>seata的架构是分布式事务的基本模型，但并不是最终的解决方案。根据系统要实现的是强一致还是最终一致，又衍生出了几套解决方案。</p>
<img src="image-20240913173535211.png" alt="分布式解决方案" style="zoom: 50%;">





<h2 id="部署Seata的tc-server"><a href="#部署Seata的tc-server" class="headerlink" title="部署Seata的tc-server"></a>部署Seata的tc-server</h2><p>在seata的架构中，TM和RM可以说是全局事务和分支事务的代理，而TC是独立于分布式系统的一个服务，需要额外进行搭建。</p>
<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>首先我们要下载seata-server包，地址在<a href="http://seata.io/zh-cn/blog/download.html">http</a><a href="http://seata.io/zh-cn/blog/download.html">:&#x2F;&#x2F;seata.io&#x2F;zh-cn&#x2F;blog&#x2F;download</a><a href="http://seata.io/zh-cn/blog/download.html">.</a><a href="http://seata.io/zh-cn/blog/download.html">html</a> </p>
<h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h3><p>在非中文目录解压缩这个zip包，其目录结构如下：</p>
<p><img src="image-20210622202515014.png"></p>
<h3 id="3-修改配置"><a href="#3-修改配置" class="headerlink" title="3.修改配置"></a>3.修改配置</h3><p><strong>因为TC需要与RM\TM之间建立联系，TC在集群中又是一个服务，所以需要将TC注册到Nacos等服务注册中心。</strong>在配置文件中有提供多个注册中心，如果也是用nacos，删掉保留我写的内容就可以了。</p>
<p>修改conf目录下的registry.conf文件：</p>
<p><img src="image-20210622202622874.png"></p>
<p>内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">registry</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # tc服务的注册中心类，这里选择nacos，也可以是eureka、zookeeper等</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # seata tc 服务注册到 nacos的服务名称，可以自定义</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;seata-tc-server&quot; #当前服务的名称</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8848&quot; </span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;DEFAULT_GROUP&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;SH&quot;</span></span><br><span class="line">    <span class="attr">username</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # 读取tc服务端的配置文件的方式，这里是从nacos配置中心读取，这样如果tc是集群，可以共享配置</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"><span class="comment">  # 配置nacos地址等信息</span></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8848&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    <span class="attr">username</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    <span class="attr">dataId</span> = <span class="string">&quot;seataServer.properties&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>





<h3 id="4-在nacos添加配置"><a href="#4-在nacos添加配置" class="headerlink" title="4.在nacos添加配置"></a>4.在nacos添加配置</h3><p>特别注意，为了让tc服务的集群可以共享配置，我们选择了nacos作为统一配置中心。因此服务端配置文件seataServer.properties文件需要在nacos中配好。</p>
<p>格式如下：</p>
<p><img src="image-20210622203609227.png"></p>
<p>配置内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据存储方式，db代表数据库，也支持使用redis。</span></span><br><span class="line"><span class="attr">store.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">store.db.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">store.db.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.password</span>=<span class="string">123</span></span><br><span class="line"><span class="attr">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="attr">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="attr">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="attr">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 事务、日志等配置</span></span><br><span class="line"><span class="attr">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="attr">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 客户端与服务端传输方式</span></span><br><span class="line"><span class="attr">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="attr">transport.compressor</span>=<span class="string">none</span></span><br><span class="line"><span class="comment"># 关闭metrics功能，提高性能</span></span><br><span class="line"><span class="attr">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="attr">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="attr">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br></pre></td></tr></table></figure>

<p>其中的数据库地址、用户名、密码都需要修改成你自己的数据库信息。</p>
<h3 id="5-创建数据库表"><a href="#5-创建数据库表" class="headerlink" title="5.创建数据库表"></a>5.创建数据库表</h3><p>特别注意：tc服务在管理分布式事务时，需要记录事务相关数据到数据库中，你需要提前创建好这些表。</p>
<p>新建一个名为seata的数据库，运行提供的sql文件，这些表主要记录全局事务、分支事务、全局锁信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 分支事务表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `branch_table`;</span><br><span class="line">CREATE TABLE `branch_table`  (</span><br><span class="line">  `branch_id` bigint(20) NOT NULL,</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `resource_group_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `branch_type` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) NULL DEFAULT NULL,</span><br><span class="line">  `client_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime(6) NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime(6) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`branch_id`) USING BTREE,</span><br><span class="line">  INDEX `idx_xid`(`xid`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- 全局事务表</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `global_table`;</span><br><span class="line">CREATE TABLE `global_table`  (</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint(4) NOT NULL,</span><br><span class="line">  `application_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_service_group` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `timeout` int(11) NULL DEFAULT NULL,</span><br><span class="line">  `begin_time` bigint(20) NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`xid`) USING BTREE,</span><br><span class="line">  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) USING BTREE,</span><br><span class="line">  INDEX `idx_transaction_id`(`transaction_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure>



<h3 id="6-启动TC服务"><a href="#6-启动TC服务" class="headerlink" title="6.启动TC服务"></a>6.启动TC服务</h3><p>进入bin目录，运行其中的seata-server.bat即可：</p>
<p><img src="image-20210622205427318.png"></p>
<p>启动成功后，seata-server应该已经注册到nacos注册中心了。</p>
<p>打开浏览器，访问nacos地址：<a href="http://localhost:8848，然后进入服务列表页面，可以看到seata-tc-server的信息，端口默认占的8091：">http://localhost:8848，然后进入服务列表页面，可以看到seata-tc-server的信息，端口默认占的8091：</a></p>
<p><img src="image-20210622205901450.png"></p>
<h2 id="微服务集成Seata"><a href="#微服务集成Seata" class="headerlink" title="微服务集成Seata"></a>微服务集成Seata</h2><h3 id="1-微服务引入依赖"><a href="#1-微服务引入依赖" class="headerlink" title="1.微服务引入依赖"></a>1.微服务引入依赖</h3><p>首先，我们需要在微服务中引入seata依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-微服务添加配置文件"><a href="#2-微服务添加配置文件" class="headerlink" title="2.微服务添加配置文件"></a>2.微服务添加配置文件</h3><p>需要修改application.yml文件，添加一些配置：可以看到，seata不是springcloud配置下的内容，而是单独的一个配置模块，因为两者没有集成。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="comment"># 参考tc服务自己的registry.conf中的配置</span></span><br><span class="line">    <span class="comment"># 包括：地址、namespace命名空间、group组、application-name服务名称、cluster集群</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span> <span class="comment"># tc</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># tc服务在nacos中的服务名称</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">SH</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组，根据这个获取tc服务的cluster名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与TC服务cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br></pre></td></tr></table></figure>

<p>cluster集群在此处修改为 tx-service-group 。例如在前边提到的订单服务、支付服务、仓储服务，整个事务的流程应该为一个组。而 vgroup-mapping中使用事务组名称映射集群，至此nacos需要的信息都具备了。</p>
<p><strong>参与这个事务的每个微服务都需要做这个配置。</strong></p>
<p><strong>参与这个事务的每个微服务都需要做这个配置。</strong></p>
<p><strong>参与这个事务的每个微服务都需要做这个配置。</strong></p>
<p><strong>参与这个事务的每个微服务都需要做这个配置。</strong></p>
<h1 id="Seata分布式事务处理方案"><a href="#Seata分布式事务处理方案" class="headerlink" title="Seata分布式事务处理方案"></a>Seata分布式事务处理方案</h1><h2 id="XA模式：强一致性模式"><a href="#XA模式：强一致性模式" class="headerlink" title="XA模式：强一致性模式"></a>XA模式：强一致性模式</h2><h3 id="介绍-优缺点"><a href="#介绍-优缺点" class="headerlink" title="介绍&amp;优缺点"></a>介绍&amp;优缺点</h3><p>XA 规范 是 X&#x2F;Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的TM与局部的RM之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p>
<p>XA模式的优点是什么？</p>
<ul>
<li>事务的强一致性，满足ACID原则。</li>
<li>常用数据库都支持，实现简单，并且没有代码侵入</li>
</ul>
<p>XA模式的缺点是什么？</p>
<ul>
<li>因为一阶段需要锁定数据库资源（占用DB锁），等待二阶段结束才释放，性能较差</li>
<li>依赖关系型数据库实现事务</li>
<li>要求数据库支持XA模式，关系型数据库例如mysql是支持的，redis就不支持。</li>
</ul>
<h3 id="两阶段提交（2pc协议）"><a href="#两阶段提交（2pc协议）" class="headerlink" title="两阶段提交（2pc协议）"></a>两阶段提交（2pc协议）</h3><p>XA是规范，目前主流数据库都实现了这种规范，实现的原理都是基于两阶段提交。</p>
<p>正常情况：</p>
<p><img src="image-20210724174102768.png"></p>
<p>异常情况：</p>
<p><img src="image-20210724174234987.png"></p>
<p>一阶段：</p>
<ul>
<li>事务协调者通知每个事物参与者执行本地事务</li>
<li>本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁</li>
</ul>
<p>二阶段：</p>
<ul>
<li>事务协调者基于一阶段的报告来判断下一步操作<ul>
<li>如果一阶段都成功，则通知所有事务参与者，提交事务</li>
<li>如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务</li>
</ul>
</li>
</ul>
<h3 id="Seata的XA模型"><a href="#Seata的XA模型" class="headerlink" title="Seata的XA模型"></a>Seata的XA模型</h3><p>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：</p>
<p><img src="image-20210724174424070.png"></p>
<p>RM一阶段的工作：</p>
<p>​	① 注册分支事务到TC</p>
<p>​	② 执行分支业务sql但不提交</p>
<p>​	③ 报告执行状态到TC</p>
<p>TC二阶段的工作：</p>
<ul>
<li><p>TC检测各分支事务执行状态</p>
<p>a.如果都成功，通知所有RM提交事务</p>
<p>b.如果有失败，通知所有RM回滚事务</p>
</li>
</ul>
<p>RM二阶段的工作：</p>
<ul>
<li>接收TC指令，提交或回滚事务</li>
</ul>
<h3 id="springcloud实现XA模式"><a href="#springcloud实现XA模式" class="headerlink" title="springcloud实现XA模式"></a>springcloud实现XA模式</h3><p>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：</p>
<p>1）修改application.yml文件<strong>（每个参与事务的微服务）</strong>，开启XA模式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span></span><br></pre></td></tr></table></figure>



<p>2）给发起全局事务的入口方法添加@GlobalTransactional注解:</p>
<p>本例中是OrderServiceImpl中的create方法.</p>
<p><img src="image-20210724174859556.png"></p>
<p>3）重启服务并测试</p>
<p>重启order-service，再次测试，发现无论怎样，三个微服务都能成功回滚。</p>
<h2 id="AT模式：最终一致模式"><a href="#AT模式：最终一致模式" class="headerlink" title="AT模式：最终一致模式"></a>AT模式：最终一致模式</h2><p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</p>
<h3 id="Seata的AT模型"><a href="#Seata的AT模型" class="headerlink" title="Seata的AT模型"></a>Seata的AT模型</h3><p>基本流程图：</p>
<p><img src="image-20210724175327511.png"></p>
<p>阶段一RM的工作：</p>
<ul>
<li>注册分支事务</li>
<li>记录undo-log（数据快照）</li>
<li>执行业务sql并提交</li>
<li>报告事务状态</li>
</ul>
<p>阶段二提交时RM的工作：</p>
<ul>
<li>删除undo-log即可</li>
</ul>
<p>阶段二回滚时RM的工作：</p>
<ul>
<li><p>根据undo-log恢复数据到更新前</p>
</li>
<li></li>
</ul>
<h3 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h3><p>我们用一个真实的业务来梳理下AT模式的原理。</p>
<p>比如，现在又一个数据库表，记录用户余额：</p>
<table>
<thead>
<tr>
<th><strong>id</strong></th>
<th><strong>money</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>100</td>
</tr>
</tbody></table>
<p>其中一个分支业务要执行的SQL为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>AT模式下，当前分支事务执行流程如下：</p>
<p>一阶段：</p>
<p>1）TM发起并注册全局事务到TC</p>
<p>2）TM调用分支事务</p>
<p>3）分支事务准备执行业务SQL</p>
<p>4）RM拦截业务SQL，根据where条件查询原始数据，形成快照。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>5）RM执行业务SQL，提交本地事务，释放数据库锁。此时 <code>money = 90</code></p>
<p>6）RM报告本地事务状态给TC</p>
<p>二阶段：</p>
<p>1）TM通知TC事务结束</p>
<p>2）TC检查分支事务状态</p>
<p>​	 a）如果都成功，则立即删除快照</p>
<p>​	 b）如果有分支事务失败，需要回滚。读取快照数据（<code>&#123;&quot;id&quot;: 1, &quot;money&quot;: 100&#125;</code>），将快照恢复到数据库。此时数据库再次恢复为100</p>
<p>流程图：</p>
<p><img src="image-20210724180722921.png"></p>
<h3 id="AT与XA的区别"><a href="#AT与XA的区别" class="headerlink" title="AT与XA的区别"></a>AT与XA的区别</h3><p>简述AT模式与XA模式最大的区别是什么？</p>
<ul>
<li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</li>
<li>XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。</li>
<li>XA模式强一致；AT模式最终一致</li>
</ul>
<h3 id="脏写问题（由于一阶段提交事务会释放DB锁）"><a href="#脏写问题（由于一阶段提交事务会释放DB锁）" class="headerlink" title="脏写问题（由于一阶段提交事务会释放DB锁）"></a>脏写问题（由于一阶段提交事务会释放DB锁）</h3><p>在多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p>
<p><img src="image-20210724181541234.png"></p>
<p>解决思路就是引入了全局锁的概念。</p>
<p><strong>全局锁是事务针对一个表中要操作的行数据，对这个行数据加上锁。</strong></p>
<p>在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p>
<p><img src="image-20210724181843029.png"></p>
<p><strong>数据库锁的话，任何其他事务都进不来，但是全局锁，只锁定操作账户余额的相关事务（seata管理），其他事物（非seata管理的事务）仍可以进来，例如修改账户名称。</strong></p>
<h3 id="乐观锁改善非seata的事务2"><a href="#乐观锁改善非seata的事务2" class="headerlink" title="乐观锁改善非seata的事务2"></a>乐观锁改善非seata的事务2</h3><p>上面的解决方案是基于事务2是交给了TC管理的，但是如果事务2没有给seata管理，可以采用乐观锁解决。</p>
<blockquote>
<p>什么情况下事务2不会是 TC 管理的？</p>
</blockquote>
<p>没有被@GlobalTransactional注解包含在整个seata的事务调用被seata管理的事务。</p>
<blockquote>
<p>如何用乐观锁改善？</p>
</blockquote>
<p>线程1将金额为100的数据修改为90，此时业务不提交，此时线程2将90修改为80，但是线程1业务报错需要回滚，此时线程1将金额恢复为100。</p>
<p>我们可以这样设计乐观锁的实现：</p>
<ol>
<li><strong>定义乐观锁字段</strong>：在数据库中，给涉及到并发修改的数据表添加一个版本号（version）字段。每次读取数据时，同时读取这个版本号。</li>
<li><strong>读取数据时获取版本号</strong>：线程1和线程2在读取金额时，同时读取到当前金额（例如初始是100）和版本号（假设为1）。</li>
<li><strong>更新数据时检查版本号</strong>：<ul>
<li>线程1将金额从100修改为90，同时提交版本号从1更新为2。但在实际提交到数据库之前，线程1的业务逻辑发生错误，需要回滚。</li>
<li>在线程1回滚的过程中，它会恢复金额到100，并且假设这个版本号不变（因为实际操作中版本号应该在每次修改时递增，但在这里为了简化，我们假设线程1由于错误并未成功递增版本号）。</li>
<li>线程2接着将金额从90（或线程1回滚后的100，具体取决于线程1的操作在数据库中的实际体现）修改为80，同时它会将版本号从1更新为2（假设线程1的更新并未成功改变版本号）。</li>
</ul>
</li>
<li><strong>乐观锁的实现</strong>：<ul>
<li>当线程1尝试回滚并将金额从90恢复为100并尝试将版本号设置回1时，乐观锁会介入。因为此时数据库中的版本号已经是2了，线程1的更新会因为版本号不匹配而失败。这样，线程1就无法覆盖线程2的更新。</li>
<li>正确的做法应该是线程1检测到版本号不匹配后，可以选择重新读取最新数据并决定是否继续执行操作，或者记录一个错误日志等。</li>
</ul>
</li>
<li><strong>解决策略</strong>：<ul>
<li>如果线程1的操作需要严格基于修改前的数据，那么它应该重新读取最新的数据（此时金额为80，版本号为2），并决定是否继续或重试。</li>
<li>在某些情况下，也可以让线程1在版本号不匹配时简单地放弃修改，记录一个错误或异常，然后退出。</li>
</ul>
</li>
</ol>
<h3 id="实现AT模式"><a href="#实现AT模式" class="headerlink" title="实现AT模式"></a>实现AT模式</h3><p>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</p>
<p>只不过，AT模式需要一个表来记录全局锁、另一张表来记录数据快照undo_log。</p>
<p>1）导入数据库表，记录全局锁</p>
<p>导入Sql文件：seata-at.sql，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : local</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50622</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : seata_demo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50622</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 20/06/2021 12:39:03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for undo_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `undo_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log`  (</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;branch transaction id&#x27;</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;global transaction id&#x27;</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;undo_log context,such as serialization&#x27;</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;rollback info&#x27;</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;0:normal status,1:defense status&#x27;</span>,</span><br><span class="line">  `log_created` datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create datetime&#x27;</span>,</span><br><span class="line">  `log_modified` datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;modify datetime&#x27;</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `ux_undo_log`(`xid`, `branch_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;AT transaction mode undo table&#x27;</span> ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of undo_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for lock_table</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `lock_table`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `lock_table`  (</span><br><span class="line">  `row_key` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">96</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `transaction_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resource_id` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `table_name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pk` <span class="type">varchar</span>(<span class="number">36</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`row_key`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `idx_branch_id`(`branch_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Compact;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<p>2）给发起全局事务的入口方法添加@GlobalTransactional注解（见XA模式），修改application.yml文件，将事务模式修改为AT模式即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span> <span class="comment"># 默认就是AT</span></span><br></pre></td></tr></table></figure>



<p>3）重启服务并测试</p>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>AT模式的优点：</p>
<ul>
<li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li>
<li>利用全局锁实现读写隔离</li>
<li>没有代码侵入，框架自动完成回滚和提交</li>
</ul>
<p>AT模式的缺点：</p>
<ul>
<li>两阶段之间属于软状态，属于最终一致</li>
<li>框架的快照功能会影响性能，但比XA模式要好很多</li>
</ul>
<h2 id="TCC模式"><a href="#TCC模式" class="headerlink" title="TCC模式"></a>TCC模式</h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p>
<ul>
<li><p>Try：资源的检测和预留； </p>
</li>
<li><p>Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</p>
</li>
<li><p>Cancel：预留资源释放，可以理解为try的反向操作。</p>
</li>
</ul>
<h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p>
<ul>
<li><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</li>
</ul>
<p>初识余额：</p>
<p><img src="image-20210724182424907.png"></p>
<p>余额充足，可以冻结：</p>
<p><img src="image-20210724182457951.png"></p>
<p>此时，总金额 &#x3D; 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p>
<ul>
<li>**阶段二（Confirm)**：假如要提交（Confirm），则冻结金额扣减30</li>
</ul>
<p>确认可以提交，不过之前可用金额已经扣减过了，这里只要清除冻结金额就好了：</p>
<p><img src="image-20210724182706011.png"></p>
<p>此时，总金额 &#x3D; 冻结金额 + 可用金额 &#x3D; 0 + 70  &#x3D; 70元</p>
<ul>
<li>**阶段二(Canncel)**：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30</li>
</ul>
<p>需要回滚，那么就要释放冻结金额，恢复可用金额：</p>
<p><img src="image-20210724182810734.png"></p>
<h3 id="Seata的TCC模型"><a href="#Seata的TCC模型" class="headerlink" title="Seata的TCC模型"></a>Seata的TCC模型</h3><p>Seata中的TCC模型依然延续之前的事务架构，如图：</p>
<p><img src="image-20210724182937713.png"></p>
<h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p>TCC模式的每个阶段是做什么的？</p>
<ul>
<li>Try：资源检查和预留</li>
<li>Confirm：业务执行和提交</li>
<li>Cancel：预留资源的释放</li>
</ul>
<p>TCC的优点是什么？</p>
<ul>
<li>一阶段完成直接提交事务，释放数据库资源，性能好</li>
<li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li>
<li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li>
</ul>
<p>TCC的缺点是什么？</p>
<ul>
<li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li>
<li>软状态，事务是最终一致</li>
<li>需要考虑Confirm和Cancel的失败情况，做好幂等处理</li>
</ul>
<h3 id="事务悬挂和空回滚"><a href="#事务悬挂和空回滚" class="headerlink" title="事务悬挂和空回滚"></a>事务悬挂和空回滚</h3><h4 id="1）空回滚"><a href="#1）空回滚" class="headerlink" title="1）空回滚"></a>1）空回滚</h4><p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p>
<p>如图：</p>
<p><img src="image-20210724183426891.png"></p>
<p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p>
<h4 id="2）业务悬挂"><a href="#2）业务悬挂" class="headerlink" title="2）业务悬挂"></a>2）业务悬挂</h4><p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p>
<p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p>
<h3 id="实现TCC模式"><a href="#实现TCC模式" class="headerlink" title="实现TCC模式"></a>实现TCC模式</h3><p>解决空回滚和业务悬挂问题，必须要记录当前事务状态，是在try、还是cancel？</p>
<h4 id="1）思路分析"><a href="#1）思路分析" class="headerlink" title="1）思路分析"></a>1）思路分析</h4><p>这里我们定义一张表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_freeze_tbl` (</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `freeze_money` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;冻结金额&#x27;</span>,</span><br><span class="line">  `state` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务状态，0:try，1:confirm，2:cancel&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`xid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span>COMPACT;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>xid：是全局事务id</li>
<li>freeze_money：用来记录用户冻结金额</li>
<li>state：用来记录事务状态</li>
</ul>
<p>那此时，我们的业务开怎么做呢？</p>
<ul>
<li>Try业务：<ul>
<li>记录冻结金额和事务状态到account_freeze表</li>
<li>扣减account表可用金额</li>
</ul>
</li>
<li>Confirm业务<ul>
<li>根据xid删除account_freeze表的冻结记录</li>
</ul>
</li>
<li>Cancel业务<ul>
<li>修改account_freeze表，冻结金额为0，state为2</li>
<li>修改account表，恢复可用金额</li>
</ul>
</li>
<li>如何判断是否空回滚？<ul>
<li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚</li>
</ul>
</li>
<li>如何避免业务悬挂？<ul>
<li>try业务中，根据xid查询account_freeze ，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li>
</ul>
</li>
</ul>
<p>接下来，我们改造account-service，利用TCC实现余额扣减功能。</p>
<h4 id="2）声明TCC接口"><a href="#2）声明TCC接口" class="headerlink" title="2）声明TCC接口"></a>2）声明TCC接口</h4><p>TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，</p>
<p>我们在account-service项目中的<code>cn.itcast.account.service</code>包中新建一个接口，声明TCC三个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContextParameter;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.LocalTCC;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.TwoPhaseBusinessAction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountTCCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;deduct&quot;, commitMethod = &quot;confirm&quot;, rollbackMethod = &quot;cancel&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span> String userId,</span></span><br><span class="line"><span class="params">                <span class="meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span><span class="type">int</span> money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3）编写实现类"><a href="#3）编写实现类" class="headerlink" title="3）编写实现类"></a>3）编写实现类</h4><p>在account-service服务中的<code>cn.itcast.account.service.impl</code>包下新建一个类，实现TCC业务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.entity.AccountFreeze;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountFreezeMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.service.AccountTCCService;</span><br><span class="line"><span class="keyword">import</span> io.seata.core.context.RootContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountTCCServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountTCCService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountFreezeMapper freezeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deduct</span><span class="params">(String userId, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="comment">// 0.获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> RootContext.getXID();</span><br><span class="line">        <span class="comment">// 1.扣减可用余额</span></span><br><span class="line">        accountMapper.deduct(userId, money);</span><br><span class="line">        <span class="comment">// 2.记录冻结金额，事务状态</span></span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">freeze</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountFreeze</span>();</span><br><span class="line">        freeze.setUserId(userId);</span><br><span class="line">        freeze.setFreezeMoney(money);</span><br><span class="line">        freeze.setState(AccountFreeze.State.TRY);</span><br><span class="line">        freeze.setXid(xid);</span><br><span class="line">        freezeMapper.insert(freeze);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">confirm</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取事务id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();</span><br><span class="line">        <span class="comment">// 2.根据id删除冻结记录</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> freezeMapper.deleteById(xid);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(BusinessActionContext ctx)</span> &#123;</span><br><span class="line">        <span class="comment">// 0.查询冻结记录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xid</span> <span class="operator">=</span> ctx.getXid();</span><br><span class="line">        <span class="type">AccountFreeze</span> <span class="variable">freeze</span> <span class="operator">=</span> freezeMapper.selectById(xid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.恢复可用余额</span></span><br><span class="line">        accountMapper.refund(freeze.getUserId(), freeze.getFreezeMoney());</span><br><span class="line">        <span class="comment">// 2.将冻结金额清零，状态改为CANCEL</span></span><br><span class="line">        freeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">        freeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> freezeMapper.updateById(freeze);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="SAGA模式"><a href="#SAGA模式" class="headerlink" title="SAGA模式"></a>SAGA模式</h2><p>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</p>
<p>其理论基础是Hector &amp; Kenneth  在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html">Sagas</a>。</p>
<p>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html">https://seata.io/zh-cn/docs/user/saga.html</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p>
<p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p>
<p><img src="image-20210724184846396.png"></p>
<p>Saga也分为两个阶段：</p>
<ul>
<li>一阶段：直接提交本地事务</li>
<li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚</li>
</ul>
<h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p>优点：</p>
<ul>
<li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li>
<li>一阶段直接提交事务，无锁，性能好</li>
<li>不用编写TCC中的三个阶段，实现简单</li>
</ul>
<p>缺点：</p>
<ul>
<li>软状态持续时间不确定，时效性差</li>
<li>没有锁，没有事务隔离，会有脏写</li>
</ul>
<h2 id="四种模式对比"><a href="#四种模式对比" class="headerlink" title="四种模式对比"></a>四种模式对比</h2><p>我们从以下几个方面来对比四种实现：</p>
<ul>
<li>一致性：能否保证事务的一致性？强一致还是最终一致？</li>
<li>隔离性：事务之间的隔离性如何？</li>
<li>代码侵入：是否需要对业务代码改造？</li>
<li>性能：有无性能损耗？</li>
<li>场景：常见的业务场景</li>
</ul>
<p>如图：</p>
<p><img src="image-20210724185021819.png"></p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>seata</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务保护：sentinel</title>
    <url>/2024/09/14/11sentinel/</url>
    <content><![CDATA[<h1 id="微服务保护"><a href="#微服务保护" class="headerlink" title="微服务保护"></a>微服务保护</h1><p><img src="image-20240917232441906.png" alt="我亲手制作的思维导图"></p>
<h1 id="1-初识Sentinel"><a href="#1-初识Sentinel" class="headerlink" title="1.初识Sentinel"></a>1.初识Sentinel</h1><h2 id="1-1-雪崩问题及解决方案"><a href="#1-1-雪崩问题及解决方案" class="headerlink" title="1.1.雪崩问题及解决方案"></a>1.1.雪崩问题及解决方案</h2><h3 id="1-1-1-雪崩问题"><a href="#1-1-1-雪崩问题" class="headerlink" title="1.1.1.雪崩问题"></a>1.1.1.雪崩问题</h3><p>微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。</p>
<p> <img src="1533829099748.png"></p>
<p>如图，如果服务提供者I发生了故障，当前的应用的部分业务因为依赖于服务I，因此也会被阻塞。此时，其它不依赖于服务I的业务似乎不受影响。</p>
<p> <img src="1533829198240.png"></p>
<p>但是，依赖服务I的业务请求被阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞：</p>
<p> <img src="1533829307389.png"></p>
<p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。</p>
<p>那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了：</p>
<p><img src="image-20210715172710340.png"></p>
<h3 id="1-1-2-超时处理"><a href="#1-1-2-超时处理" class="headerlink" title="1.1.2.超时处理"></a>1.1.2.超时处理</h3><p>解决雪崩问题的常见方式有四种：</p>
<p>•超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</p>
<p><img src="image-20210715172820438.png"></p>
<h3 id="1-1-3-仓壁模式（线程隔离）"><a href="#1-1-3-仓壁模式（线程隔离）" class="headerlink" title="1.1.3.仓壁模式（线程隔离）"></a>1.1.3.仓壁模式（线程隔离）</h3><p>方案2：仓壁模式</p>
<p>仓壁模式来源于船舱的设计：</p>
<p><img src="image-20210715172946352.png"></p>
<p>船舱都会被隔板分离为多个独立空间，当船体破损时，只会导致部分空间进入，将故障控制在一定范围内，避免整个船体都被淹没。</p>
<p>于此类似，我们可以限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。</p>
<p><img src="image-20210715173215243.png"></p>
<h3 id="1-1-4-断路器（熔断降级）"><a href="#1-1-4-断路器（熔断降级）" class="headerlink" title="1.1.4.断路器（熔断降级）"></a>1.1.4.断路器（熔断降级）</h3><p>断路器模式：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求。</p>
<p>断路器会统计访问某个服务的请求数量，异常比例：</p>
<p><img src="image-20210715173327075.png"></p>
<p>当发现访问服务D的请求异常比例过高时，认为服务D有导致雪崩的风险，会拦截访问服务D的一切请求，形成熔断：</p>
<p><img src="image-20210715173428073.png"></p>
<h3 id="1-1-5-限流（流量控制）"><a href="#1-1-5-限流（流量控制）" class="headerlink" title="1.1.5.限流（流量控制）"></a>1.1.5.限流（流量控制）</h3><p><strong>流量控制</strong>：限制业务访问的QPS，避免服务因流量的突增而故障。</p>
<p><img src="image-20210715173555158.png"></p>
<h3 id="1-1-6-总结"><a href="#1-1-6-总结" class="headerlink" title="1.1.6.总结"></a>1.1.6.总结</h3><p>什么是雪崩问题？</p>
<ul>
<li>微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。</li>
</ul>
<p>可以认为：</p>
<p><strong>限流</strong>是对服务的保护，避免因瞬间高并发流量而导致服务故障，进而避免雪崩。是一种<strong>预防</strong>措施。</p>
<p><strong>超时处理、线程隔离、降级熔断</strong>是在部分服务故障时，将故障控制在一定范围，避免雪崩。是一种<strong>补救</strong>措施。</p>
<h2 id="1-2-服务保护技术对比"><a href="#1-2-服务保护技术对比" class="headerlink" title="1.2.服务保护技术对比"></a>1.2.服务保护技术对比</h2><p>在SpringCloud当中支持多种服务保护技术：</p>
<ul>
<li><a href="https://github.com/Netflix/Hystrix">Netfix Hystrix</a></li>
<li><a href="https://github.com/alibaba/Sentinel">Sentinel</a></li>
<li><a href="https://github.com/resilience4j/resilience4j">Resilience4J</a></li>
</ul>
<p>早期比较流行的是Hystrix框架，但目前国内实用最广泛的还是阿里巴巴的Sentinel框架，这里我们做下对比：</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>Sentinel</strong></th>
<th><strong>Hystrix</strong></th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离</td>
<td>线程池隔离&#x2F;信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于慢调用比例或异常比例</td>
<td>基于失败比率</td>
</tr>
<tr>
<td>实时指标实现</td>
<td>滑动窗口</td>
<td>滑动窗口（基于 RxJava）</td>
</tr>
<tr>
<td>规则配置</td>
<td>支持多种数据源</td>
<td>支持多种数据源</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
</tr>
<tr>
<td>基于注解的支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>限流</td>
<td>基于 QPS，支持基于调用关系的限流</td>
<td>有限的支持</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持慢启动、匀速排队模式</td>
<td>不支持</td>
</tr>
<tr>
<td>系统自适应保护</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>控制台</td>
<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>
<td>不完善</td>
</tr>
<tr>
<td>常见框架的适配</td>
<td>Servlet、Spring Cloud、Dubbo、gRPC  等</td>
<td>Servlet、Spring Cloud Netflix</td>
</tr>
</tbody></table>
<h2 id="1-3-Sentinel介绍和安装"><a href="#1-3-Sentinel介绍和安装" class="headerlink" title="1.3.Sentinel介绍和安装"></a>1.3.Sentinel介绍和安装</h2><h3 id="1-3-1-初识Sentinel"><a href="#1-3-1-初识Sentinel" class="headerlink" title="1.3.1.初识Sentinel"></a>1.3.1.初识Sentinel</h3><p>Sentinel是阿里巴巴开源的一款微服务流量控制组件。官网地址：<a href="https://sentinelguard.io/zh-cn/index.html">https://sentinelguard.io/zh-cn/index.html</a></p>
<p>Sentinel 具有以下特征:</p>
<p>•<strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p>
<p>•<strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p>
<p>•<strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架&#x2F;库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p>
<p>•<strong>完善的</strong> <strong>SPI</strong> <strong>扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p>
<h3 id="1-3-2-安装Sentinel"><a href="#1-3-2-安装Sentinel" class="headerlink" title="1.3.2.安装Sentinel"></a>1.3.2.安装Sentinel</h3><p>1）下载</p>
<p>sentinel官方提供了UI控制台，方便我们对系统做限流设置。大家可以在<a href="https://github.com/alibaba/Sentinel/releases">GitHub</a>下载。</p>
<p><img src="image-20210715174252531.png"></p>
<p>2）运行</p>
<p>将jar包放到任意非中文目录，执行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure>

<p>如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：</p>
<table>
<thead>
<tr>
<th><strong>配置项</strong></th>
<th><strong>默认值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>server.port</td>
<td>8080</td>
<td>服务端口</td>
</tr>
<tr>
<td>sentinel.dashboard.auth.username</td>
<td>sentinel</td>
<td>默认用户名</td>
</tr>
<tr>
<td>sentinel.dashboard.auth.password</td>
<td>sentinel</td>
<td>默认密码</td>
</tr>
</tbody></table>
<p>例如，修改端口：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure>





<p>3）访问</p>
<p>访问<a href="http://localhost:8080页面，就可以看到sentinel的控制台了：">http://localhost:8080页面，就可以看到sentinel的控制台了：</a></p>
<p><img src="image-20210715190827846.png"></p>
<p>需要输入账号和密码，默认都是：sentinel</p>
<p>登录后，发现一片空白，什么都没有：</p>
<p><img src="image-20210715191134448.png"></p>
<p>这是因为我们还没有与微服务整合。</p>
<h2 id="1-4-微服务整合Sentinel"><a href="#1-4-微服务整合Sentinel" class="headerlink" title="1.4.微服务整合Sentinel"></a>1.4.微服务整合Sentinel</h2><p>我们在order-service中整合sentinel，并连接sentinel的控制台，步骤如下：</p>
<p>1）引入sentinel依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2）配置控制台</p>
<p>修改application.yaml文件，添加下面内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure>



<p>3）访问order-service的任意端点</p>
<p>打开浏览器，访问<a href="http://localhost:8088/order/101%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E8%A7%A6%E5%8F%91sentinel%E7%9A%84%E7%9B%91%E6%8E%A7%E3%80%82">http://localhost:8088/order/101，这样才能触发sentinel的监控。</a></p>
<p>然后再访问sentinel的控制台，查看效果：</p>
<p><img src="image-20210715191241799.png"></p>
<h1 id="2-流量控制"><a href="#2-流量控制" class="headerlink" title="2.流量控制"></a>2.流量控制</h1><p>雪崩问题虽然有四种方案，但是限流是避免服务因突发的流量而发生故障，是对微服务雪崩问题的预防。我们先学习这种模式。</p>
<h2 id="2-1-簇点链路"><a href="#2-1-簇点链路" class="headerlink" title="2.1.簇点链路"></a>2.1.簇点链路</h2><p>当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做<strong>簇点链路</strong>。簇点链路中被监控的每一个接口就是一个<strong>资源</strong>。</p>
<p>默认情况下sentinel会监控SpringMVC的每一个端点（Endpoint，也就是controller中的方法），因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源。</p>
<p>如果想要监控service、mapper方法，需要添加sentinel的额外的注解。</p>
<p>例如，我们刚才访问的order-service中的OrderController中的端点：&#x2F;order&#x2F;{orderId}</p>
<p><img src="image-20210715191757319.png" alt="image-20210715191757319"></p>
<p>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p>
<ul>
<li>流控：流量控制</li>
<li>降级：降级熔断</li>
<li>热点：热点参数限流，是限流的一种</li>
<li>授权：请求的权限控制</li>
</ul>
<h2 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1.快速入门"></a>2.1.快速入门</h2><h3 id="2-1-1-示例"><a href="#2-1-1-示例" class="headerlink" title="2.1.1.示例"></a>2.1.1.示例</h3><p>点击资源&#x2F;order&#x2F;{orderId}后面的流控按钮，就可以弹出表单。</p>
<p><img src="image-20210715191757319.png"></p>
<p>表单中可以填写限流规则，如下：</p>
<p><img src="image-20210715192010657.png"></p>
<p>其含义是限制 &#x2F;order&#x2F;{orderId}这个资源的单机QPS为1，即每秒只允许1次请求，超出的请求会被拦截并报错。</p>
<h3 id="2-1-2-练习："><a href="#2-1-2-练习：" class="headerlink" title="2.1.2.练习："></a>2.1.2.练习：</h3><p>需求：给 &#x2F;order&#x2F;{orderId}这个资源设置流控规则，QPS不能超过 5，然后测试。</p>
<p>1）首先在sentinel控制台添加限流规则</p>
<p><img src="image-20210715192455429.png"></p>
<p>2）利用jmeter测试</p>
<p>选择：</p>
<p><img src="image-20210715200635414.png"></p>
<p>20个用户，2秒内运行完，QPS是10，超过了5.</p>
<p>选中<code>流控入门，QPS&lt;5</code>右键运行：</p>
<p><img src="image-20210715200804594.png"></p>
<blockquote>
<p>注意，不要点击菜单中的执行按钮来运行。</p>
</blockquote>
<p>结果：</p>
<p><img src="image-20210715200853671.png"></p>
<p>可以看到，成功的请求每次只有5个</p>
<h2 id="2-2-流控模式"><a href="#2-2-流控模式" class="headerlink" title="2.2.流控模式"></a>2.2.流控模式</h2><p>在添加限流规则时，点击高级选项，可以选择三种<strong>流控模式</strong>：</p>
<ul>
<li>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li>
<li>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li>
<li>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</li>
</ul>
<p><img src="image-20210715201827886.png"></p>
<p>快速入门测试的就是直接模式。</p>
<h3 id="2-2-1-关联模式"><a href="#2-2-1-关联模式" class="headerlink" title="2.2.1.关联模式"></a>2.2.1.关联模式</h3><p><strong>关联模式</strong>：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p>
<p><strong>配置规则</strong>：</p>
<p><img src="image-20210715202540786.png"></p>
<p><strong>语法说明</strong>：当&#x2F;write资源访问量触发阈值时，就会对&#x2F;read资源限流，避免影响&#x2F;write资源。</p>
<p><strong>使用场景</strong>：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p>
<p><strong>需求说明</strong>：</p>
<ul>
<li><p>在OrderController新建两个端点：&#x2F;order&#x2F;query和&#x2F;order&#x2F;update，无需实现业务</p>
</li>
<li><p>配置流控规则，当&#x2F;order&#x2F; update资源被访问的QPS超过5时，对&#x2F;order&#x2F;query请求限流</p>
</li>
</ul>
<p>1）定义&#x2F;order&#x2F;query端点，模拟订单查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）定义&#x2F;order&#x2F;update端点，模拟订单更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;更新订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启服务，查看sentinel控制台的簇点链路：</p>
<p><img src="image-20210716101805951.png"></p>
<p>3）配置流控规则</p>
<p>对哪个端点限流，就点击哪个端点后面的按钮。我们是对订单查询&#x2F;order&#x2F;query限流，因此点击它后面的按钮：</p>
<p><img src="image-20210716101934499.png" alt="image-20210716101934499"></p>
<p>在表单中填写流控规则：</p>
<p><img src="image-20210716102103814.png"></p>
<p>4）在Jmeter测试</p>
<p>选择《流控模式-关联》：</p>
<p><img src="image-20210716102416266.png"></p>
<p>可以看到1000个用户，100秒，因此QPS为10，超过了我们设定的阈值：5</p>
<p>查看http请求：</p>
<p><img src="image-20210716102532554.png"></p>
<p>请求的目标是&#x2F;order&#x2F;update，这样这个断点就会触发阈值。</p>
<p>但限流的目标是&#x2F;order&#x2F;query，我们在浏览器访问，可以发现：</p>
<p><img src="image-20210716102636030.png"></p>
<p>确实被限流了。</p>
<p>5）总结</p>
<p><img src="image-20210716103143002.png"></p>
<h3 id="2-2-2-链路模式"><a href="#2-2-2-链路模式" class="headerlink" title="2.2.2.链路模式"></a>2.2.2.链路模式</h3><p><strong>链路模式</strong>：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</p>
<p><strong>配置示例</strong>：</p>
<p>例如有两条请求链路：</p>
<ul>
<li><p>&#x2F;test1 –&gt; &#x2F;common</p>
</li>
<li><p>&#x2F;test2 –&gt; &#x2F;common</p>
</li>
</ul>
<p>如果只希望统计从&#x2F;test2进入到&#x2F;common的请求，则可以这样配置：</p>
<p><img src="image-20210716103536346.png"></p>
<p><strong>实战案例</strong></p>
<p>需求：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</p>
<p>步骤：</p>
<ol>
<li><p>在OrderService中添加一个queryGoods方法，不用实现业务</p>
</li>
<li><p>在OrderController中，改造&#x2F;order&#x2F;query端点，调用OrderService中的queryGoods方法</p>
</li>
<li><p>在OrderController中添加一个&#x2F;order&#x2F;save的端点，调用OrderService的queryGoods方法</p>
</li>
<li><p>给queryGoods设置限流规则，从&#x2F;order&#x2F;query进入queryGoods的方法限制QPS必须小于2</p>
</li>
</ol>
<p>实现：</p>
<h4 id="1）添加查询商品方法"><a href="#1）添加查询商品方法" class="headerlink" title="1）添加查询商品方法"></a>1）添加查询商品方法</h4><p>在order-service服务中，给OrderService类添加一个queryGoods方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryGoods</span><span class="params">()</span>&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2）查询订单时，查询商品"><a href="#2）查询订单时，查询商品" class="headerlink" title="2）查询订单时，查询商品"></a>2）查询订单时，查询商品</h4><p>在order-service的OrderController中，修改&#x2F;order&#x2F;query端点的业务逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询商品</span></span><br><span class="line">    orderService.queryGoods();</span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3）新增订单，查询商品"><a href="#3）新增订单，查询商品" class="headerlink" title="3）新增订单，查询商品"></a>3）新增订单，查询商品</h4><p>在order-service的OrderController中，修改&#x2F;order&#x2F;save端点，模拟新增订单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询商品</span></span><br><span class="line">    orderService.queryGoods();</span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    System.err.println(<span class="string">&quot;新增订单&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;新增订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4）给查询商品添加资源标记"><a href="#4）给查询商品添加资源标记" class="headerlink" title="4）给查询商品添加资源标记"></a>4）给查询商品添加资源标记</h4><p>默认情况下，OrderService中的方法是不被Sentinel监控的，需要我们自己通过注解来标记要监控的方法。</p>
<p>给OrderService的queryGoods方法添加@SentinelResource注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryGoods</span><span class="params">()</span>&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。</p>
<p>我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭context整合</span></span><br></pre></td></tr></table></figure>

<p>重启服务，访问&#x2F;order&#x2F;query和&#x2F;order&#x2F;save，可以查看到sentinel的簇点链路规则中，出现了新的资源：</p>
<p><img src="image-20210716105227163.png"></p>
<h4 id="5）添加流控规则"><a href="#5）添加流控规则" class="headerlink" title="5）添加流控规则"></a>5）添加流控规则</h4><p>点击goods资源后面的流控按钮，在弹出的表单中填写下面信息：</p>
<p><img src="image-20210716105408723.png"></p>
<p>只统计从&#x2F;order&#x2F;query进入&#x2F;goods的资源，QPS阈值为2，超出则被限流。</p>
<h4 id="6）Jmeter测试"><a href="#6）Jmeter测试" class="headerlink" title="6）Jmeter测试"></a>6）Jmeter测试</h4><p>选择《流控模式-链路》：</p>
<p><img src="image-20210716105612312.png"></p>
<p>可以看到这里200个用户，50秒内发完，QPS为4，超过了我们设定的阈值2</p>
<p>一个http请求是访问&#x2F;order&#x2F;save：</p>
<p><img src="image-20210716105812789.png"></p>
<p>运行的结果：</p>
<p><img src="image-20210716110027064.png"></p>
<p>完全不受影响。</p>
<p>另一个是访问&#x2F;order&#x2F;query：</p>
<p><img src="image-20210716105855951.png"></p>
<p>运行结果：</p>
<p><img src="image-20210716105956401.png"></p>
<p>每次只有2个通过。</p>
<h3 id="2-2-3-总结"><a href="#2-2-3-总结" class="headerlink" title="2.2.3.总结"></a>2.2.3.总结</h3><p>流控模式有哪些？</p>
<p>•直接：对当前资源限流</p>
<p>•关联：高优先级资源触发阈值，对低优先级资源限流。</p>
<p>•链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流</p>
<h2 id="2-3-流控效果"><a href="#2-3-流控效果" class="headerlink" title="2.3.流控效果"></a>2.3.流控效果</h2><p>在流控的高级选项中，还有一个流控效果选项：</p>
<p><img src="image-20210716110225104.png"></p>
<p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p>
<ul>
<li><p>快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</p>
</li>
<li><p>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。</p>
</li>
<li><p>排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长</p>
</li>
</ul>
<h3 id="2-3-1-warm-up"><a href="#2-3-1-warm-up" class="headerlink" title="2.3.1.warm up"></a>2.3.1.warm up</h3><p>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</p>
<p>warm up也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。请求阈值初始值是 maxThreshold &#x2F; coldFactor，持续指定时长后，逐渐提高到maxThreshold值。而coldFactor的默认值是3.</p>
<p>例如，我设置QPS的maxThreshold为10，预热时间为5秒，那么初始阈值就是 10 &#x2F; 3 ，也就是3，然后在5秒后逐渐增长到10.</p>
<p><img src="image-20210716110629796.png"></p>
<p><strong>案例</strong></p>
<p>需求：给&#x2F;order&#x2F;{orderId}这个资源设置限流，最大QPS为10，利用warm up效果，预热时长为5秒</p>
<h4 id="1）配置流控规则："><a href="#1）配置流控规则：" class="headerlink" title="1）配置流控规则："></a>1）配置流控规则：</h4><p><img src="image-20210716111012387.png"></p>
<h4 id="2）Jmeter测试"><a href="#2）Jmeter测试" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《流控效果，warm up》：</p>
<p><img src="image-20210716111136699.png"></p>
<p>QPS为10.</p>
<p>刚刚启动时，大部分请求失败，成功的只有3个，说明QPS被限定在3：</p>
<p><img src="image-20210716111303701.png"></p>
<p>随着时间推移，成功比例越来越高：</p>
<p><img src="image-20210716111404717.png"></p>
<p>到Sentinel控制台查看实时监控：</p>
<p><img src="image-20210716111526480.png"></p>
<p>一段时间后：</p>
<p><img src="image-20210716111658541.png"></p>
<h3 id="2-3-2-排队等待"><a href="#2-3-2-排队等待" class="headerlink" title="2.3.2.排队等待"></a>2.3.2.排队等待</h3><p>当请求超过QPS阈值时，快速失败和warm up 会拒绝新的请求并抛出异常。</p>
<p>而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</p>
<p>工作原理</p>
<p>例如：QPS &#x3D; 5，意味着每200ms处理一个队列中的请求；timeout &#x3D; 2000，意味着<strong>预期等待时长</strong>超过2000ms的请求会被拒绝并抛出异常。</p>
<p>那什么叫做预期等待时长呢？</p>
<p>比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：</p>
<ul>
<li>第6个请求的<strong>预期等待时长</strong> &#x3D;  200 * （6 - 1） &#x3D; 1000ms</li>
<li>第12个请求的预期等待时长 &#x3D; 200 * （12-1） &#x3D; 2200ms</li>
</ul>
<p>现在，第1秒同时接收到10个请求，但第2秒只有1个请求，此时QPS的曲线这样的：</p>
<p><img src="image-20210716113147176.png"></p>
<p>如果使用队列模式做流控，所有进入的请求都要排队，以固定的200ms的间隔执行，QPS会变的很平滑：</p>
<p><img src="image-20210716113426524.png"></p>
<p>平滑的QPS曲线，对于服务器来说是更友好的。</p>
<p><strong>案例</strong></p>
<p>需求：给&#x2F;order&#x2F;{orderId}这个资源设置限流，最大QPS为10，利用排队的流控效果，超时时长设置为5s</p>
<h4 id="1）添加流控规则"><a href="#1）添加流控规则" class="headerlink" title="1）添加流控规则"></a>1）添加流控规则</h4><p><img src="image-20210716114048918.png"></p>
<h4 id="2）Jmeter测试-1"><a href="#2）Jmeter测试-1" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《流控效果，队列》：</p>
<p><img src="image-20210716114243558.png"></p>
<p>QPS为15，已经超过了我们设定的10。</p>
<p>如果是之前的 快速失败、warmup模式，超出的请求应该会直接报错。</p>
<p>但是我们看看队列模式的运行结果：</p>
<p><img src="image-20210716114429361.png"></p>
<p>全部都通过了。</p>
<p>再去sentinel查看实时监控的QPS曲线：</p>
<p><img src="image-20210716114522935.png"></p>
<p>QPS非常平滑，一致保持在10，但是超出的请求没有被拒绝，而是放入队列。因此<strong>响应时间</strong>（等待时间）会越来越长。</p>
<p>当队列满了以后，才会有部分请求失败：</p>
<p><img src="image-20210716114651137.png"></p>
<h3 id="2-3-3-总结"><a href="#2-3-3-总结" class="headerlink" title="2.3.3.总结"></a>2.3.3.总结</h3><p>流控效果有哪些？</p>
<ul>
<li><p>快速失败：QPS超过阈值时，拒绝新的请求</p>
</li>
<li><p>warm up： QPS超过阈值时，拒绝新的请求；QPS阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。</p>
</li>
<li><p>排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求；如果请求预期等待时长大于超时时间，直接拒绝</p>
</li>
</ul>
<h2 id="2-4-热点参数限流"><a href="#2-4-热点参数限流" class="headerlink" title="2.4.热点参数限流"></a>2.4.热点参数限流</h2><p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是<strong>分别统计参数值相同的请求</strong>，判断是否超过QPS阈值。</p>
<h3 id="2-4-1-全局参数限流"><a href="#2-4-1-全局参数限流" class="headerlink" title="2.4.1.全局参数限流"></a>2.4.1.全局参数限流</h3><p>例如，一个根据id查询商品的接口：</p>
<p><img src="image-20210716115014663.png"></p>
<p>访问&#x2F;goods&#x2F;{id}的请求中，id参数值会有变化，热点参数限流会根据参数值分别统计QPS，统计结果：</p>
<p><img src="image-20210716115131463.png"></p>
<p>当id&#x3D;1的请求触发阈值被限流时，id值不为1的请求不受影响。</p>
<p>配置示例：</p>
<p><img src="image-20210716115232426.png"></p>
<p>代表的含义是：对hot这个资源的0号参数（第一个参数）做统计，每1秒<strong>相同参数值</strong>的请求数不能超过5</p>
<h3 id="2-4-2-热点参数限流"><a href="#2-4-2-热点参数限流" class="headerlink" title="2.4.2.热点参数限流"></a>2.4.2.热点参数限流</h3><p>刚才的配置中，对查询商品这个接口的所有商品一视同仁，QPS都限定为5.</p>
<p>而在实际开发中，可能部分商品是热点商品，例如秒杀商品，我们希望这部分商品的QPS限制与其它商品不一样，高一些。那就需要配置热点参数限流的高级选项了：</p>
<p><img src="image-20210716115717523.png"></p>
<p>结合上一个配置，这里的含义是对0号的long类型参数限流，每1秒相同参数的QPS不能超过5，有两个例外：</p>
<p>•如果参数值是100，则每1秒允许的QPS为10</p>
<p>•如果参数值是101，则每1秒允许的QPS为15</p>
<h3 id="2-4-4-案例"><a href="#2-4-4-案例" class="headerlink" title="2.4.4.案例"></a>2.4.4.案例</h3><p><strong>案例需求</strong>：给&#x2F;order&#x2F;{orderId}这个资源添加热点参数限流，规则如下：</p>
<p>•默认的热点参数规则是每1秒请求量不超过2</p>
<p>•给102这个参数设置例外：每1秒请求量不超过4</p>
<p>•给103这个参数设置例外：每1秒请求量不超过10</p>
<p><strong>注意事项</strong>：热点参数限流对默认的SpringMVC资源无效，需要利用@SentinelResource注解标记资源</p>
<h4 id="1）标记资源"><a href="#1）标记资源" class="headerlink" title="1）标记资源"></a>1）标记资源</h4><p>给order-service中的OrderController中的&#x2F;order&#x2F;{orderId}资源添加注解：</p>
<p><img src="image-20210716120033572.png"></p>
<h4 id="2）热点参数限流规则"><a href="#2）热点参数限流规则" class="headerlink" title="2）热点参数限流规则"></a>2）热点参数限流规则</h4><p>访问该接口，可以看到我们标记的hot资源出现了：</p>
<p><img src="image-20210716120208509.png"></p>
<p>这里不要点击hot后面的按钮，页面有BUG</p>
<p>点击左侧菜单中<strong>热点规则</strong>菜单：</p>
<p><img src="image-20210716120319009.png"></p>
<p>点击新增，填写表单：</p>
<p><img src="image-20210716120536714.png"></p>
<h4 id="3）Jmeter测试"><a href="#3）Jmeter测试" class="headerlink" title="3）Jmeter测试"></a>3）Jmeter测试</h4><p>选择《热点参数限流 QPS1》：</p>
<p><img src="image-20210716120754527.png"></p>
<p>这里发起请求的QPS为5.</p>
<p>包含3个http请求：</p>
<p>普通参数，QPS阈值为2</p>
<p><img src="image-20210716120840501.png"></p>
<p>运行结果：</p>
<p><img src="image-20210716121105567.png"></p>
<p>例外项，QPS阈值为4</p>
<p><img src="image-20210716120900365.png"></p>
<p>运行结果：</p>
<p><img src="image-20210716121201630.png"></p>
<p>例外项，QPS阈值为10</p>
<p><img src="image-20210716120919131.png"></p>
<p>运行结果：</p>
<p><img src="image-20210716121220305.png"></p>
<h1 id="3-隔离和降级"><a href="#3-隔离和降级" class="headerlink" title="3.隔离和降级"></a>3.隔离和降级</h1><p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。</p>
<p>而要将这些故障控制在一定范围，避免雪崩，就要靠<strong>线程隔离</strong>（舱壁模式）和<strong>熔断降级</strong>手段了。</p>
<p><strong>线程隔离</strong>之前讲到过：调用者在调用服务提供者时，给每个调用的请求分配独立线程池，出现故障时，最多消耗这个线程池内资源，避免把调用者的所有资源耗尽。</p>
<p><img src="image-20210715173215243.png"></p>
<p><strong>熔断降级</strong>：是在调用方这边加入断路器，统计对服务提供者的调用，如果调用的失败比例过高，则熔断该业务，不允许访问该服务的提供者了。</p>
<p><img src="image-20210715173428073.png"></p>
<p>可以看到，不管是线程隔离还是熔断降级，都是对<strong>客户端</strong>（调用方）的保护。需要在<strong>调用方</strong> 发起远程调用时做线程隔离、或者服务熔断。</p>
<p>而我们的微服务远程调用都是基于Feign来完成的，因此我们需要将Feign与Sentinel整合，在Feign里面实现线程隔离和服务熔断。</p>
<h2 id="3-1-FeignClient整合Sentinel"><a href="#3-1-FeignClient整合Sentinel" class="headerlink" title="3.1.FeignClient整合Sentinel"></a>3.1.FeignClient整合Sentinel</h2><p>SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel。</p>
<h3 id="3-1-1-修改配置，开启sentinel功能"><a href="#3-1-1-修改配置，开启sentinel功能" class="headerlink" title="3.1.1.修改配置，开启sentinel功能"></a>3.1.1.修改配置，开启sentinel功能</h3><p>修改OrderService的application.yml文件，开启Feign的Sentinel功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对sentinel的支持</span></span><br></pre></td></tr></table></figure>



<h3 id="3-1-2-编写失败降级逻辑"><a href="#3-1-2-编写失败降级逻辑" class="headerlink" title="3.1.2.编写失败降级逻辑"></a>3.1.2.编写失败降级逻辑</h3><p>业务失败后，不能直接报错，而应该返回用户一个友好提示或者默认结果，这个就是失败降级逻辑。</p>
<p>给FeignClient编写失败后的降级逻辑</p>
<p>①方式一：FallbackClass，无法对远程调用的异常做处理</p>
<p>②方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种</p>
<p>这里我们演示方式二的失败降级处理。</p>
<p><strong>步骤一</strong>：在feing-api项目中定义类，实现FallbackFactory：</p>
<p><img src="image-20210716122403502.png"></p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.feign.clients.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.clients.UserClient;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.pojo.User;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;查询用户异常&quot;</span>, throwable);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>步骤二</strong>：在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserClientFallbackFactory <span class="title function_">userClientFallbackFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClientFallbackFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤三</strong>：在feing-api项目中的UserClient接口中使用UserClientFallbackFactory：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.feign.clients.fallback.UserClientFallbackFactory;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>重启后，访问一次订单查询业务，然后查看sentinel控制台，可以看到新的簇点链路：</p>
<p><img src="image-20210716123705780.png"></p>
<h3 id="3-1-3-总结"><a href="#3-1-3-总结" class="headerlink" title="3.1.3.总结"></a>3.1.3.总结</h3><p>Sentinel支持的雪崩解决方案：</p>
<ul>
<li>线程隔离（仓壁模式）</li>
<li>降级熔断</li>
</ul>
<p>Feign整合Sentinel的步骤：</p>
<ul>
<li>在application.yml中配置：feign.sentienl.enable&#x3D;true</li>
<li>给FeignClient编写FallbackFactory并注册为Bean</li>
<li>将FallbackFactory配置到FeignClient</li>
</ul>
<h2 id="3-2-线程隔离（舱壁模式）"><a href="#3-2-线程隔离（舱壁模式）" class="headerlink" title="3.2.线程隔离（舱壁模式）"></a>3.2.线程隔离（舱壁模式）</h2><h3 id="3-2-1-线程隔离的实现方式"><a href="#3-2-1-线程隔离的实现方式" class="headerlink" title="3.2.1.线程隔离的实现方式"></a>3.2.1.线程隔离的实现方式</h3><p>线程隔离有两种方式实现：</p>
<ul>
<li><p>线程池隔离</p>
</li>
<li><p>信号量隔离（Sentinel默认采用）</p>
</li>
</ul>
<p>如图：</p>
<p><img src="image-20210716123036937.png"></p>
<p><strong>线程池隔离</strong>：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</p>
<p><strong>信号量隔离</strong>：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。</p>
<p>两者的优缺点：</p>
<p><img src="image-20210716123240518.png"></p>
<h3 id="3-2-2-sentinel的线程隔离"><a href="#3-2-2-sentinel的线程隔离" class="headerlink" title="3.2.2.sentinel的线程隔离"></a>3.2.2.sentinel的线程隔离</h3><p><strong>用法说明</strong>：</p>
<p>在添加限流规则时，可以选择两种阈值类型：</p>
<p><img src="image-20210716123411217.png"></p>
<ul>
<li><p>QPS：就是每秒的请求数，在快速入门中已经演示过</p>
</li>
<li><p>线程数：是该资源能使用用的tomcat线程数的最大值。也就是通过限制线程数量，实现<strong>线程隔离</strong>（舱壁模式）。</p>
</li>
</ul>
<p><strong>案例需求</strong>：给 order-service服务中的UserClient的查询用户接口设置流控规则，线程数不能超过 2。然后利用jemeter测试。</p>
<h4 id="1）配置隔离规则"><a href="#1）配置隔离规则" class="headerlink" title="1）配置隔离规则"></a>1）配置隔离规则</h4><p>选择feign接口后面的流控按钮：</p>
<p><img src="image-20210716123831992.png"></p>
<p>填写表单：</p>
<p><img src="image-20210716123936844.png"></p>
<h4 id="2）Jmeter测试-2"><a href="#2）Jmeter测试-2" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《阈值类型-线程数&lt;2》：</p>
<p><img src="image-20210716124229894.png"></p>
<p>一次发生10个请求，有较大概率并发线程数超过2，而超出的请求会走之前定义的失败降级逻辑。</p>
<p>查看运行结果：</p>
<p><img src="image-20210716124147820.png"></p>
<p>发现虽然结果都是通过了，不过部分请求得到的响应是降级返回的null信息。</p>
<h3 id="3-2-3-总结"><a href="#3-2-3-总结" class="headerlink" title="3.2.3.总结"></a>3.2.3.总结</h3><p>线程隔离的两种手段是？</p>
<ul>
<li><p>信号量隔离</p>
</li>
<li><p>线程池隔离</p>
</li>
</ul>
<p>信号量隔离的特点是？</p>
<ul>
<li>基于计数器模式，简单，开销小</li>
</ul>
<p>线程池隔离的特点是？</p>
<ul>
<li>基于线程池模式，有额外开销，但隔离控制更强</li>
</ul>
<h2 id="3-3-熔断降级"><a href="#3-3-熔断降级" class="headerlink" title="3.3.熔断降级"></a>3.3.熔断降级</h2><p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p>
<p>断路器控制熔断和放行是通过状态机来完成的：</p>
<p><img src="image-20210716130958518.png"></p>
<p>状态机包括三个状态：</p>
<ul>
<li>closed：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li>
<li>open：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态5秒后会进入half-open状态</li>
<li>half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。<ul>
<li>请求成功：则切换到closed状态</li>
<li>请求失败：则切换到open状态</li>
</ul>
</li>
</ul>
<p>断路器熔断策略有三种：慢调用、异常比例、异常数</p>
<h3 id="3-3-1-慢调用"><a href="#3-3-1-慢调用" class="headerlink" title="3.3.1.慢调用"></a>3.3.1.慢调用</h3><p><strong>慢调用</strong>：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。</p>
<p>例如：</p>
<p><img src="image-20210716145934347.png"></p>
<p>解读：RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次，并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</p>
<p><strong>案例</strong></p>
<p>需求：给 UserClient的查询用户接口设置降级规则，慢调用的RT阈值为50ms，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5</p>
<h4 id="1）设置慢调用"><a href="#1）设置慢调用" class="headerlink" title="1）设置慢调用"></a>1）设置慢调用</h4><p>修改user-service中的&#x2F;user&#x2F;{id}这个接口的业务。通过休眠模拟一个延迟时间：</p>
<p><img src="image-20210716150234787.png"></p>
<p>此时，orderId&#x3D;101的订单，关联的是id为1的用户，调用时长为60ms：</p>
<p><img src="image-20210716150510956.png"></p>
<p>orderId&#x3D;102的订单，关联的是id为2的用户，调用时长为非常短；</p>
<p><img src="image-20210716150605208.png"></p>
<h4 id="2）设置熔断规则"><a href="#2）设置熔断规则" class="headerlink" title="2）设置熔断规则"></a>2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p>
<p><img src="image-20210716150654094.png"></p>
<p>规则：</p>
<p><img src="image-20210716150740434.png" alt="image-20210716150740434"></p>
<p>超过50ms的请求都会被认为是慢请求</p>
<h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>在浏览器访问：<a href="http://localhost:8088/order/101%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%EF%BC%9A">http://localhost:8088/order/101，快速刷新5次，可以发现：</a></p>
<p><img src="image-20210716150911004.png"></p>
<p>触发了熔断，请求时长缩短至5ms，快速失败了，并且走降级逻辑，返回的null</p>
<p>在浏览器访问：<a href="http://localhost:8088/order/102%EF%BC%8C%E7%AB%9F%E7%84%B6%E4%B9%9F%E8%A2%AB%E7%86%94%E6%96%AD%E4%BA%86%EF%BC%9A">http://localhost:8088/order/102，竟然也被熔断了：</a></p>
<p><img src="image-20210716151107785.png"></p>
<h3 id="3-3-2-异常比例、异常数"><a href="#3-3-2-异常比例、异常数" class="headerlink" title="3.3.2.异常比例、异常数"></a>3.3.2.异常比例、异常数</h3><p><strong>异常比例或异常数</strong>：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p>
<p>例如，一个异常比例设置：</p>
<p><img src="image-20210716131430682.png"></p>
<p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.4，则触发熔断。</p>
<p>一个异常数设置：</p>
<p><img src="image-20210716131522912.png"></p>
<p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于2次，则触发熔断。</p>
<p><strong>案例</strong></p>
<p>需求：给 UserClient的查询用户接口设置降级规则，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5s</p>
<h4 id="1）设置异常请求"><a href="#1）设置异常请求" class="headerlink" title="1）设置异常请求"></a>1）设置异常请求</h4><p>首先，修改user-service中的&#x2F;user&#x2F;{id}这个接口的业务。手动抛出异常，以触发异常比例的熔断：</p>
<p><img src="image-20210716151348183.png"></p>
<p>也就是说，id 为 2时，就会触发异常</p>
<h4 id="2）设置熔断规则-1"><a href="#2）设置熔断规则-1" class="headerlink" title="2）设置熔断规则"></a>2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p>
<p><img src="image-20210716150654094.png"></p>
<p>规则：</p>
<p><img src="image-20210716151538785.png"></p>
<p>在5次请求中，只要异常比例超过0.4，也就是有2次以上的异常，就会触发熔断。</p>
<h4 id="3）测试-1"><a href="#3）测试-1" class="headerlink" title="3）测试"></a>3）测试</h4><p>在浏览器快速访问：<a href="http://localhost:8088/order/102%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E8%A7%A6%E5%8F%91%E7%86%94%E6%96%AD%EF%BC%9A">http://localhost:8088/order/102，快速刷新5次，触发熔断：</a></p>
<p><img src="image-20210716151722916.png"></p>
<p>此时，我们去访问本来应该正常的103：</p>
<p><img src="image-20210716151844817.png"></p>
<h1 id="4-授权规则"><a href="#4-授权规则" class="headerlink" title="4.授权规则"></a>4.授权规则</h1><p>授权规则可以对请求方来源做判断和控制。</p>
<h2 id="4-1-授权规则"><a href="#4-1-授权规则" class="headerlink" title="4.1.授权规则"></a>4.1.授权规则</h2><h3 id="4-1-1-基本规则"><a href="#4-1-1-基本规则" class="headerlink" title="4.1.1.基本规则"></a>4.1.1.基本规则</h3><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p>
<ul>
<li><p>白名单：来源（origin）在白名单内的调用者允许访问</p>
</li>
<li><p>黑名单：来源（origin）在黑名单内的调用者不允许访问</p>
</li>
</ul>
<p>点击左侧菜单的授权，可以看到授权规则：</p>
<p><img src="image-20210716152010750.png"></p>
<ul>
<li><p>资源名：就是受保护的资源，例如&#x2F;order&#x2F;{orderId}</p>
</li>
<li><p>流控应用：是来源者的名单，</p>
<ul>
<li>如果是勾选白名单，则名单中的来源被许可访问。</li>
<li>如果是勾选黑名单，则名单中的来源被禁止访问。</li>
</ul>
</li>
</ul>
<p>比如：</p>
<p><img src="image-20210716152349191.png"></p>
<p>我们允许请求从gateway到order-service，不允许浏览器访问order-service，那么白名单中就要填写<strong>网关的来源名称（origin）</strong>。</p>
<h3 id="4-1-2-如何获取origin"><a href="#4-1-2-如何获取origin" class="headerlink" title="4.1.2.如何获取origin"></a>4.1.2.如何获取origin</h3><p>Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从请求request对象中获取origin，获取方式自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法的作用就是从request对象中，获取请求者的origin值并返回。</p>
<p>默认情况下，sentinel不管请求者从哪里来，返回值永远是default，也就是说一切请求的来源都被认为是一样的值default。</p>
<p>因此，我们需要自定义这个接口的实现，让<strong>不同的请求，返回不同的origin</strong>。</p>
<p>例如order-service服务中，我们定义一个RequestOriginParser的实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.sentinel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.RequestOriginParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderOriginParser</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(origin)) &#123;</span><br><span class="line">            origin = <span class="string">&quot;blank&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们会尝试从request-header中获取origin值。</p>
<h3 id="4-1-3-给网关添加请求头"><a href="#4-1-3-给网关添加请求头" class="headerlink" title="4.1.3.给网关添加请求头"></a>4.1.3.给网关添加请求头</h3><p>既然获取请求origin的方式是从reques-header中获取origin值，我们必须让<strong>所有从gateway路由到微服务的请求都带上origin头</strong>。</p>
<p>这个需要利用之前学习的一个GatewayFilter来实现，AddRequestHeaderGatewayFilter。</p>
<p>修改gateway服务中的application.yml，添加一个defaultFilter：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=origin,gateway</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="comment"># ...略</span></span><br></pre></td></tr></table></figure>

<p>这样，从gateway路由的所有请求都会带上origin头，值为gateway。而从其它地方到达微服务的请求则没有这个头。</p>
<h3 id="4-1-4-配置授权规则"><a href="#4-1-4-配置授权规则" class="headerlink" title="4.1.4.配置授权规则"></a>4.1.4.配置授权规则</h3><p>接下来，我们添加一个授权规则，放行origin值为gateway的请求。</p>
<p><img src="image-20210716153250134.png"></p>
<p>配置如下：</p>
<p><img src="image-20210716153301069.png"></p>
<p>现在，我们直接跳过网关，访问order-service服务：</p>
<p><img src="image-20210716153348396.png"></p>
<p>通过网关访问：</p>
<p><img src="image-20210716153434095.png"></p>
<h2 id="4-2-自定义异常结果"><a href="#4-2-自定义异常结果" class="headerlink" title="4.2.自定义异常结果"></a>4.2.自定义异常结果</h2><p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。异常结果都是flow limmiting（限流）。这样不够友好，无法得知是限流还是降级还是授权拦截。</p>
<h3 id="4-2-1-异常类型"><a href="#4-2-1-异常类型" class="headerlink" title="4.2.1.异常类型"></a>4.2.1.异常类型</h3><p>而如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求被限流、降级、授权拦截时抛出的异常：BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法有三个参数：</p>
<ul>
<li>HttpServletRequest request：request对象</li>
<li>HttpServletResponse response：response对象</li>
<li>BlockException e：被sentinel拦截时抛出的异常</li>
</ul>
<p>这里的BlockException包含多个不同的子类：</p>
<table>
<thead>
<tr>
<th><strong>异常</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>FlowException</td>
<td>限流异常</td>
</tr>
<tr>
<td>ParamFlowException</td>
<td>热点参数限流的异常</td>
</tr>
<tr>
<td>DegradeException</td>
<td>降级异常</td>
</tr>
<tr>
<td>AuthorityException</td>
<td>授权规则异常</td>
</tr>
<tr>
<td>SystemBlockException</td>
<td>系统规则异常</td>
</tr>
</tbody></table>
<h3 id="4-2-2-自定义异常处理"><a href="#4-2-2-自定义异常处理" class="headerlink" title="4.2.2.自定义异常处理"></a>4.2.2.自定义异常处理</h3><p>下面，我们就在order-service定义一个自定义异常处理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.sentinel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.BlockExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;未知异常&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">429</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被限流了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被热点参数限流&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被降级了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;没有权限访问&quot;</span>;</span><br><span class="line">            status = <span class="number">401</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.setStatus(status);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&#123;\&quot;msg\&quot;: &quot;</span> + msg + <span class="string">&quot;, \&quot;status\&quot;: &quot;</span> + status + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>重启测试，在不同场景下，会返回不同的异常消息.</p>
<p>限流：</p>
<p><img src="image-20210716153938887.png"></p>
<p>授权拦截时：</p>
<p><img src="image-20210716154012736.png"></p>
<h1 id="5-规则持久化"><a href="#5-规则持久化" class="headerlink" title="5.规则持久化"></a>5.规则持久化</h1><p>现在，sentinel的所有规则都是内存存储，重启后所有规则都会丢失。在生产环境下，我们必须确保这些规则的持久化，避免丢失。</p>
<h2 id="5-1-规则管理模式"><a href="#5-1-规则管理模式" class="headerlink" title="5.1.规则管理模式"></a>5.1.规则管理模式</h2><p>规则是否能持久化，取决于规则管理模式，sentinel支持三种规则管理模式：</p>
<ul>
<li>原始模式：Sentinel的默认模式，将规则保存在内存，重启服务会丢失。</li>
<li>pull模式</li>
<li>push模式</li>
</ul>
<h3 id="5-1-1-pull模式"><a href="#5-1-1-pull模式" class="headerlink" title="5.1.1.pull模式"></a>5.1.1.pull模式</h3><p>pull模式：控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。</p>
<p><img src="image-20210716154155238.png"></p>
<h3 id="5-1-2-push模式"><a href="#5-1-2-push模式" class="headerlink" title="5.1.2.push模式"></a>5.1.2.push模式</h3><p>push模式：控制台将配置规则推送到远程配置中心，例如Nacos。Sentinel客户端监听Nacos，获取配置变更的推送消息，完成本地配置更新。</p>
<p><img src="image-20210716154215456.png"></p>
<h2 id="5-2-实现push模式"><a href="#5-2-实现push模式" class="headerlink" title="5.2.实现push模式"></a>5.2.实现push模式</h2><p>见下篇博客：sentinel规则持久化</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务保护：resilience4j</title>
    <url>/2024/09/14/12Resilience4J%E7%86%94%E6%96%AD%E3%80%81%E9%99%90%E6%B5%81%E3%80%81%E9%87%8D%E8%AF%95/</url>
    <content><![CDATA[<h1 id="resilience4j"><a href="#resilience4j" class="headerlink" title="resilience4j"></a>resilience4j</h1><p>在 Spring Cloud 中使用 Resilience4J 断路器进行配置非常直观。下面我会提供一个简单的示例，展示如何在 Spring Boot 应用程序中配置 Resilience4J 断路器。</p>
<h1 id="一、circuitbreaker（断路器）"><a href="#一、circuitbreaker（断路器）" class="headerlink" title="一、circuitbreaker（断路器）"></a>一、circuitbreaker（断路器）</h1><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>首先，确保你的项目中包含了必要的依赖。对于非响应式应用程序，你需要添加以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于响应式应用程序，则需要使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同时确保添加 Spring Cloud 的依赖管理：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2021.0.4<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-配置-Resilience4J"><a href="#2-配置-Resilience4J" class="headerlink" title="2. 配置 Resilience4J"></a>2. 配置 Resilience4J</h2><p>接下来，在 <code>application.yml</code> 或 <code>application.properties</code> 文件中添加 Resilience4J 的配置。这里以 <code>application.yml</code> 为例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://product-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/products/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CircuitBreaker</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">myService</span></span><br><span class="line">                <span class="attr">fallbackUri:</span> <span class="string">forward:/fallback</span></span><br><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="attr">circuitbreaker:</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span>	<span class="comment"># 定义默认配置</span></span><br><span class="line">        <span class="attr">failureRateThreshold:</span> <span class="number">50</span> <span class="comment"># 当失败率达到50%时打开断路器</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">5</span> <span class="comment"># 最小请求数量</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="string">5s</span> <span class="comment"># 断路器处于打开状态等待重试的时间</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">2</span> <span class="comment"># 半开状态下允许尝试的请求次数</span></span><br><span class="line">        <span class="attr">automaticTransitionFromOpenToHalfOpenEnabled:</span> <span class="literal">true</span> <span class="comment"># 是否自动从打开转为半开状态</span></span><br><span class="line">        <span class="attr">eventConsumerBufferSize:</span> <span class="number">10</span> <span class="comment"># 缓冲区大小</span></span><br><span class="line">      <span class="attr">myCustomConfig:</span> <span class="comment"># 定义自定义配置</span></span><br><span class="line">        <span class="attr">failureRateThreshold:</span> <span class="number">60</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">automaticTransitionFromOpenToHalfOpenEnabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">eventConsumerBufferSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="attr">myService:</span> <span class="comment"># 应用到特定的服务实例</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">registerHealthIndicator:</span> <span class="literal">true</span> <span class="comment"># 注册健康指标</span></span><br><span class="line">        <span class="comment"># 可以覆盖上面的默认配置</span></span><br><span class="line">        <span class="comment"># failureRateThreshold: 70</span></span><br><span class="line">        <span class="comment"># minimumNumberOfCalls: 15</span></span><br><span class="line">        <span class="comment"># waitDurationInOpenState: 15s</span></span><br><span class="line">        <span class="comment"># permittedNumberOfCallsInHalfOpenState: 4</span></span><br><span class="line">        <span class="comment"># automaticTransitionFromOpenToHalfOpenEnabled: true</span></span><br><span class="line">        <span class="comment"># eventConsumerBufferSize: 25</span></span><br><span class="line"><span class="comment"># 日志记录配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io.github.resilience4j:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<h2 id="3-使用断路器"><a href="#3-使用断路器" class="headerlink" title="3. 使用断路器"></a>3. 使用断路器</h2><p>你可以在 Feign 客户端或 OpenFeign 中使用 Resilience4J 断路器，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;myService&quot;, configuration = MyFeignConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/data&quot;)</span></span><br><span class="line">    String <span class="title function_">getData</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Feign.Builder <span class="title function_">feignBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Feign.builder()</span><br><span class="line">            .client(<span class="keyword">new</span> <span class="title class_">OkHttpClient</span>())</span><br><span class="line">            .encoder(<span class="keyword">new</span> <span class="title class_">JacksonEncoder</span>())</span><br><span class="line">            .decoder(<span class="keyword">new</span> <span class="title class_">JacksonDecoder</span>())</span><br><span class="line">            .contract(<span class="keyword">new</span> <span class="title class_">SpringMvcContract</span>())</span><br><span class="line">            .errorDecoder((status, response) -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Error: &quot;</span> + status))</span><br><span class="line">            .target(MyFeignClient.class, <span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Resilience4J 断路器</span></span><br><span class="line">        <span class="keyword">return</span> feignBuilder().requestInterceptor(<span class="keyword">new</span> <span class="title class_">Resilience4JCircuitBreakerRequestInterceptor</span>(<span class="string">&quot;myService&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-日志记录"><a href="#4-日志记录" class="headerlink" title="4. 日志记录"></a>4. 日志记录</h2><p>在上面的配置中，我们还设置了日志级别，这样可以查看 Resilience4J 的日志输出。</p>
<h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>确保你的服务能够正常启动，并且可以通过断路器调用远程服务。你可以模拟远程服务的故障来测试断路器是否能够正确地打开和关闭。</p>
<p>以上步骤应该可以帮助你在 Spring Cloud 项目中配置 Resilience4J 断路器。如果有任何具体的需求或者遇到问题，请随时告诉我。</p>
<h1 id="二、Rate-Limiter（限流器）"><a href="#二、Rate-Limiter（限流器）" class="headerlink" title="二、Rate Limiter（限流器）"></a>二、Rate Limiter（限流器）</h1><p>在 Spring Cloud 中使用 Resilience4J 进行限流配置是非常直观的。下面我将向您展示如何在 Spring Boot 应用程序中配置 Resilience4J 的 Rate Limiter（限流器）。</p>
<h2 id="1-配置-Resilience4J"><a href="#1-配置-Resilience4J" class="headerlink" title="1. 配置 Resilience4J"></a>1. 配置 Resilience4J</h2><p>接下来，在 <code>application.yml</code> 或 <code>application.properties</code> 文件中添加 Resilience4J 的配置。这里以 <code>application.yml</code> 为例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="attr">ratelimiter:</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">limitForPeriod:</span> <span class="number">10</span> <span class="comment"># 在限流周期内允许的最大请求数量</span></span><br><span class="line">        <span class="attr">limitRefreshPeriod:</span> <span class="string">5s</span> <span class="comment"># 限流周期时长</span></span><br><span class="line">        <span class="attr">timeoutDuration:</span> <span class="string">0ms</span> <span class="comment"># 超时持续时间，0 表示不限制</span></span><br><span class="line">      <span class="attr">myCustomConfig:</span> <span class="comment"># 自定义配置</span></span><br><span class="line">        <span class="attr">limitForPeriod:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">limitRefreshPeriod:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">timeoutDuration:</span> <span class="string">500ms</span></span><br><span class="line">  <span class="comment">#rate-limiter:</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="attr">myService:</span> <span class="comment"># 应用到特定的服务实例</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="comment"># 可以覆盖上面的默认配置</span></span><br><span class="line">        <span class="comment"># limitForPeriod: 15</span></span><br><span class="line">        <span class="comment"># limitRefreshPeriod: 15s</span></span><br><span class="line">        <span class="comment"># timeoutDuration: 1s</span></span><br></pre></td></tr></table></figure>

<h2 id="2-使用限流器"><a href="#2-使用限流器" class="headerlink" title="2. 使用限流器"></a>2. 使用限流器</h2><p>要在代码中使用限流器，你可以通过注入 <code>RateLimiter</code> 来实现。下面是一个简单的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.github.resilience4j.ratelimiter.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> io.github.resilience4j.ratelimiter.RateLimiterConfig;</span><br><span class="line"><span class="keyword">import</span> io.github.resilience4j.ratelimiter.RateLimiterRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RateLimiterRegistry rateLimiterRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取名为 &quot;myService&quot; 的 RateLimiter 实例</span></span><br><span class="line">        <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> rateLimiterRegistry.rateLimiter(<span class="string">&quot;myService&quot;</span>);</span><br><span class="line">        <span class="comment">// 尝试获取权限</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allowed</span> <span class="operator">=</span> rateLimiter.acquirePermission();</span><br><span class="line">        <span class="keyword">if</span> (!allowed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Rate limit exceeded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在这里执行业务逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-请求限流"><a href="#3-请求限流" class="headerlink" title="3. 请求限流"></a>3. 请求限流</h2><p>​		在高并发的系统中，往往需要在系统中做限流，一方面是为了防止大量的请求使服务器过载，导致服务不可用，另一方面是为了防止网络攻击。</p>
<p>​		一般开发高并发系统常见的限流有：限制总并发数（比如数据库连接池、线程池）、限制瞬时并发数（如 nginx 的 limit_conn 模块，用来限制瞬时并发连接数）、限制时间窗口内的平均速率（如 Guava 的 RateLimiter、nginx 的 limit_req 模块，限制每秒的平均速率）；其他还有如限制远程接口调用速率、限制 MQ 的消费速率。另外还可以根据网络连接数、网络流量、CPU 或内存负载等来限流。</p>
<ul>
<li><strong>限流算法</strong></li>
</ul>
<ol>
<li>计数器</li>
</ol>
<p>​		简单的做法是维护一个单位时间内的 计数器，每次请求计数器加1，当单位时间内计数器累加到大于设定的阈值，则之后的请求都被拒绝，直到单位时间已经过去，再将 计数器 重置为零。此方式有个弊端：如果在单位时间1s内允许100个请求，在10ms已经通过了100个请求，那后面的990ms，只能眼巴巴的把请求拒绝，我们把这种现象称为“突刺现象”。</p>
<p>​		常用的更平滑的限流算法有两种：<strong>漏桶算法</strong> 和 <strong>令牌桶算法</strong>。下面介绍下二者。</p>
<ol start="2">
<li>漏桶算法</li>
</ol>
<p>​		漏桶算法思路很简单，水（请求）先进入到漏桶里，漏桶以一定的速度出水（接口有响应速率），当水流入速度过大会直接溢出（访问频率超过接口响应速率），然后就拒绝请求，可以看出漏桶算法能强行限制数据的传输速率。</p>
<p>​		可见这里有两个变量，一个是桶的大小，支持流量突发增多时可以存多少的水（burst），另一个是水桶漏洞的大小（rate）。因为漏桶的漏出速率是固定的参数，所以，即使网络中不存在资源冲突（没有发生拥塞），漏桶算法也不能使流突发（burst）到端口速率。因此，漏桶算法对于存在突发特性的流量来说缺乏效率。</p>
<ol start="3">
<li>令牌桶算法</li>
</ol>
<p>​		令牌桶算法 和漏桶算法 效果一样但方向相反的算法，更加容易理解。随着时间流逝，系统会按恒定 1&#x2F;QPS 时间间隔（如果 QPS&#x3D;100，则间隔是 10ms）往桶里加入 Token（想象和漏洞漏水相反，有个水龙头在不断的加水），如果桶已经满了就不再加了。新请求来临时，会各自拿走一个 Token，如果没有 Token 可拿了就阻塞或者拒绝服务。</p>
<p>​		令牌桶的另外一个好处是可以方便的改变速度。一旦需要提高速率，则按需提高放入桶中的令牌的速率。一般会定时（比如 100 毫秒）往桶中增加一定数量的令牌，有些变种算法则实时的计算应该增加的令牌的数量。</p>
<ul>
<li><strong>限流实现</strong></li>
</ul>
<p>​		在 Spring Cloud Gateway 上实现限流是个不错的选择，只需要编写一个过滤器就可以了。有了前边过滤器的基础，写起来很轻松。</p>
<p>Spring Cloud Gateway 已经内置了一个RequestRateLimiterGatewayFilterFactory，我们可以直接使用。</p>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 熔断（断路）器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifatId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">limit_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org:80/get</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">After=2019-02-26T00:00:00+08:00[Asia/Shanghai]</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">              <span class="attr">key-resolver:</span> <span class="string">&#x27;#&#123;@hostAddrKeyResolver&#125;&#x27;</span></span><br><span class="line">              <span class="attr">redis-rate-limiter:</span></span><br><span class="line">              	<span class="attr">replenishRate:</span> <span class="number">1</span></span><br><span class="line">              	<span class="attr">burstCapacity:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@hostAddrKeyResolver&#125;&quot;</span> <span class="comment"># SpEL,限流解析器的 Bean 对象的名字</span></span><br><span class="line">            <span class="attr">redis-rate-limiter:</span></span><br><span class="line">              <span class="attr">replenishRate:</span> <span class="number">10</span></span><br><span class="line">              <span class="attr">burstCapacity:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway-limiter</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>在上面的配置文件，配置了 redis的信息，并配置了RequestRateLimiter的限流过滤器，该过滤器需要配置三个参数：</p>
<ul>
<li>burstCapacity：令牌桶总容量。</li>
<li>replenishRate：令牌桶每秒填充平均速率。</li>
<li>key-resolver：用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。</li>
</ul>
<h3 id="IP限流"><a href="#IP限流" class="headerlink" title="IP限流"></a>IP限流</h3><p>获取请求用户ip作为限流key。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//Bean Name: hostAddrKeyResolver</span></span><br><span class="line"><span class="keyword">public</span> KeyResolver <span class="title function_">hostAddrKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="用户限流"><a href="#用户限流" class="headerlink" title="用户限流"></a>用户限流</h3><p>获取请求用户id作为限流key。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//Bean Name: userKeyResolver</span></span><br><span class="line"><span class="keyword">public</span> KeyResolver <span class="title function_">userKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;userId&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="接口限流"><a href="#接口限流" class="headerlink" title="接口限流"></a>接口限流</h3><p>获取请求地址的uri作为限流key。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span> <span class="comment">//Bean Name: apiKeyResolver</span></span><br><span class="line">KeyResolver <span class="title function_">apiKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getPath().value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-日志记录"><a href="#3-日志记录" class="headerlink" title="3. 日志记录"></a>3. 日志记录</h3><p>在上面的配置中，我们还可以设置日志级别，以便查看 Resilience4J 的日志输出：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io.github.resilience4j:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>

<h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>确保你的服务能够正常启动，并且限流规则生效。你可以尝试发送多个请求来测试限流器是否能够阻止超出配额的请求。</p>
<p>以上步骤应该可以帮助你在 Spring Cloud 项目中配置 Resilience4J 的限流器。如果有任何具体的需求或者遇到问题，请随时告诉我。</p>
<h1 id="三、Retry重试"><a href="#三、Retry重试" class="headerlink" title="三、Retry重试"></a>三、Retry重试</h1><p>Spring Cloud Gateway 可以与 Resilience4j 集成来实现请求级别的重试功能。为了在 Spring Cloud Gateway 中使用 Resilience4j 的重试功能，你需要配置 Resilience4j 和相应的过滤器。</p>
<p>以下是如何在 Spring Cloud Gateway 中配置默认过滤器（<code>DefaultFilter</code>）以启用 Resilience4j 重试功能的步骤和示例。</p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>确保你的项目中包含了 Spring Cloud Gateway 和 Resilience4j 的相关依赖。你可能需要添加如下 Maven 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.resilience4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resilience4j-spring-cloud-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;resilience4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>$&#123;resilience4j.version&#125;</code> 应该替换为 Resilience4j 的实际版本号。</p>
<h2 id="配置-Resilience4j"><a href="#配置-Resilience4j" class="headerlink" title="配置 Resilience4j"></a>配置 Resilience4j</h2><p>接下来，在你的应用配置文件（如 <code>application.yml</code> 或 <code>application.properties</code>）中配置 Resilience4j 的重试策略：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">resilience4j.retry:</span></span><br><span class="line">  <span class="attr">instances:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">maxRetryAttempts:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">waitDuration:</span> <span class="string">100ms</span></span><br><span class="line">      <span class="attr">exponentialBackoffMultiplier:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这里配置了一个名为 <code>default</code> 的重试实例，它将应用于所有未指定特定重试策略的服务路由。</p>
<h2 id="配置-Spring-Cloud-Gateway"><a href="#配置-Spring-Cloud-Gateway" class="headerlink" title="配置 Spring Cloud Gateway"></a>配置 Spring Cloud Gateway</h2><p>然后，你需要在 Spring Cloud Gateway 的配置中启用 Resilience4j 的重试过滤器。这可以通过全局配置或者针对特定路由进行配置。</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>如果你想让所有的路由都使用默认的重试策略，可以在全局配置中启用 Resilience4j Retry 过滤器：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Retry</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">RejectedExecutionHandler:</span> <span class="string">SimpleAsyncTaskExecutor</span></span><br><span class="line">            <span class="attr">Resilience4JConfigName:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>Resilience4JConfigName</code> 设置为 <code>default</code>，意味着使用上面配置的 <code>default</code> 实例。</p>
<h3 id="针对特定路由配置"><a href="#针对特定路由配置" class="headerlink" title="针对特定路由配置"></a>针对特定路由配置</h3><p>如果你想只为某些路由配置重试策略，可以在路由配置中单独指定：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://service1</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/service1/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Retry</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">RejectedExecutionHandler:</span> <span class="string">SimpleAsyncTaskExecutor</span></span><br><span class="line">                <span class="attr">Resilience4JConfigName:</span> <span class="string">service1</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Retry</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">RejectedExecutionHandler:</span> <span class="string">SimpleAsyncTaskExecutor</span></span><br><span class="line">            <span class="attr">Resilience4JConfigName:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，路由 <code>service1</code> 使用了一个名为 <code>service1</code> 的重试配置实例，而其他未指定的路由将使用默认的 <code>default</code> 配置。</p>
<p>确保在应用启动类中也启用了 Resilience4j 的自动配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebFlux</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上配置将允许 Spring Cloud Gateway 使用 Resilience4j 的重试机制处理请求。你可以根据自己的需求调整配置参数。</p>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务保护：sentinel规则持久化</title>
    <url>/2024/09/17/13sentinel%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Sentinel-规则持久化"><a href="#Sentinel-规则持久化" class="headerlink" title="Sentinel 规则持久化"></a>Sentinel 规则持久化</h1><h2 id="一、修改order-service服务"><a href="#一、修改order-service服务" class="headerlink" title="一、修改order-service服务"></a>一、修改order-service服务</h2><p>修改OrderService，让其监听Nacos中的sentinel规则配置。</p>
<p>具体步骤如下：</p>
<h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><p>在order-service中引入sentinel监听nacos的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-配置nacos地址"><a href="#2-配置nacos地址" class="headerlink" title="2.配置nacos地址"></a>2.配置nacos地址</h3><p>在order-service中的application.yml文件配置nacos地址及监听的配置信息：加的是datasource往下的内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">flow:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">orderservice-flow-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span> <span class="comment"># 还可以是：degrade、authority、param-flow</span></span><br><span class="line">        <span class="attr">degrade:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">orderservice-degrade-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">SENTINEL_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">degrade</span> <span class="comment"># 还可以是：degrade、authority、param-flow</span></span><br></pre></td></tr></table></figure>

<p><strong>dataId指定了nacos的存储的配置文件，在后续跑sentinel的四个功能的时候，nacos会自动添加这个配置的</strong></p>
<h2 id="二、修改sentinel-dashboard源码"><a href="#二、修改sentinel-dashboard源码" class="headerlink" title="二、修改sentinel-dashboard源码"></a>二、修改sentinel-dashboard源码</h2><p>SentinelDashboard默认不支持nacos的持久化，需要修改源码。</p>
<h3 id="1-下载源码包并解压"><a href="#1-下载源码包并解压" class="headerlink" title="1. 下载源码包并解压"></a>1. 下载源码包并解压</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># github地址，版本自选</span><br><span class="line">https://github.com/alibaba/Sentinel/tags</span><br></pre></td></tr></table></figure>

<p>解压sentinel源码包：</p>
<p><img src="image-20210618201340086.png"></p>
<p>然后并用IDEA打开这个项目，结构如下：</p>
<p><img src="image-20210618201412878.png"></p>
<h3 id="2-修改nacos依赖"><a href="#2-修改nacos依赖" class="headerlink" title="2. 修改nacos依赖"></a>2. 修改nacos依赖</h3><p>在sentinel-dashboard源码的pom文件中，nacos的依赖默认的scope是test，只能在测试时使用，这里要去除：</p>
<p><img src="image-20210618201607831.png"></p>
<p>将sentinel-datasource-nacos依赖的scope去掉：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-添加nacos支持"><a href="#3-添加nacos支持" class="headerlink" title="3. 添加nacos支持"></a>3. 添加nacos支持</h3><p>在sentinel-dashboard的test包下，已经编写了对nacos的支持，我们需要将其拷贝到main下。</p>
<p><img src="image-20210618201726280.png"></p>
<h3 id="4-修改nacos地址"><a href="#4-修改nacos地址" class="headerlink" title="4. 修改nacos地址"></a>4. 修改nacos地址</h3><p>然后，还需要修改测试代码中的NacosConfig类：</p>
<p><img src="image-20210618201912078.png"></p>
<p>修改其中的nacos地址，让其读取application.properties中的配置：</p>
<p><img src="image-20210618202047575.png"></p>
<p>在sentinel-dashboard的application.properties中添加nacos地址配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">nacos.addr</span>=<span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure>



<h3 id="5-配置nacos数据源"><a href="#5-配置nacos数据源" class="headerlink" title="5. 配置nacos数据源"></a>5. 配置nacos数据源</h3><p>另外，还需要修改com.alibaba.csp.sentinel.dashboard.controller.v2包下的FlowControllerV2类：</p>
<p><img src="image-20210618202322301.png"></p>
<p>让我们添加的Nacos数据源生效：</p>
<p><img src="image-20210618202334536.png"></p>
<h3 id="6-修改前端页面"><a href="#6-修改前端页面" class="headerlink" title="6. 修改前端页面"></a>6. 修改前端页面</h3><p>接下来，还要修改前端页面，添加一个支持nacos的菜单。</p>
<p>修改src&#x2F;main&#x2F;webapp&#x2F;resources&#x2F;app&#x2F;scripts&#x2F;directives&#x2F;sidebar&#x2F;目录下的sidebar.html文件：</p>
<p><img src="image-20210618202433356.png"></p>
<p>将其中的这部分注释打开：</p>
<p><img src="image-20210618202449881.png"></p>
<p>修改其中的文本：</p>
<p><img src="image-20210618202501928.png"></p>
<h3 id="7-重新编译、打包项目"><a href="#7-重新编译、打包项目" class="headerlink" title="7. 重新编译、打包项目"></a>7. 重新编译、打包项目</h3><p>运行IDEA中的maven插件，编译和打包修改好的Sentinel-Dashboard：</p>
<p><img src="image-20210618202701492.png"></p>
<h3 id="8-启动"><a href="#8-启动" class="headerlink" title="8.启动"></a>8.启动</h3><p>启动方式跟官方一样：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>

<p>如果要修改nacos地址，需要添加参数：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar -Dnacos.addr=localhost:8848 sentinel-dashboard.jar</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程：（五）线程安全、ThreadLocal</title>
    <url>/2024/09/19/14Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E6%9C%AC%E5%9C%B0%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h1><p>这篇博客内容很好，直接偷过来：</p>
<p><a href="https://blog.csdn.net/q669239799/article/details/90614077">什么是线程安全？如何保证线程安全？-CSDN博客</a></p>
<h1 id="如何保证线程安全"><a href="#如何保证线程安全" class="headerlink" title="如何保证线程安全"></a>如何保证线程安全</h1><p><strong>第一种：加锁。</strong></p>
<p>在 Java 中通过添加synchronized关键字实现，对方法或者代码块进行互斥。</p>
<p><strong>第二种：CAS非阻塞同步。</strong></p>
<p>通过不断自旋进行重试，避免线程进入阻塞状态，挂起和唤醒都需要性能开销。</p>
<p>前面两种方式可以参考上面的博客和我写的锁的内容：<a href="https://rengoku.top/2024/08/05/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E4%B8%89%E3%80%81%E9%94%81/">Java多线程：（三）多线程锁、JUC锁的实现 </a></p>
<p><strong>第三种：ThreadLocal无同步。</strong></p>
<p>线程本地存储：将共享数据的可见范围限制在一个线程中。这样无需同步也能保证线程之间不出现数据争用问题。</p>
<p>这种方式我结合后端开发一起介绍。</p>
<h1 id="SpringBoot-ThreadLocal"><a href="#SpringBoot-ThreadLocal" class="headerlink" title="SpringBoot + ThreadLocal"></a>SpringBoot + ThreadLocal</h1><p>通常，我们会使用 synchronzed 关键字 或者 lock锁 来控制线程对临界区资源的同步顺序，但这种加锁的方式会让未获取到锁的线程进行阻塞，很显然，这种方式的时间效率不会特别高。</p>
<p><strong>线程安全问题的核心在于多个线程会对同一个临界区的共享资源进行访问</strong>，那如果每个线程都拥有自己的“共享资源”，各用各的，互不影响，这样就不会出现线程安全的问题了，对吧？</p>
<p>顾名思义，<strong>ThreadLocal 就是线程的“本地变量”，即每个线程都拥有该变量的一个副本，达到人手一份的目的，这样就可以避免共享资源的竞争</strong>。</p>
<h2 id="ThreadLocal源码分析"><a href="#ThreadLocal源码分析" class="headerlink" title="ThreadLocal源码分析"></a>ThreadLocal源码分析</h2><p><a href="https://www.cnblogs.com/lingyejun/p/13380348.html">理清ThreadLocal、ThreadLocalMap、Thread之间的关系 - 翎野君 - 博客园 (cnblogs.com)</a></p>
<h2 id="使用ThreadLocal工具类改善springboot代码"><a href="#使用ThreadLocal工具类改善springboot代码" class="headerlink" title="使用ThreadLocal工具类改善springboot代码"></a>使用ThreadLocal工具类改善springboot代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal工具类代码</span><br><span class="line"><span class="keyword">package</span> com.example.tadakai.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ThreadLocal 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalUtil</span> &#123;</span><br><span class="line">    <span class="comment">//提供ThreadLocal对象,</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadLocal</span> <span class="variable">THREAD_LOCAL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据键获取值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) THREAD_LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//存储键值对</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(Object value)</span>&#123;</span><br><span class="line">        THREAD_LOCAL.set(value);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//清除ThreadLocal 防止内存泄漏</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">        THREAD_LOCAL.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>当每一个用户访问程序的时候，都会为一个用户开辟一个独立的进程，在拦截器的代码中，可以用ThreadLocal的实现类对象调用set方法记录id，在之后的三层架构中，再使用get方法获取到这个线程中存储过的id，以达到减少传递参数的目的</strong></p>
<p><img src="wps1.jpg" alt="img"> </p>
<p>使用ThreadLocal后，可以确保访问的数据是同一个用户，所以不需要核验请求头（使用@RequestHeader参数获取请求头）</p>
<p><img src="wps2.jpg" alt="img"><img src="wps3.jpg" alt="img"> </p>
<p><strong>使用完ThreadLocal后，避免资源泄露，需要在拦截器响应结束后释放资源，即重写拦截器的aftercompletion方法，方法中调用ThreadLocal的remove方法</strong></p>
<p><img src="wps4.jpg" alt="img"> </p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>docker：docker实操</title>
    <url>/2024/07/06/Docker%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>截止2024年5月开始出现docker无法拉取镜像问题，可自行搜索解决方案，建议用代理。</p>
<h1 id="1-初识Docker"><a href="#1-初识Docker" class="headerlink" title="1.初识Docker"></a>1.初识Docker</h1><h2 id="1-1-什么是Docker"><a href="#1-1-什么是Docker" class="headerlink" title="1.1.什么是Docker"></a>1.1.什么是Docker</h2><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。</p>
<ul>
<li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。</li>
<li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题</li>
</ul>
<h3 id="1-1-1-应用部署的环境问题"><a href="#1-1-1-应用部署的环境问题" class="headerlink" title="1.1.1.应用部署的环境问题"></a>1.1.1.应用部署的环境问题</h3><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p>
<ul>
<li><p>依赖关系复杂，容易出现兼容性问题</p>
</li>
<li><p>开发、测试、生产环境有差异</p>
</li>
</ul>
<p><img src="image-20210731141907366-17202512119731.png"></p>
<p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时所需要的函数库、依赖项各不相同，甚至会有冲突。给部署带来了极大的困难。</p>
<h3 id="1-1-2-Docker解决依赖兼容问题"><a href="#1-1-2-Docker解决依赖兼容问题" class="headerlink" title="1.1.2.Docker解决依赖兼容问题"></a>1.1.2.Docker解决依赖兼容问题</h3><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p>
<p>Docker为了解决依赖的兼容问题的，采用了两个手段：</p>
<ul>
<li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p>
</li>
<li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p>
</li>
</ul>
<p><img src="image-20210731142219735-17202512390553.png"></p>
<p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p>
<p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p>
<h3 id="1-1-3-Docker解决操作系统环境差异"><a href="#1-1-3-Docker解决操作系统环境差异" class="headerlink" title="1.1.3.Docker解决操作系统环境差异"></a>1.1.3.Docker解决操作系统环境差异</h3><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p>
<p><img src="image-20210731143401460-17202512515745.png"></p>
<p>结构包括：</p>
<ul>
<li>计算机硬件：例如CPU、内存、磁盘等</li>
<li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li>
<li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li>
</ul>
<p>应用于计算机交互的流程如下：</p>
<p>1）应用调用操作系统应用（函数库），实现各种功能</p>
<p>2）系统函数库是对内核指令集的封装，会调用内核指令</p>
<p>3）内核指令操作计算机硬件</p>
<p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p>
<p><img src="image-20210731144304990-17202512906267.png"></p>
<p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p>
<p><img src="image-20210731144458680-17202513039019.png"></p>
<p>Docker如何解决不同系统环境的问题？</p>
<ul>
<li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li>
<li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li>
</ul>
<p>如图：</p>
<p><img src="image-20210731144820638-172025131387611.png"></p>
<h3 id="1-1-4-小结"><a href="#1-1-4-小结" class="headerlink" title="1.1.4.小结"></a>1.1.4.小结</h3><p>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</p>
<ul>
<li>Docker允许开发中将应用、依赖、函数库、配置一起<strong>打包</strong>，形成可移植镜像</li>
<li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong></li>
</ul>
<p>Docker如何解决开发、测试、生产环境有差异的问题？</p>
<ul>
<li>Docker镜像中包含完整运行环境，包括系统函数库，仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</li>
</ul>
<p>Docker是一个快速交付应用、运行应用的技术，具备下列优势：</p>
<ul>
<li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统</li>
<li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li>
<li>启动、移除都可以通过一行命令完成，方便快捷</li>
</ul>
<h2 id="1-2-Docker和虚拟机的区别"><a href="#1-2-Docker和虚拟机的区别" class="headerlink" title="1.2.Docker和虚拟机的区别"></a>1.2.Docker和虚拟机的区别</h2><p>Docker可以让一个应用在任何操作系统中非常方便的运行。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用。</p>
<p>两者有什么差异呢？</p>
<p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟</strong>硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p>
<p><strong>Docker</strong>仅仅是封装函数库，并没有模拟完整的操作系统，如图：</p>
<p><img src="image-20210731145914960-172025132358913.png"></p>
<p>对比来看：</p>
<p><img src="image-20210731152243765-172025133336715.png"></p>
<p>小结：</p>
<p>Docker和虚拟机的差异：</p>
<ul>
<li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p>
</li>
<li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p>
</li>
</ul>
<h2 id="1-3-Docker架构"><a href="#1-3-Docker架构" class="headerlink" title="1.3.Docker架构"></a>1.3.Docker架构</h2><h3 id="1-3-1-镜像和容器"><a href="#1-3-1-镜像和容器" class="headerlink" title="1.3.1.镜像和容器"></a>1.3.1.镜像和容器</h3><p>Docker中有几个重要的概念：</p>
<p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p>
<p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。这个文件包是只读的。</p>
<p><strong>容器</strong>呢，就是将这些文件中编写的程序、函数加载到内存中允许，形成进程，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程。</p>
<p><img src="image-20210731153059464-172025134110517.png"></p>
<p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后你可以启动多次，双开、甚至三开QQ，跟多个妹子聊天。</p>
<h3 id="1-3-2-DockerHub"><a href="#1-3-2-DockerHub" class="headerlink" title="1.3.2.DockerHub"></a>1.3.2.DockerHub</h3><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p>
<ul>
<li><p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p>
</li>
<li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a>等。</p>
</li>
</ul>
<p>我们一方面可以将自己的镜像共享到DockerHub，另一方面也可以从DockerHub拉取镜像：</p>
<p><img src="image-20210731153743354-172025135047219.png"></p>
<h3 id="1-3-3-Docker架构"><a href="#1-3-3-Docker架构" class="headerlink" title="1.3.3.Docker架构"></a>1.3.3.Docker架构</h3><p>我们要使用Docker来操作镜像、容器，就必须要安装Docker。</p>
<p>Docker是一个CS架构的程序，由两部分组成：</p>
<ul>
<li><p>服务端(server)：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p>
</li>
<li><p>客户端(client)：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p>
</li>
</ul>
<p>如图：</p>
<p><img src="image-20210731154257653-172025136278221.png"></p>
<h3 id="1-3-4-小结"><a href="#1-3-4-小结" class="headerlink" title="1.3.4.小结"></a>1.3.4.小结</h3><p>镜像：</p>
<ul>
<li>将应用程序及其依赖、环境、配置打包在一起</li>
</ul>
<p>容器：</p>
<ul>
<li>镜像运行起来就是容器，一个镜像可以运行多个容器</li>
</ul>
<p>Docker结构：</p>
<ul>
<li><p>服务端：接收命令或远程请求，操作镜像或容器</p>
</li>
<li><p>客户端：发送命令或者请求到Docker服务端</p>
</li>
</ul>
<p>DockerHub：</p>
<ul>
<li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li>
</ul>
<h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4.安装Docker"></a>1.4.安装Docker</h2><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker。参考我的另外一篇博客。</p>
<h1 id="2-Docker的基本操作"><a href="#2-Docker的基本操作" class="headerlink" title="2.Docker的基本操作"></a>2.Docker的基本操作</h1><h2 id="2-1-镜像操作"><a href="#2-1-镜像操作" class="headerlink" title="2.1.镜像操作"></a>2.1.镜像操作</h2><h3 id="2-1-1-镜像名称"><a href="#2-1-1-镜像名称" class="headerlink" title="2.1.1.镜像名称"></a>2.1.1.镜像名称</h3><p>首先来看下镜像的名称组成：</p>
<ul>
<li>镜名称一般分两部分组成：[repository]:[tag]。</li>
<li>在没有指定tag时，默认是latest，代表最新版本的镜像</li>
</ul>
<p>如图：</p>
<p><img src="image-20210731155141362-172025139335023.png"></p>
<p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p>
<h3 id="2-1-2-镜像命令"><a href="#2-1-2-镜像命令" class="headerlink" title="2.1.2.镜像命令"></a>2.1.2.镜像命令</h3><p>常见的镜像操作命令如图：</p>
<p><img src="image-20210731155649535-172025140269125.png"></p>
<h3 id="2-1-3-案例1-拉取、查看镜像"><a href="#2-1-3-案例1-拉取、查看镜像" class="headerlink" title="2.1.3.案例1-拉取、查看镜像"></a>2.1.3.案例1-拉取、查看镜像</h3><p>需求：从DockerHub中拉取一个nginx镜像并查看</p>
<p>1）首先去镜像仓库搜索nginx镜像，比如<a href="https://hub.docker.com/">DockerHub</a>:</p>
<p><img src="image-20210731155844368-172025141331627.png"></p>
<p>2）根据查看到的镜像名称，拉取自己需要的镜像，通过命令：docker pull nginx</p>
<p><img src="image-20210731155856199-172025142614029.png"></p>
<p>3）通过命令：docker images 查看拉取到的镜像</p>
<p><img src="image-20210731155903037-172025143514131.png"></p>
<h3 id="2-1-4-案例2-保存、导入镜像"><a href="#2-1-4-案例2-保存、导入镜像" class="headerlink" title="2.1.4.案例2-保存、导入镜像"></a>2.1.4.案例2-保存、导入镜像</h3><p>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</p>
<p>1）利用docker xx –help命令查看docker save和docker load的语法</p>
<p>例如，查看save命令用法，可以输入命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="image-20210731161104732-172025144806833.png"></p>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></table></figure>



<p>2）使用docker save导出镜像到磁盘 </p>
<p>运行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<p><img src="image-20210731161354344-172025149206737.png"></p>
<p>3）使用docker load加载镜像</p>
<p>先删除本地的nginx镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></table></figure>



<p>然后运行命令，加载本地文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="image-20210731161746245-172025150212339.png"></p>
<h2 id="2-2-容器操作"><a href="#2-2-容器操作" class="headerlink" title="2.2.容器操作"></a>2.2.容器操作</h2><h3 id="2-2-1-容器相关命令"><a href="#2-2-1-容器相关命令" class="headerlink" title="2.2.1.容器相关命令"></a>2.2.1.容器相关命令</h3><p>容器操作的命令如图：</p>
<p><img src="image-20210731161950495-172025151425541.png"></p>
<p>容器保护三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU等资源</li>
</ul>
<p>其中：</p>
<ul>
<li><p>docker run：创建并运行一个容器，处于运行状态</p>
</li>
<li><p>docker pause：让一个运行的容器暂停</p>
</li>
<li><p>docker unpause：让一个容器从暂停状态恢复运行</p>
</li>
<li><p>docker stop：停止一个运行的容器</p>
</li>
<li><p>docker start：让一个停止的容器再次运行</p>
</li>
<li><p>docker rm：删除一个容器</p>
</li>
</ul>
<h3 id="2-2-2-案例-创建并运行一个容器"><a href="#2-2-2-案例-创建并运行一个容器" class="headerlink" title="2.2.2.案例-创建并运行一个容器"></a>2.2.2.案例-创建并运行一个容器</h3><p>创建并运行nginx容器的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name containerName -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li>docker run ：创建并运行一个容器</li>
<li>–name : 给容器起一个名字，比如叫做mn</li>
<li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li>
<li>-d：后台运行容器</li>
<li>nginx：镜像名称，例如nginx</li>
</ul>
<p>这里的<code>-p</code>参数，是将容器端口映射到宿主机端口。</p>
<p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p>
<p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p>
<p><img src="image-20210731163255863-172025152437243.png"></p>
<h3 id="2-2-3-案例-进入容器，修改文件"><a href="#2-2-3-案例-进入容器，修改文件" class="headerlink" title="2.2.3.案例-进入容器，修改文件"></a>2.2.3.案例-进入容器，修改文件</h3><p><strong>需求</strong>：进入Nginx容器，修改HTML文件内容，添加“传智教育欢迎您”</p>
<p><strong>提示</strong>：进入容器要用到docker exec命令。</p>
<p><strong>步骤</strong>：</p>
<p>1）进入容器。进入我们刚刚创建的nginx容器的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mn bash</span><br></pre></td></tr></table></figure>

<p>命令解读：</p>
<ul>
<li><p>docker exec ：进入容器内部，执行一个命令</p>
</li>
<li><p>-it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</p>
</li>
<li><p>mn ：要进入的容器的名称</p>
</li>
<li><p>bash：进入容器后执行的命令，bash是一个linux终端交互命令</p>
</li>
</ul>
<p>2）进入nginx的HTML所在目录 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
<p>容器内部会模拟一个独立的Linux文件系统，看起来如同一个linux服务器一样：</p>
<p><img src="image-20210731164159811-172025153479945.png"></p>
<p>nginx的环境、配置、运行文件全部都在这个文件系统中，包括我们要修改的html文件。</p>
<p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p>
<p>我们执行命令，进入该目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html</span><br></pre></td></tr></table></figure>

<p> 查看目录下文件：</p>
<p><img src="image-20210731164455818-172025154570447.png"></p>
<p>3）修改index.html的内容</p>
<p>容器内没有vi命令，无法直接修改，我们用下面的命令来修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s#Welcome to nginx#传智教育欢迎您#g&#x27;</span> -e <span class="string">&#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27;</span> index.html</span><br></pre></td></tr></table></figure>



<p>在浏览器访问自己的虚拟机地址，例如我的是：<a href="http://192.168.150.101，即可看到结果：">http://192.168.150.101，即可看到结果：</a></p>
<p><img src="image-20210731164717604-172025155924049.png"></p>
<h3 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4.小结"></a>2.2.4.小结</h3><p>docker run命令的常见参数有哪些？</p>
<ul>
<li>–name：指定容器名称</li>
<li>-p：指定端口映射</li>
<li>-d：让容器后台运行</li>
</ul>
<p>查看容器日志的命令：</p>
<ul>
<li>docker logs</li>
<li>添加 -f 参数可以持续查看日志</li>
</ul>
<p>查看容器状态：</p>
<ul>
<li>docker ps</li>
<li>docker ps -a 查看所有容器，包括已经停止的</li>
</ul>
<h2 id="2-3-数据卷（容器数据管理）"><a href="#2-3-数据卷（容器数据管理）" class="headerlink" title="2.3.数据卷（容器数据管理）"></a>2.3.数据卷（容器数据管理）</h2><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p>
<p>这就是因为容器与数据（容器内文件）耦合带来的后果。</p>
<p><img src="image-20210731172440275-172025157161351.png"></p>
<p>要解决这个问题，必须将数据与容器解耦，这就要用到数据卷了。</p>
<h3 id="2-3-1-什么是数据卷"><a href="#2-3-1-什么是数据卷" class="headerlink" title="2.3.1.什么是数据卷"></a>2.3.1.什么是数据卷</h3><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p>
<p><img src="image-20210731173541846-172025159346453.png"></p>
<p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</p>
<p>这样，我们操作宿主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;html目录，就等于操作容器内的&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录了</p>
<h3 id="2-3-2-数据集操作命令"><a href="#2-3-2-数据集操作命令" class="headerlink" title="2.3.2.数据集操作命令"></a>2.3.2.数据集操作命令</h3><p>数据卷操作的基本语法如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></table></figure>

<p>docker volume命令是数据卷操作，根据命令后跟随的command来确定下一步的操作：</p>
<ul>
<li>create 创建一个volume</li>
<li>inspect 显示一个或多个volume的信息</li>
<li>ls 列出所有的volume</li>
<li>prune 删除未使用的volume</li>
<li>rm 删除一个或多个指定的volume</li>
</ul>
<h3 id="2-3-3-创建和查看数据卷"><a href="#2-3-3-创建和查看数据卷" class="headerlink" title="2.3.3.创建和查看数据卷"></a>2.3.3.创建和查看数据卷</h3><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置</p>
<p>① 创建数据卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></table></figure>



<p>② 查看所有数据</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="image-20210731173746910-172025160602555.png"></p>
<p>③ 查看数据卷详细信息卷</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="image-20210731173809877-172025161650357.png"></p>
<p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p>
<p><strong>小结</strong>：</p>
<p>数据卷的作用：</p>
<ul>
<li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li>
</ul>
<p>数据卷操作：</p>
<ul>
<li>docker volume create：创建数据卷</li>
<li>docker volume ls：查看所有数据卷</li>
<li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li>
<li>docker volume rm：删除指定数据卷</li>
<li>docker volume prune：删除所有未使用的数据卷</li>
</ul>
<h3 id="2-3-4-挂载数据卷"><a href="#2-3-4-挂载数据卷" class="headerlink" title="2.3.4.挂载数据卷"></a>2.3.4.挂载数据卷</h3><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></table></figure>

<p>这里的-v就是挂载数据卷的命令：</p>
<ul>
<li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的&#x2F;root&#x2F;html这个目录中</li>
</ul>
<h3 id="2-3-5-案例-给nginx挂载数据卷"><a href="#2-3-5-案例-给nginx挂载数据卷" class="headerlink" title="2.3.5.案例-给nginx挂载数据卷"></a>2.3.5.案例-给nginx挂载数据卷</h3><p><strong>需求</strong>：创建一个nginx容器，修改容器内的html目录内的index.html内容</p>
<p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html ，我们需要把这个目录挂载到html这个数据卷上，方便操作其中的内容。</p>
<p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p>
<p>步骤：</p>
<p>① 创建容器并挂载数据卷到容器内的HTML目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>



<p>② 进入html数据卷所在位置，并修改HTML内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure>



<h3 id="2-3-6-案例-给MySQL挂载本地目录"><a href="#2-3-6-案例-给MySQL挂载本地目录" class="headerlink" title="2.3.6.案例-给MySQL挂载本地目录"></a>2.3.6.案例-给MySQL挂载本地目录</h3><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p>
<ul>
<li>带数据卷模式：宿主机目录 –&gt; 数据卷 —&gt; 容器内目录</li>
<li>直接挂载模式：宿主机目录 —&gt; 容器内目录</li>
</ul>
<p>如图：</p>
<p><img src="image-20210731175155453-172025163822859.png"></p>
<p><strong>语法</strong>：</p>
<p>目录挂载与数据卷挂载的语法是类似的：</p>
<ul>
<li>-v [宿主机目录]:[容器内目录]</li>
<li>-v [宿主机文件]:[容器内文件]</li>
</ul>
<p><strong>需求</strong>：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</p>
<p>实现思路如下：</p>
<p>1）在将课前资料中的mysql.tar文件上传到虚拟机，通过load命令加载为镜像</p>
<p>2）创建目录&#x2F;tmp&#x2F;mysql&#x2F;data</p>
<p>3）创建目录&#x2F;tmp&#x2F;mysql&#x2F;conf，将课前资料提供的hmy.cnf文件上传到&#x2F;tmp&#x2F;mysql&#x2F;conf</p>
<p>4）去DockerHub查阅资料，创建并运行MySQL容器，要求：</p>
<p>① 挂载&#x2F;tmp&#x2F;mysql&#x2F;data到mysql容器内数据存储目录</p>
<p>② 挂载&#x2F;tmp&#x2F;mysql&#x2F;conf&#x2F;hmy.cnf到mysql容器的配置文件</p>
<p>③ 设置MySQL密码</p>
<h3 id="2-3-7-小结"><a href="#2-3-7-小结" class="headerlink" title="2.3.7.小结"></a>2.3.7.小结</h3><p>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</p>
<ul>
<li>-v volume名称:容器内目录</li>
<li>-v 宿主机文件:容器内文</li>
<li>-v 宿主机目录:容器内目录</li>
</ul>
<p>数据卷挂载与目录直接挂载的</p>
<ul>
<li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
<h1 id="3-Dockerfile自定义镜像"><a href="#3-Dockerfile自定义镜像" class="headerlink" title="3.Dockerfile自定义镜像"></a>3.Dockerfile自定义镜像</h1><p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p>
<p>而要自定义镜像，就必须先了解镜像的结构才行。</p>
<h2 id="3-1-镜像结构"><a href="#3-1-镜像结构" class="headerlink" title="3.1.镜像结构"></a>3.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p>
<p>我们以MySQL为例，来看看镜像的组成结构：</p>
<p><img src="image-20210731175806273-172025168205161.png"></p>
<p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p>
<p>我们要构建镜像，其实就是实现上述打包的过程。</p>
<h2 id="3-2-Dockerfile语法"><a href="#3-2-Dockerfile语法" class="headerlink" title="3.2.Dockerfile语法"></a>3.2.Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p>
<p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p>
<p>而描述上述信息的文件就是Dockerfile文件。</p>
<p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的**指令(Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p>
<p><img src="image-20210731180321133-172025169038663.png"></p>
<p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p>
<h2 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3.小结"></a>3.3.小结</h2><p>小结：</p>
<ol>
<li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p>
</li>
<li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p>
</li>
<li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p>
</li>
</ol>
<h1 id="4-Docker-Compose"><a href="#4-Docker-Compose" class="headerlink" title="4.Docker-Compose"></a>4.Docker-Compose</h1><h2 id="4-1-dockerCompose介绍"><a href="#4-1-dockerCompose介绍" class="headerlink" title="4.1 dockerCompose介绍"></a>4.1 dockerCompose介绍</h2><p>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">version<span class="punctuation">:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"> services<span class="punctuation">:</span></span><br><span class="line">  mysql<span class="punctuation">:</span></span><br><span class="line">    image<span class="punctuation">:</span> mysql<span class="punctuation">:</span><span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment<span class="punctuation">:</span></span><br><span class="line">     MYSQL_ROOT_PASSWORD<span class="punctuation">:</span> <span class="number">123</span> </span><br><span class="line">    volumes<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">     - <span class="string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span><br><span class="line">  web<span class="punctuation">:</span></span><br><span class="line">    build<span class="punctuation">:</span> .</span><br><span class="line">    ports<span class="punctuation">:</span></span><br><span class="line">     - <span class="string">&quot;8090:8090&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的Compose文件就描述一个项目，其中包含两个容器：</p>
<ul>
<li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li>
<li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li>
</ul>
<p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></p>
<p>其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。</p>
<p>​                         </p>
<h2 id="4-2-dockerCompose案例（没做实操）"><a href="#4-2-dockerCompose案例（没做实操）" class="headerlink" title="4.2 dockerCompose案例（没做实操）"></a>4.2 dockerCompose案例（没做实操）</h2><p>dockerCompose底层可以直接使用服务名称连接到对应微服务而不是用地址，比如配置nacos的地址，在Java的application.yml文件的spring的addr中配置之前写的是localhost：10086，但是其他主机访问不到。dockerCompose能够使用服务名称跨设备访问微服务。nacos：10086。</p>
<p> <img src="Composedemo-172025204419373.png"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>软件技术</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC：Java语言连接数据库</title>
    <url>/2024/07/06/JDBC%20%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、-什么是JDBC"><a href="#一、-什么是JDBC" class="headerlink" title="一、 什么是JDBC"></a>一、 什么是JDBC</h1><p><em>JDBC（Java DataBase Connectivity）</em>是Java数据库连接技术的简称，提供连接和操作各种常用数据库的能力，JDBC只定义了Java应用程序访问数据库的标准接口层，而对于不同的数据库而言则由数据库厂商去实现JDBC接口层的功能 （叫做数据库驱动程序包）。</p>
<h1 id="二、-JDBC工作原理"><a href="#二、-JDBC工作原理" class="headerlink" title="二、  JDBC工作原理"></a>二、  JDBC工作原理</h1><p><img src="image-20230509201759580-3634684.png"></p>
<p>JDBC驱动程序包实际上是对JDK jdbc api的具体实现。可以理解成JDBC只定义了与数据库通信的规范和协议，而这些规范的具体实现由各数据库厂商自己实现也只有数据库厂商才知道怎样操作自己的数据库。</p>
<p><img src="image-20230509201842721-3634725.png"></p>
<h1 id="三、-JDBC访问数据库的步骤"><a href="#三、-JDBC访问数据库的步骤" class="headerlink" title="三、  JDBC访问数据库的步骤"></a>三、  JDBC访问数据库的步骤</h1><p>准备工作：把驱动程序包<em>mysql-connector-j-8.2.0.jar</em>引入<strong>项目依赖</strong>，</p>
<p><em>Project Structure</em> —&gt;选中<em>module</em> —&gt; <em>Dependency</em> —&gt;点击右侧<em>”+”</em>号添加依赖库。</p>
<ol>
<li><p>注册数据库动程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/scott&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//1. 注册数据库动程序</span></span><br><span class="line">  Class.forName(DRIVER);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">  System.err.println(<span class="string">&quot;注册数据库驱动失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过<code>java.sql.DriverManager</code> 获得数据库连接 <code>java.sql.Connection</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line"><span class="comment">//2. 通过`java.sql.DriverManager` 获得数据库连接 `java.sql.Connection`</span></span><br><span class="line">conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 <code>java.sql.Connection</code> 创建语句对象 <code>java.sql.Statement</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//3. 通过 `java.sql.Connection` 创建语句对象 `java.sql.Statement`</span></span><br><span class="line">stmt = conn.createStatement();</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行 SQL 语句</p>
<ul>
<li><p><strong>select 查询</strong>：<em>java.sql.ResultSet  statement.exceuteQuery( sql : String )</em> 返回结果集对象</p>
</li>
<li><p><strong>insert, update, delete 语句</strong>：<em>int  statement.executeUpate( sql : String )</em> 返回整数，此操作数据库影响的行数。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="comment">//4.执行 SQL 语句获得结果集对象</span></span><br><span class="line">rs = stmt.executeQuery(<span class="string">&quot;select * from emp&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历查询结果集 <code>java.sql.ResultSet</code>（select 操作）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 遍历查询结果集 `java.sql.ResultSet`（select 操作）</span></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123; <span class="comment">//遍历每一行</span></span><br><span class="line">  <span class="comment">//取每一列</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">empno</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;empno&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">ename</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;ename&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;job&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">mgr</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;mgr&quot;</span>);</span><br><span class="line">  <span class="type">Date</span> <span class="variable">hiredate</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;hiredate&quot;</span>);</span><br><span class="line">  <span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;sal&quot;</span>);</span><br><span class="line">  <span class="type">double</span> <span class="variable">comm</span> <span class="operator">=</span> rs.getDouble(<span class="string">&quot;comm&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">deptno</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;deptno&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(empno, ename, job, mgr, hiredate, sal, comm, deptno);</span><br><span class="line">  employees.add(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭 <code>java.sql.ResultSet</code>、<code>java.sql.Statement</code>、<code>java.sql.Connection</code> 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//6. 关闭 `java.sql.ResultSet`、`java.sql.Statement`、`java.sql.Connection` 对象</span></span><br><span class="line">    <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">      rs.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">      stmt.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">      conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;关闭数据资源失败！&quot;</span> + e.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="image-20230509201950686-3634794.png"></p>
<blockquote>
<p><strong>注意：</strong></p>
<p>注册数据驱动只需在整个项目运行时注册一次即可。不需要每次获取<code>Connection</code> 时都去注册驱动。注册数据库驱动程序后其它的类再去访问数据库时 JVM 就能找得到数据库驱动了，所以通常把注册驱动的代码写在某个类的*static{ ….. }*静态初始化块中。</p>
</blockquote>
<h3 id="3-1-各数据库-URL"><a href="#3-1-各数据库-URL" class="headerlink" title="3.1 各数据库 URL"></a>3.1 各数据库 URL</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//url格式：协议:子协议:主机:port:数据库</span></span><br><span class="line"><span class="comment">//SQL Server</span></span><br><span class="line"><span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:sqlserver://localhost:1433;DatabaseName=数据库名&quot;</span>;</span><br><span class="line"><span class="comment">//Oracle</span></span><br><span class="line"><span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:oracle:thin:@localhost:1521:ORCL(实例名,SID)&quot;</span>;</span><br><span class="line"><span class="comment">//MySQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/数据库名?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="四、-JDBC-API-类"><a href="#四、-JDBC-API-类" class="headerlink" title="四、 JDBC API 类"></a>四、 JDBC API 类</h1><h2 id="4-1-Connection常用方法"><a href="#4-1-Connection常用方法" class="headerlink" title="4.1 Connection常用方法"></a>4.1 Connection常用方法</h2><ol>
<li><p><code>close()</code>：立即释放此 Connection 对象的数据库和 JDBC 资源，而不是等待它们被自动释放。</p>
</li>
<li><p><code>commit()</code> ：提交SQL操作，默认是自动提交SQL操作，很少情况需要手动提交。</p>
</li>
<li><p>createStatement() ：创建一个 Statement (普通语句)对象并将 SQL 语句发送到数据库去执行。</p>
</li>
<li><p><code>prepareStatement(String sql)</code>：创建一个 <code>PreparedStatement</code>(预编译语句) 对象来将参数化的 SQL 语句发送到数据库，其后对<strong>占位符</strong>设置参数，这种语句类型可获得更好的性能。</p>
</li>
<li><p><code>prepareCall(String sql)</code> ：创建一个 <code>CallableStatement</code> 对象来调用数据库存储过程。</p>
</li>
<li><p>必须在 <em>finally</em> 块中关闭<code>Connection</code>。</p>
</li>
<li><p><code>void rollback()</code>：取消在当前事务中进行的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁。</p>
</li>
<li><p><code>void setAutoCommit(boolean autoCommit):</code> 将此连接的自动提交模式设置为给定状态。</p>
</li>
</ol>
<h2 id="4-2-Statement常用方法"><a href="#4-2-Statement常用方法" class="headerlink" title="4.2 Statement常用方法"></a>4.2 Statement常用方法</h2><ol>
<li><p><strong>（不推荐用）</strong><code>Boolean execute(String sql)</code> ：执行给定的 SQL 语句（增删改查语句都可以），该语句可能返回多个结果。</p>
</li>
<li><p><code>ResultSet executeQuery(String sql)</code> : 执行给定的 SQL 查询语句，该语句返回单个 <code>ResultSet</code> 对象。</p>
</li>
<li><p><code>int intexecuteUpdate(Stringsql)</code>: 执行给定 SQL 语句，该语句可能为 <em>INSERT、UPDATE 或 DELETE</em> 语句，或者不返回任何内容的 SQL 语句（如 DDL 语句）。</p>
</li>
<li><p><code>setQueryTimeout(int seconds)</code> ：将驱动程序等待 <code>Statement</code> 对象执行的秒数设置为给定秒数。</p>
</li>
<li><p>必须在finally块中关闭<code>Statement</code>。</p>
</li>
</ol>
<h2 id="4-3-ResultSet常用方法"><a href="#4-3-ResultSet常用方法" class="headerlink" title="4.3  ResultSet常用方法"></a>4.3  ResultSet常用方法</h2><ol>
<li><p><code>next()</code>: 将光标从当前位置向前移一行。ResultSet 光标最初位于第一行之前；第一次调用 next 方法使第一行成为当前行；第二次调用使第二行成为当前行，依此类推。</p>
</li>
<li><p><code>close()</code> ：立即释放此 ResultSet 对象的数据库和 JDBC 资源，而不是等待该对象自动关闭时发生此操作。</p>
</li>
<li><p><code>getXxx(int columnIndex)</code> ：使用列索引来获取数据，Xxx表示相应的数据类型。</p>
</li>
</ol>
<p>​		例如：</p>
<ul>
<li>获字符串用<em>getString(int columnIndex)，getString(String columnNanme)</em></li>
<li>获取整数用<em>getInt(int columnIndex),  getInt(String columnName)</em></li>
</ul>
<p>d)   必须在<code>finally</code>块中关闭<code>ResultSet</code>。</p>
<h1 id="五、PreparedStatement"><a href="#五、PreparedStatement" class="headerlink" title="五、PreparedStatement"></a>五、PreparedStatement</h1><ol>
<li><p>预编译语句<code>PreparedStatement</code>是<code>Statement</code>的子类</p>
</li>
<li><p>为什么要使用预编译语句？</p>
<ul>
<li><p>执行效率高</p>
</li>
<li><p>安全</p>
</li>
<li><p>支持参数值占位符：？</p>
</li>
</ul>
</li>
</ol>
<p><img src="image-20230509215556993-3640563.png"></p>
<p>SQL中的 “**- -**” 把后面的语句给注掉了，这样就出现了SQL漏洞。预编译语句可以避免此类问题的发生。</p>
<p>如果要多次执行相似的SQL语句，如：一次插入（更新、删除）几百条记录; 又如不同用户登录执行 SQL语句只有用户名和密码不同。可以使用<code>PreparedStatement</code>（预编译语句对象）对象来执行。由于预编译语句使用占位符 ”?”，在执行SQL之前语句会被先发送到数据库服务器进行语法检查和编译等工作，并将SQL语句加入到数据库的语句缓冲池里，随后再对SQL语句中的占位符 <strong>”?”</strong> 设置定值。那么也就说如果你要执行1000行插入的时候第一次先SQL语句发送给数据库服务器处理，接着后面只需传递占位符的值就可以了。因此它不需每次传递大量的SQL语句也无需对每条SQL语句做语法检查和编译所以比较高效。</p>
<ol start="3">
<li>通过Connection的prepareStatement( sql )方法来创建预编译语句对象。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Employee e)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JdbcUtils.getConnection();</span><br><span class="line">  ) &#123;</span><br><span class="line">      <span class="comment">//? 占位符只能对赋值的地方占位，</span></span><br><span class="line">      <span class="comment">//如：where empno=?;    update emp set ename=? ....</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into emp(ename,job,mgr,hiredate,sal,comm,deptno) values (?,?,?,?,?,?,?)&quot;</span>; </span><br><span class="line">      <span class="comment">//1.先创建预编译语句，占位符只能给值进行占位</span></span><br><span class="line">      <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">      <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//2.再给？(点位符)设置值, 占位符索引位置从1开始</span></span><br><span class="line">      ps.setString(index++, e.getEname());</span><br><span class="line">      ps.setString(index++, e.getJob());</span><br><span class="line">      ps.setInt(index++, e.getMgr());</span><br><span class="line">      ps.setDate(index++, <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(e.getHiredate().getTime()));</span><br><span class="line">      ps.setDouble(index++, e.getSal());</span><br><span class="line">      <span class="comment">//如果列允许为空时，需要作一下JDBC 的空值处理, setNull(i, sqlType);</span></span><br><span class="line">      <span class="keyword">if</span>(e.getComm()==<span class="literal">null</span>)&#123;</span><br><span class="line">          ps.setNull(index++, java.sql.Types.DOUBLE);</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">          ps.setDouble(index++,e.getComm());</span><br><span class="line">      &#125;</span><br><span class="line">      ps.setInt(index++, e.getDeptno());</span><br><span class="line">      <span class="comment">//3.执行，不能再指定SQL 语句</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">          System.err.println(<span class="string">&quot;&gt;&gt;2.新增员工实体失败：&quot;</span> + ex.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-1-常用方法"><a href="#5-1-常用方法" class="headerlink" title="5.1 常用方法"></a>5.1 常用方法</h2><ul>
<li><p><code>boolean   execute()</code>：在此 <code>PreparedStatement</code> 对象中执行 SQL 语句，该语句可以是任何种类的 SQL 语句。</p>
</li>
<li><p><code>ResultSet executeQuery()</code> 在此 <code>PreparedStatement</code> 对象中执行 SQL 查询，并返回该查询生成的 ResultSet 对象。</p>
</li>
<li><p><code>int executeUpdate()</code>：在此 <code>PreparedStatement</code> 对象中执行 SQL 语句，该语句必须是一个 SQL 数据操作语言<em>（Data Manipulation Language，DML）</em>语句，比如 <em>INSERT、UPDATE 或 DELETE</em> 语句；或者是无返回内容的 SQL 语句，比如 DDL 语句。</p>
</li>
<li><p><code>void setXxx(int parameterIndex, Xxx value)</code>: Xxx表示相应的数据类型，如：setString(…), setInt(…)等。设置点位符位置的值，第一个参数是 1，第二个参数是 2，…..</p>
</li>
<li><p><code>setNull(int parameterIndex, java.sql.Types value)</code>: 插入或更新时处理空值的字段，通常对非<code>char, varchar</code>类型字段空值时使用。</p>
</li>
<li><p>必须在 <em>finally</em> 块中关闭<code>PreparedStatement</code>。</p>
</li>
</ul>
<h2 id="5-2-PreparedStatement与Statement的对比"><a href="#5-2-PreparedStatement与Statement的对比" class="headerlink" title="5.2 PreparedStatement与Statement的对比"></a>5.2 PreparedStatement与Statement的对比</h2><table>
<thead>
<tr>
<th></th>
<th>Statement</th>
<th>PreparedStatement</th>
</tr>
</thead>
<tbody><tr>
<td>创建语句对象的方法</td>
<td><em>Connection.createStatement( )</em>  创建语句对象时 不提供SQL</td>
<td><em>Connection.preparedStatement( sql )</em>  创建语句对象时 提供SQL</td>
</tr>
<tr>
<td>查询</td>
<td><em>executeQuery( sql )</em>  要提供SQL语句</td>
<td><em>executeQuery( )</em>  不提供提供SQL语句，但随后要设置占位符的值</td>
</tr>
<tr>
<td>插入、更新、删除</td>
<td><em>executeUpdate( sql )</em>  要提供SQL语句</td>
<td><em>executeUpdate( )</em>  不提供提供SQL语句</td>
</tr>
</tbody></table>
<h1 id="六-存储过程调用"><a href="#六-存储过程调用" class="headerlink" title="六. 存储过程调用"></a>六. 存储过程调用</h1><p>调用存储过程可以使用<code>CallableStatement</code>语句类型来调用。</p>
<ol>
<li><p>通过conn.prepareCall(<strong>“</strong>{call find_employee(?,?)}”); 获得一个使用CallableStatement语句对象。</p>
</li>
<li><p>设置<em>输入（IN模式）参数</em>的值和注册<em>输出（OUT模式）参数</em>。</p>
<ul>
<li><p>设置输入（IN模式）参数的值使用：</p>
<p><code>CallableStatement.setString(parameterIndex, value);</code></p>
<p>根据参数类型选择调用相应的方法。</p>
</li>
<li><p>注册输出（OUT模式）参数:</p>
</li>
</ul>
</li>
</ol>
<p>​			<code>CallableStatement.registerOutParameter(OUT_ ParameterIndex, java.sql.Types.类型常量);</code></p>
<ol start="3">
<li>获得输出参数的值使用方法：getString (输出参数的索引位置); 根据输出参数类型调用相应的方法。</li>
</ol>
<ul>
<li><strong>示例</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用存储过程</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProcedure</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">//调用存储过程必须用CallableStatement语句对象，它是PreparedStatement的子类</span></span><br><span class="line">    <span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span></span><br><span class="line">            <span class="built_in">this</span>.conn.prepareCall(<span class="string">&quot;&#123;call get_job_sum_sal(?,?)&#125;&quot;</span>); <span class="comment">//第二个？号的参数模式是out</span></span><br><span class="line">    <span class="comment">//设置点位符的值</span></span><br><span class="line">    cs.setString(<span class="number">1</span>, <span class="string">&quot;SALESMAN&quot;</span>);</span><br><span class="line">    cs.setDouble(<span class="number">2</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="comment">//若过程有输出参数模式的，必须在过程执行前注册输出参数，也是说要告诉oracle驱动要得到哪个占位符的值 </span></span><br><span class="line">    cs.registerOutParameter(<span class="number">2</span>, java.sql.Types.DOUBLE, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行过程</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> cs.execute();</span><br><span class="line">    <span class="comment">//得到结果，即过程的输出参数的值</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> cs.getDouble(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;SALESMAN的总工资：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="七-批量更新"><a href="#七-批量更新" class="headerlink" title="七. 批量更新"></a>七. 批量更新</h1><h2 id="7-1-Statement-批量更新"><a href="#7-1-Statement-批量更新" class="headerlink" title="7.1 Statement 批量更新"></a>7.1 Statement 批量更新</h2><p>用Statement对象执行批量更新时，用到addBatch()和executeBatch()方法。</p>
<p><em>insert</em> 和 <em>delete</em> 操作与<em>update</em> 操作相似。</p>
<ul>
<li><strong>示例</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtil.getConnection();</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//1.设置自动提交事务为 false</span></span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    statement = connection.createStatement();</span><br><span class="line">    <span class="comment">//2.使用addBatch（）方法添加要在批处理中执行的SQL语句。然后使用executeBatch（）执行SQL语句。</span></span><br><span class="line">    statement.addBatch(<span class="string">&quot;update people set firstname=&#x27;aaa&#x27; where id=123&quot;</span>);</span><br><span class="line">    statement.addBatch(<span class="string">&quot;update people set firstname=&#x27;bbb&#x27; where id=456&quot;</span>);</span><br><span class="line">    statement.addBatch(<span class="string">&quot;update people set firstname=&#x27;ccc&#x27;  where id=789&quot;</span>);</span><br><span class="line">		<span class="comment">//返回每条件语句数据受影响的行数</span></span><br><span class="line">    <span class="type">int</span>[] recordsAffected = statement.executeBatch();</span><br><span class="line">    <span class="comment">//3.1 提交事务</span></span><br><span class="line">    connection.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  	<span class="comment">//3.2 回滚事务</span></span><br><span class="line">  	connection.rollback();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-PreparedStatement-批量更新"><a href="#7-2-PreparedStatement-批量更新" class="headerlink" title="7.2 PreparedStatement 批量更新"></a>7.2 PreparedStatement 批量更新</h2><p>使用<code>PreparedStatement</code>对象执行批量更新。<code>PreparedStatement</code><em>可以重用相同的SQL语句</em>，并只需插入新参数即可执行每个更新。</p>
<p><em>insert</em> 和 <em>delete</em> 操作与<em>update</em> 操作相似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JdbcUtil.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update PEOPLE set firstname=? where id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//1.设置自动提交事务为 false</span></span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">  	<span class="comment">//2.添加语句组，并为每条语句设置参数值</span></span><br><span class="line">    <span class="comment">//第1条记录</span></span><br><span class="line">    preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;james&quot;</span>);</span><br><span class="line">    preparedStatement.setLong  (<span class="number">2</span>, <span class="number">123</span>);</span><br><span class="line">    <span class="comment">//加入到批量处理</span></span><br><span class="line">    preparedStatement.addBatch();</span><br><span class="line">    <span class="comment">//第2条记录</span></span><br><span class="line">    preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;zhang&quot;</span>);</span><br><span class="line">    preparedStatement.setLong  (<span class="number">2</span>, <span class="number">456</span>);</span><br><span class="line">    preparedStatement.addBatch();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] affectedRecords = preparedStatement.executeBatch();</span><br><span class="line">    <span class="comment">//3.1 提交事务</span></span><br><span class="line">    connection.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  	<span class="comment">//3.2 回滚事务</span></span><br><span class="line">  	connection.rollback();</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(preparedStatement != <span class="literal">null</span>) &#123;</span><br><span class="line">            preparedStatement.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​		将每组参数值插入到preparedStatement中，并调用*addBatch( )<em>方法。 这会将参数值添加到批处理内部。 现在可以添加另一组值，以便插入到SQL语句中。 将全部批次发送到数据库后，将每组参数插入到SQL中并分别执行。然后执行</em>executeBatch( )*方法，它执行所有的批量更新。 SQL语句和参数集一起发送到数据库。</p>
<p><strong>注意: 批量操作应该放到事务里进行，因为它会存在某条语句执行失败的情况。</strong></p>
<h1 id="八-Java数据类型与SQL类型的映射"><a href="#八-Java数据类型与SQL类型的映射" class="headerlink" title="八. Java数据类型与SQL类型的映射"></a>八. Java数据类型与SQL类型的映射</h1><h2 id="8-1-Conversions-by-setObject-index-value"><a href="#8-1-Conversions-by-setObject-index-value" class="headerlink" title="8.1 Conversions by setObject(index, value)"></a>8.1 Conversions by setObject(index, value)</h2><p>下表说明了可用*Statement.setObject(index, value)和 PreparedStatement.setObject(index, value)*方法支持将Java类型到JDBC类型赋值。</p>
<p><img src="clip_image001.png"></p>
<p>An “x” means that the given Java object type may be converted to the given JDBC type. This table show the possible values for the parameter specifying a target JDBC type that is passed to the method PreparedStatement.setObject or RowSet.setObject. Note that some conversions may fail at run time if the value presented is invalid.</p>
<h2 id="8-2-Conversions-by-ResultSet-getXXX-Methods"><a href="#8-2-Conversions-by-ResultSet-getXXX-Methods" class="headerlink" title="8.2 Conversions by ResultSet.getXXX Methods"></a>8.2 Conversions by ResultSet.getXXX Methods</h2><p><img src="clip_image001-3697769-3697774.png"></p>
<p><code>SQLInput.readXXX</code> methods support only the recommended conversions. An “x” means that the method <em>can</em> retrieve the JDBC type. An “<strong>X</strong>“ means that the method is <em>recommended</em> for retrieving the JDBC type.</p>
<h1 id="九、apache-DButils-组件库"><a href="#九、apache-DButils-组件库" class="headerlink" title="九、apache DButils 组件库"></a>九、apache DButils 组件库</h1><p>dbutils是apache 中的一个简化了jdbc的编程的工具组件库。</p>
<p>下载地址：<a href="https://commons.apache.org/proper/commons-dbutils/">DbUtils – JDBC Utility Component (apache.org)</a></p>
<p>官方示例：<a href="https://commons.apache.org/proper/commons-dbutils/examples.html">DbUtils – JDBC Utility Component – Examples (apache.org)</a></p>
<h2 id="9-1-ResultSetHandler结果集处理器接口"><a href="#9-1-ResultSetHandler结果集处理器接口" class="headerlink" title="9.1 ResultSetHandler结果集处理器接口"></a>9.1 ResultSetHandler结果集处理器接口</h2><p><code>ResultSetHandler</code> 的功能是将查询结果的列名与JavaBean对象的属性名(setter方法)进行反射赋值，有以下几个常用实现类：</p>
<ul>
<li><p><code>BeanHandler</code>：JavaBean处理器。将查询结果集 <code>ResultSet</code>的一行仅且一行封装成一个JavaBean对象。</p>
</li>
<li><p><code>BeanListHandler</code>：JavaBean列表处理器。 将多行查询集 <code>ResultSet</code>封装成一个JavaBean列表。</p>
</li>
<li><p><code>MapHandler</code>：Map处理器。将查询结果集的一行仅且一行封装成一个<em>Map</em>对象，结果集的列名作为 Map 的<em>key</em>，值作为Map 的<em>value</em>;</p>
</li>
<li><p><code>MapListHandler</code>： Map列表处理器。返回一个列表其元素为Map，查询结果集的每一行封装成一个Map对象，结果的列名作为key，值作为value;</p>
</li>
<li><p><code>ScalarHandler</code>: 标量类型处理器。将只有一行一列的查询结果集封装成一个基本类型的值，如：<em>Select  count(*)  as rows  from  employee</em>;</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将查询结果集通过反射机制封装成一个JavaBean实体，查询结果的列名将与JavaBean的属性名进行反射（实际上是调用 JavaBean 的setter方法）</span></span><br><span class="line"><span class="comment">//如果结果集的列有与 JavaBean 属性名不同时，可通过给列名取别名的方式使之与JavaBean 属性名一样</span></span><br><span class="line">ResultSetHandler&lt;Employee&gt;  rsh = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;Employee&gt;(Employee.class); </span><br><span class="line">runner.query(conn, sql, rsh [,Object... params]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将查询结果集通过反射机制封装成一个JavaBean实体列表</span></span><br><span class="line">ResultSetHandler&lt;Employee&gt;  rsh = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span> &lt;Employee&gt;(Employee.class);</span><br><span class="line">runner.query(conn, sql, rsh [,Object... params]);</span><br></pre></td></tr></table></figure>

<h2 id="9-2-QueryRunner-SQL执行操作类-多线程安全"><a href="#9-2-QueryRunner-SQL执行操作类-多线程安全" class="headerlink" title="9.2 QueryRunner SQL执行操作类(多线程安全)"></a>9.2 QueryRunner SQL执行操作类(多线程安全)</h2><p>官方是这样解释的：</p>
<blockquote>
<p>Executes SQL queries with pluggable strategies for handling <code>ResultSet</code>s. This class is thread safe.</p>
</blockquote>
<p>所有对数据库的CRUD操作都通过 <code>QueryRunner</code> 完成。</p>
<p>如果创建<code>QueryRunner</code>实例时没有提供<code>DataSource</code>数据源参数则在执行CRUD操作方法时需提供数据库连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式 1: 不使用数据源</span></span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//方式 2：使用数据源，数据源通过其它方式获得并传入构造中</span></span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>([DataSource]);</span><br></pre></td></tr></table></figure>

<h3 id="普通查询（无占位符参数）"><a href="#普通查询（无占位符参数）" class="headerlink" title="普通查询（无占位符参数）"></a>普通查询（无占位符参数）</h3><p>以下示例均以junit 单元测试提供。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuerySingleEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from emp where ename=&#x27;ZHANG&#x27;&quot;</span>;</span><br><span class="line">    <span class="comment">//默认dbutil会通过结果集的类名与bean的属性名进行反射，</span></span><br><span class="line">    <span class="comment">//如果列名与bean的属性名不一致时可以为列名取别名来解决</span></span><br><span class="line">    ResultSetHandler&lt;Employee&gt; rsh = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;Employee&gt;(Employee.class);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> runner.query(conn, sql, rsh);</span><br><span class="line">      System.out.println(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="带占位符参数查询"><a href="#带占位符参数查询" class="headerlink" title="带占位符参数查询"></a>带占位符参数查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryEmployeeList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//复杂查询时SQL语句需动态构建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from emp where ename like ? and sal between ? and ?&quot;</span>;</span><br><span class="line">    <span class="comment">//默认dbutil会通过结果集的类名与bean的属性名进行反射，</span></span><br><span class="line">    <span class="comment">//如果列名与bean的属性名不一致时可以为列名取别名来解决</span></span><br><span class="line">    ResultSetHandler&lt;List&lt;Employee&gt;&gt; rsh = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;Employee&gt;(Employee.class);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = runner.query(conn, sql, rsh,<span class="string">&quot;%A%&quot;</span>,<span class="number">1000.0</span>,<span class="number">5000.0</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e : list) &#123;</span><br><span class="line">          System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="标量查询"><a href="#标量查询" class="headerlink" title="标量查询"></a>标量查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(empno) AS r from emp&quot;</span>;</span><br><span class="line">    ResultSetHandler&lt;BigDecimal&gt; rsh = <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>&lt;BigDecimal&gt;(<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">rows</span> <span class="operator">=</span> runner.query(conn, sql, rsh);</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> rows.intValue();</span><br><span class="line">        System.out.println(rows);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//SQL语句可能需动态构建，参考以前JDBC的代码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into emp(EMPNO,ENAME,MGR,HIREDATE,SAL,DEPTNO) values(?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 返回数据库受影响的行数，即插入的行数</span></span><br><span class="line">      	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> runner.update(conn, sql, <span class="number">8136</span>,<span class="string">&quot;Alex&quot;</span>,<span class="number">7369</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()),<span class="number">4440.0</span>,<span class="number">10</span>);</span><br><span class="line">      	System.out.println(i);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      	e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//SQL语句可能需动态构建，参考以前JDBC的代码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update emp set ENAME=?,JOB=?,SAL=? Where EMPNO=?&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 返回数据库受影响的行数，即更新的行数</span></span><br><span class="line">      	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> runner.update(conn, sql, <span class="number">8136</span>,<span class="string">&quot;Alex&quot;</span>,<span class="number">7369</span>,<span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime()),<span class="number">4440.0</span>,<span class="number">10</span>);</span><br><span class="line">      	System.out.println(i);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//SQL语句可能需动态构建，参考以前JDBC的代码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete employee Where EMPNO=?&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 返回数据库受影响的行数，即删除的行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> runner.update(conn, sql, <span class="number">8136</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM：详解GC</title>
    <url>/2024/08/13/JVM-gc/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>据我看到的面试题有：判断垃圾回收的算法有什么，以及是什么原理，垃圾收集算法有什么，常见的垃圾回收器有什么，什么是STW等，所以这篇博客基于GC给大家介绍，如果有其他面试题可以在评论区发言，博客可修改内容，可添加。</p>
<h1 id="一、判断垃圾回收的算法"><a href="#一、判断垃圾回收的算法" class="headerlink" title="一、判断垃圾回收的算法"></a>一、判断垃圾回收的算法</h1><p>先提前说两个算法，分别是：</p>
<ol>
<li><p>引用标记算法</p>
</li>
<li><p>可达性分析算法</p>
</li>
</ol>
<h2 id="1-引用标记算法"><a href="#1-引用标记算法" class="headerlink" title="1.引用标记算法"></a>1.引用标记算法</h2><p>引用标记算法是在Java对象头（Java对象头在介绍多线程的时候有详细的解释，直达链接：<a href="https://rengoku.top/2024/08/05/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E4%B8%89%E3%80%81%E9%94%81/">Java多线程：三、多线程锁、java锁的实现</a>）中开辟空间，记录<strong>被引用的次数（Reference Count）</strong>，如果A变量被其他对象引用时计数器+1，引用A变量的其他变量被删除则-1，如果计数器为0时，则判断A变量需要被回收。</p>
<p>举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我不想上早八&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>此时，在Java虚拟机栈（以下简称栈）开辟一个内存空间记录str，此时堆中的字符串常量池的“我不想上早八”，被引用的次数就是1（Reference Count&#x3D;1），此时我做修改操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;其实我想上早七&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>此时，在栈中的变量str原本引用常量池的”我不想上早八”引用次数为0，那么这一块就会被回收。</p>
<p>引用标记算法的回收机制遍布整个代码运行时期而没有集中于垃圾回收时期，因此不属于”Stop-The-World”的范围。</p>
<blockquote>
<p>“Stop The World”是 Java 垃圾收集中的一个重要概念。在垃圾收集过程中，JVM 会暂停所有的用户线程，这种暂停被称为”Stop The World”事件。</p>
<p>这么做的主要原因是为了防止在垃圾收集过程中，用户线程修改了堆中的对象，导致垃圾收集器无法准确地收集垃圾。</p>
</blockquote>
<p><strong>引用标记算法存在的问题：</strong></p>
<p>无法解决循环依赖的问题，看代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReferenceCountingGC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object instance;  <span class="comment">// 对象属性，用于存储对另一个 ReferenceCountingGC 对象的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReferenceCountingGC</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testGC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建两个 ReferenceCountingGC 对象</span></span><br><span class="line">        <span class="type">ReferenceCountingGC</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceCountingGC</span>(<span class="string">&quot;我爱玩原神&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceCountingGC</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceCountingGC</span>(<span class="string">&quot;那维莱特一次回调比得上3年的陪伴&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使 a 和 b 相互引用</span></span><br><span class="line">        a.instance = b;</span><br><span class="line">        b.instance = a;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 a 和 b 设置为 null</span></span><br><span class="line">        a = <span class="literal">null</span>;</span><br><span class="line">        b = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个位置是垃圾回收的触发点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在代码中a,b变量相互引用，即使将将 a 和 b 设置为 null，也无法将字符串的引用改变（即Reference Count没有被减到0）。从案例可以知道，这样写永远无法通知GC对这两个字符串进行收集。</p>
<h2 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h2><p>现代虚拟机基本都是采用可达性分析算法来判断对象是否存活，可达性算法的原理是以一系列叫做  <strong>GC Root</strong> 的对象为起点出发，引出它们指向的下一个节点，再以下个节点为起点，引出此节点指向的下一个结点。这样通过 GC Root 串成的一条线就叫引用链），直到所有的结点都遍历完毕,如果相关对象不在任意一个以 <strong>GC Root</strong> 为起点的引用链中，则这些对象会被判断为垃圾对象,会被 GC 回收。</p>
<p><img src="Snipaste_2024-08-13_10-31-47.png"></p>
<p><strong>a, b 对象可回收，就一定会被回收吗?</strong></p>
<p>并不是，对象的 finalize 方法给了对象一次垂死挣扎的机会，当对象不可达（可回收）时，当发生GC时，会先判断对象是否执行了 finalize 方法，如果未执行，则会先执行 finalize 方法，我们可以在此方法里将当前对象与 GC Roots 关联，这样执行 finalize 方法之后，GC 会再次判断对象是否可达，如果不可达，则会被回收，如果可达，则不回收！</p>
<p><strong>注意：</strong> finalize 方法只会被执行一次，如果第一次执行 finalize 方法此对象变成了可达确实不会回收，但如果对象再次被 GC，则会忽略 finalize 方法，对象会被回收！这一点切记!</p>
<p><strong>GC Roots 到底是什么东西呢，哪些对象可以作为 GC Root 呢？</strong></p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>本地方法栈中 JNI（即一般说的 Native 方法）引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
</ul>
<p>关于这四个例子可以参考：<a href="https://blog.csdn.net/weixin_38007185/article/details/108093716">GC Roots 是什么？哪些对象可以作为 GC Root？看完秒懂！-CSDN博客</a></p>
<h1 id="二、八股：垃圾收集算法"><a href="#二、八股：垃圾收集算法" class="headerlink" title="二、八股：垃圾收集算法"></a>二、八股：垃圾收集算法</h1><p>阿里八股16题，我们来详细的谈谈：</p>
<h2 id="1-标记清除算法"><a href="#1-标记清除算法" class="headerlink" title="1.标记清除算法"></a>1.标记清除算法</h2><p>标记清除算法（Mark-Sweep）是最基础的一种垃圾回收算法，它分为 2 部分，先把内存区域中的这些对象进行标记，哪些属于可回收的标记出来（用前面提到的可达性分析法），然后把这些垃圾拎出来清理掉。</p>
<p><img src="gc-20231227125304.png"></p>
<p>标记清除算法存在一个缺陷，在垃圾回收以后会产生内存碎片，无法应对需要一口气分配大内存的情况。</p>
<blockquote>
<p>内存碎片化是指在内存分配和回收过程中，被释放的内存空间没有被合并成较大的连续空间，而是形成了许多小块的、不连续的内存区域。这会导致在后续需要分配大块连续内存时，系统可能无法找到足够的连续空间，从而影响程序的性能和稳定性。</p>
</blockquote>
<h2 id="2-复制算法"><a href="#2-复制算法" class="headerlink" title="2.复制算法"></a>2.复制算法</h2><p>复制算法（Copying）是在标记清除算法上演化而来的，用于解决标记清除算法的内存碎片问题。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。</p>
<p>当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样就保证了内存的连续性，逻辑清晰，运行高效。</p>
<p><img src="gc-20231227125751.png"></p>
<p>但是也是存在一个大缺陷，相当于一大堆的内存我只能当一半用。</p>
<h2 id="3-标记整理算法"><a href="#3-标记整理算法" class="headerlink" title="3.标记整理算法"></a>3.标记整理算法</h2><p>标记整理算法（Mark-Compact），标记过程仍然与标记清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，再清理掉端边界以外的内存区域。</p>
<p><img src="gc-20231227130011.png"></p>
<p>标记整理算法一方面在标记-清除算法上做了升级，解决了内存碎片的问题，也规避了复制算法只能利用一半内存区域的弊端。看起来很美好，但内存变动更频繁，需要整理所有存活对象的引用地址，在效率上比复制算法差很多。</p>
<h2 id="4-分代收集算法"><a href="#4-分代收集算法" class="headerlink" title="4.分代收集算法"></a>4.分代收集算法</h2><h3 id="4-1-分代收集算法组合拳"><a href="#4-1-分代收集算法组合拳" class="headerlink" title="4.1 分代收集算法组合拳"></a>4.1 分代收集算法组合拳</h3><p>分代收集算法（Generational Collection）严格来说并不是一种思想或理论，而是融合上述 3 种基础的算法思想，而产生的针对不同情况所采用不同算法的一套组合拳。</p>
<p>根据对象存活周期的不同会将内存划分为几块，一般是把 <strong>Java 堆分为新生代和老年代</strong>，这样就可以根据各个年代的特点采用最适当的收集算法。</p>
<p><img src="gc-20231227131241.png"></p>
<p>在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。</p>
<p>老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用标记清理或者标记整理算法来进行回收。</p>
<blockquote>
<p>这里提到了新生代和永久代，在JVM运行时数据区中也提到了一个”代“叫永久代，还记得永久代是什么吗？</p>
<p>永久代也叫方法区，在jdk8之后被代替成了元空间，运行时常量池放在元空间中，而字符串常量池在堆中。</p>
</blockquote>
<h3 id="4-2-新生代和老年代"><a href="#4-2-新生代和老年代" class="headerlink" title="4.2 新生代和老年代"></a>4.2 新生代和老年代</h3><p>堆主要分为 2 个区域，年轻代与老年代，其中年轻代又分 Eden 区和 Survivor 区，其中 Survivor 区又分 From 和 To 两个区。</p>
<p><img src="gc-20231227132701.png"></p>
<h4 id="4-2-1-Eden-区"><a href="#4-2-1-Eden-区" class="headerlink" title="4.2.1 Eden 区"></a>4.2.1 Eden 区</h4><p>据 IBM 公司之前的研究表明，有将近 98% 的对象是朝生夕死，所以针对这一现状，大多数情况下，对象会在新生代 Eden 区中进行分配，当 Eden 区没有足够空间进行分配时，JVM 会发起一次 Minor GC，Minor GC 相比 Major GC 更频繁，回收速度也更快。</p>
<p>通过 Minor GC 之后，Eden 区中绝大部分对象会被回收，而那些无需回收的存活对象，将会进到 Survivor 的 From 区，如果 From 区不够，则直接进入 To 区。</p>
<p><strong>什么是Minor GC和Major GC？</strong></p>
<p>Minor GC是新生代的GC，Major GC是老年代的GC</p>
<p><strong>Survivor区的from和to角色切换</strong></p>
<ol>
<li>初始状态<ul>
<li>在JVM启动时，两个Survivor区中的一个被指定为from区，另一个为to区。这个初始分配是任意的，但一旦确定，它们将在后续的GC过程中交替使用。</li>
</ul>
</li>
<li>Minor GC过程<ul>
<li>当Eden区满或JVM认为需要执行Minor GC时，GC过程开始。</li>
<li>此时，from区存储着上一次GC后存活下来的对象。</li>
<li>GC扫描Eden区和from区，将存活的对象复制到to区。</li>
<li>如果对象的年龄（即经历Minor GC的次数）达到一定程度（默认是15次，但可以通过参数<code>-XX:MaxTenuringThreshold</code>来设定），则这些对象可能会被移动到老年代（Old Generation）。</li>
<li>GC完成后，Eden区和from区的内容被清空，然后这两个区域的角色互换：原来的to区变为新的from区，原来的from区变为新的to区。</li>
</ul>
</li>
<li>持续交替<ul>
<li>上述过程在每次Minor GC时都会重复，导致Survivor区的from和to角色持续交替。</li>
</ul>
</li>
</ol>
<h4 id="4-2-2-Survivor-区"><a href="#4-2-2-Survivor-区" class="headerlink" title="4.2.2 Survivor 区"></a>4.2.2 Survivor 区</h4><p>Survivor 区相当于是 Eden 区和 Old 区的一个缓冲，类似于我们交通灯中的黄灯。</p>
<p><strong>为啥需要 Survivor 区？</strong></p>
<p>不就是新生代到老年代吗，直接 Eden 到 Old 不好了吗，为啥要这么复杂。</p>
<p>如果没有 Survivor 区，Eden 区每进行一次 Minor GC，存活的对象就会被送到老年代，老年代很快就会被填满。而有很多对象虽然一次 Minor GC 没有消灭，但其实也并不会蹦跶多久，或许第二次，第三次就需要被清除。</p>
<p>这时候移入老年区，很明显不是一个明智的决定。</p>
<p>所以，Survivor 的存在意义就是减少被送到老年代的对象，进而减少 Major GC 的发生。Survivor 的预筛选保证，只有经历 16 次 Minor GC 还能在新生代中存活的对象，才会被送到老年代。</p>
<p><strong>Survivor 区为啥划分为两块？</strong></p>
<p>设置两个 Survivor 区最大的好处就是解决内存碎片化，我们先假设一下，Survivor 只有一个区域会怎样。</p>
<p>Minor GC 执行后，Eden 区被清空，存活的对象放到了 Survivor 区，而之前 Survivor 区中的对象，可能也有一些是需要被清除的。那么问题来了，这时候我们怎么清除它们？</p>
<p>在这种场景下，我们只能标记清除，而我们知道标记清除最大的问题就是内存碎片，在新生代这种经常会消亡的区域，采用标记清除必然会让内存产生严重的碎片化。</p>
<p>但因为 Survivor 有 2 个区域，所以每次 Minor GC，会将之前 Eden 区和 From 区中的存活对象复制到 To 区域。第二次 Minor GC 时，From 与 To 职责兑换，这时候会将 Eden 区和 To 区中的存活对象再复制到 From 区域，以此反复。</p>
<p>这种机制最大的好处就是，整个过程中，永远有一个 Survivor space 是空的，另一个非空的 Survivor space 是无碎片的。</p>
<p>那么，Survivor 为什么不分更多块呢？比方说分成三个、四个、五个？</p>
<p>显然，如果 Survivor 区再细分下去，每一块的空间就会比较小，容易导致 Survivor 区满，两块 Survivor 区可能是经过权衡之后的最佳方案。</p>
<h4 id="4-2-3-Old-区"><a href="#4-2-3-Old-区" class="headerlink" title="4.2.3 Old 区"></a>4.2.3 Old 区</h4><p>老年代占据着 2&#x2F;3 的堆内存空间，只有在 Major GC 的时候才会进行清理，每次 GC 都会触发“Stop-The-World”。内存越大，STW 的时间也越长，所以内存也不仅仅是越大就越好。</p>
<p>由于复制算法在对象存活率较高的老年代会进行很多次的复制操作，效率很低，所以老年代这里采用的是标记整理算法。</p>
<h2 id="5-组合拳如何体现？"><a href="#5-组合拳如何体现？" class="headerlink" title="5.组合拳如何体现？"></a>5.组合拳如何体现？</h2><p>对于前三种收集算法，我们采用分代收集将前三种混合。</p>
<p><strong>新生代，主要采用复制算法</strong>，我相信聪明的你能看得出来，<strong>Survivor 区的from和to区就是复制算法中提到的，将内存一分为二的部分。</strong></p>
<p><strong>老年代，采用标记整理算法</strong>，理由有这些（ai部分）：</p>
<ol>
<li><strong>存活率高</strong>：老年代中的对象通常已经经过了多次垃圾回收周期，存活率较高。这意味着在每次垃圾回收时，只有少数对象会被回收，而大部分对象都会保留下来。如果使用复制算法，需要将存活的对象复制到另一块内存区域，这将导致大量的数据复制操作，不仅效率低下，还会增加系统的停顿时间。</li>
<li><strong>内存空间</strong>：老年代通常占据堆内存的大部分空间，以容纳更多的长时间存活对象。如果采用复制算法，需要为老年代分配同样大小的额外内存空间作为复制的目标区域，这在很多情况下是不现实的，因为这将极大地增加内存的使用量。</li>
<li><strong>内存碎片</strong>：虽然复制算法可以避免内存碎片的产生，但在老年代中，内存碎片的问题并不像新生代那样严重。老年代中的对象通常较大，且存活时间较长，因此内存碎片对性能的影响相对较小。相比之下，减少内存碎片并不是老年代选择垃圾收集算法的主要考虑因素。</li>
<li><strong>算法适用性</strong>：不同的垃圾收集算法适用于不同的场景。复制算法由于其简单性和高效性，在新生代中得到了广泛应用。然而，在老年代中，由于对象的特性和内存空间的需求，更适合采用其他类型的垃圾收集算法，如标记-清除、标记-整理或混合使用多种算法（如G1收集器中的混合收集策略，G1收集器下文介绍）。</li>
</ol>
<h1 id="三、垃圾收集器"><a href="#三、垃圾收集器" class="headerlink" title="三、垃圾收集器"></a>三、垃圾收集器</h1><p>垃圾收集器在这篇博客有8种，我把总览放出来，然后讲几个比较常用的：<a href="https://blog.csdn.net/weixin_44772566/article/details/136248892">一文彻底搞懂八种JVM垃圾回收器_说一下 jvm 有哪些垃圾回收器?-CSDN博客</a></p>
<p><img src="b7066e4374f7d7397613068ac5fdf5b1.png"></p>
<h2 id="1-CMS收集器"><a href="#1-CMS收集器" class="headerlink" title="1.CMS收集器"></a>1.CMS收集器</h2><p><strong>CMS垃圾收集器旨在降低STW的时间，允许垃圾回收器进行垃圾回收的同时，与应用程序并发进行。</strong></p>
<h3 id="1-1-步骤"><a href="#1-1-步骤" class="headerlink" title="1.1 步骤"></a>1.1 步骤</h3><p>CMS 垃圾收集器通过三色标记算法，实现了垃圾回收线程与用户线程的并发执行，从而极大地降低了系统响应时间，提高了强交互应用程序的体验。它的运行过程分为 4 个步骤，包括：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>重新标记</li>
<li>并发清除</li>
</ul>
<p><strong>初始标记</strong>，指的是寻找所有被 GCRoots 引用的对象，该阶段需要「Stop the World」。这个步骤仅仅只是标记一下 GC Roots 能直接关联到的对象，并不需要做整个引用的扫描，因此速度很快。</p>
<p><strong>并发标记</strong>，指的是对「初始标记阶段」标记的对象进行整个引用链的扫描，该阶段不需要「Stop the World」。 对整个引用链做扫描需要花费非常多的时间，因此通过垃圾回收线程与用户线程并发执行，可以降低垃圾回收的时间。</p>
<p>这也是 CMS 能极大降低 GC 停顿时间的核心原因，但这也带来了一些问题，即：并发标记的时候，引用可能发生变化，因此可能发生漏标（本应该回收的垃圾没有被回收）和多标（本不应该回收的垃圾被回收）了。</p>
<p><strong>重新标记</strong>，指的是对「并发标记」阶段出现的问题进行校正，该阶段需要「Stop the World」。正如并发标记阶段说到的，由于垃圾回收算法和用户线程并发执行，虽然能降低响应时间，但是会发生漏标和多标的问题。所以对于 CMS 来说，它需要在这个阶段做一些校验，解决并发标记阶段发生的问题。</p>
<p><strong>并发清除</strong>，指的是将标记为垃圾的对象进行清除，该阶段不需要「Stop the World」。 在这个阶段，垃圾回收线程与用户线程可以并发执行，因此并不影响用户的响应时间。</p>
<p><strong>注：</strong><br>收集区域： 老年代（见图常用的垃圾收集器。标记清除和标记整理也是用于老年代的垃圾收集算法，可以回看）<br>使用算法： 标记清除法+标记整理法<br>搜集方式： 多线程</p>
<h3 id="1-2-优劣势"><a href="#1-2-优劣势" class="headerlink" title="1.2 优劣势"></a>1.2 优劣势</h3><p>优点总结就是支持垃圾回收和程序执行的并发，降低STW时间，详细的可以参考以下内容：</p>
<p>并发标记和清除：CMS 垃圾收集器采用了并发标记和清除的方式，允许在垃圾收集过程中与应用程序并发执行。这意味着垃圾收集过程中只有一小部分时间需要暂停应用程序线程。<br>低停顿时间：由于并发执行的特性，CMS 垃圾收集器能够在较短的时间内完成垃圾回收操作，从而减少了应用程序的停顿时间。通常情况下，CMS 垃圾收集器能够将停顿时间控制在几百毫秒甚至更低。<br>老年代收集：CMS 垃圾收集器主要针对老年代进行垃圾回收，对于新生代则通常使用 ParNew 收集器。这种分代收集的方式能够更好地适应不同内存区域的特点和垃圾回收需求。</p>
<blockquote>
<p>这里提到了ParNew收集器，那么我也写一下，本来不想写来着（）</p>
</blockquote>
<p>劣势从算法考虑，无非就是会产生内存碎片，以及在垃圾收集与应用程序并发执行的过程中，应用程序也会一直产生垃圾，这个垃圾称为浮游垃圾，这部分只能等到下一次gc来处理，另外这两个并发的话，如果cpu的核心数（对线程的处理能力低）那么CMS的性能肯定会大打折扣。</p>
<h2 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2.ParNew收集器"></a>2.ParNew收集器</h2><p>在上边提到的CMS收集器是针对老年代的，而ParNew收集器针对新生代的部分进行垃圾回收，通常和CMS收集器共同进行gc。查到的资料有显示，ParNew收集器是唯一的一个可以和CMS收集器打配合的。</p>
<p><strong>垃圾收集流程</strong><br>ParNew 收集器和 Parallel Scavenge 收集器在工作流程上确实非常相似，都是并行垃圾收集器。</p>
<ol>
<li><p>停止应用程序线程（Stop the World）：在进行垃圾收集之前，ParNew 收集器会暂停所有的用户线程。这一阶段被称为停止应用程序线程，以确保在垃圾收集过程中对象的状态不会被修改，保证垃圾回收的准确性。</p>
</li>
<li><p>多线程并行执行垃圾收集：一旦应用程序线程暂停，ParNew 收集器会启动多个线程并行执行垃圾回收操作。这些线程会同时在新生代中扫描和清理不再使用的对象，以释放内存空间。</p>
</li>
<li><p>暂停用户线程：在整个垃圾收集过程中，用户线程会一直处于暂停状态，直到垃圾收集完成。这个阶段也被称为“Stop the World”，在此期间应用程序无法执行任何操作。</p>
</li>
<li><p>恢复用户线程：当垃圾收集完成后，ParNew 收集器会恢复用户线程的执行。此时，垃圾已经被清理，堆中的内存空间得到了释放，用户线程可以继续执行。</p>
</li>
</ol>
<p>ParNew 收集器的工作流程与 Parallel Scavenge 收集器类似，都是通过停止应用程序线程，然后利用多线程并行执行垃圾回收操作，最后恢复用户线程的执行。这种并行执行的方式能够提高垃圾收集的效率，同时在暂停用户线程期间确保垃圾收集的准确性。</p>
<p><strong>注：</strong><br>收集区域： 新生代<br>使用算法： 标记复制法<br>搜集方式： 多线程。</p>
<p>正常来说，ParNew收集器和CMS收集器是一起打配合的，他俩在分类来说都是分代收集器，一个作用于新生代，一个作用于老年代。</p>
<h2 id="3-G1收集器"><a href="#3-G1收集器" class="headerlink" title="3.G1收集器"></a>3.G1收集器</h2><p>G1 垃圾收集器摒弃了传统的物理分区方式，而是将整个内存分成若干个大小不同的 Region 区域。每个 Region 在逻辑上组合成各个分代，这样做的好处是可以以 Region 为单位进行更细粒度的垃圾回收。G1 垃圾收集器在进行垃圾回收时，可以针对单个或多个 Region 进行回收，从而提高了收集效率和性能。</p>
<p>下面介绍一下G1的相关内容：</p>
<p><strong>分代：</strong>相信大家还记得我们上一讲中的年轻代和老年代，G1 也是基于这个思想进行设计的。<strong>G1舍弃分代，转变为分区，</strong>将堆内存分为多个大小相等的区域（Region），每个区域都可以是 Eden 区、Survivor 区或者 Old 区。</p>
<p><img src="gc-collector-20231228213824.png"></p>
<p>可以通过 <code>-XX:G1HeapRegionSize=n</code> 来设置 Region 的大小，可以设定为 1M、2M、4M、8M、16M、32M（不能超过）。</p>
<p>G1 有专门分配大对象的 Region 叫 Humongous 区，而不是让大对象直接进入老年代的 Region 中。在 G1 中，大对象的判定规则就是一个大对象超过了一个 Region 大小的 50%，比如每个 Region 是 2M，只要一个对象超过了 1M，就会被放入 Humongous 中，而且一个大对象如果太大，可能会横跨多个 Region 来存放。</p>
<p>G1 会根据各个区域的垃圾回收情况来决定下一次垃圾回收的区域，这样就避免了对整个堆内存进行垃圾回收，从而降低了垃圾回收的时间。</p>
<p>在进行老年代的垃圾回收时，G1 使用标记-整理算法。这个过程分为两个阶段：标记存活的对象和整理（压缩）堆空间。通过整理，G1 能够避免内存碎片化，提高内存利用率。年轻代的垃圾回收（Minor GC）使用复制算法，因为年轻代的对象通常是朝生夕死的。</p>
<p><img src="gc-collector-20231230100404.png"></p>
<p><strong>STW：</strong>G1 也是基于「标记-清除」算法，因此在进行垃圾回收的时候，仍然需要「Stop the World」。不过，G1 在停顿时间上添加了预测机制，用户可以指定期望停顿时间。</p>
<p><strong>接下来介绍G1的三种回收机制：</strong></p>
<p><img src="gc-collector-20231228215108.png"></p>
<p>当 Eden 区的内存空间无法支持新对象的内存分配时，G1 会触发 Young GC。</p>
<p>当需要分配对象到 Humongous 区域或者堆内存的空间占比超过 <code>-XX:G1HeapWastePercent</code> 设置的 InitiatingHeapOccupancyPercent 值时，G1 会触发一次 concurrent marking，它的作用就是计算老年代中有多少空间需要被回收，当发现垃圾的占比达到 <code>-XX:G1HeapWastePercent</code> 中所设置的 G1HeapWastePercent 比例时，在下次 Young GC 后会触发一次 Mixed GC。</p>
<p>Mixed GC 是指回收年轻代的 Region 以及一部分老年代中的 Region。Mixed GC 和 Young GC 一样，采用的也是复制算法。</p>
<p>在 Mixed GC 过程中，如果发现老年代空间还是不足，此时如果 G1HeapWastePercent 设定过低，可能引发 Full GC。<code>-XX:G1HeapWastePercent</code> 默认是 5，意味着只有 5% 的堆是“浪费”的。如果浪费的堆的百分比大于 G1HeapWastePercent，则运行 Full GC。</p>
<p><strong>注：</strong><br>收集区域： 整个堆内存<br>使用算法： 标记复制法<br>搜集方式： 多线程</p>
<h2 id="4-ZGC"><a href="#4-ZGC" class="headerlink" title="4.ZGC"></a>4.ZGC</h2><p>参考一开始的博客链接。</p>
<h1 id="四、对象分配规则"><a href="#四、对象分配规则" class="headerlink" title="四、对象分配规则"></a>四、对象分配规则</h1><p>根据分代收集算法，将堆内存分为新生代和老年代，新生代分为eden区，Survivor from和Survivor to区，老年代为old区。</p>
<p><strong>1.对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。</strong> </p>
<p>Minor GC 后，又创建的新对象会继续往 Eden 区分配。于是，随着新对象的创建，Eden 的剩余内存空间就会越来越少，又会触发 Minor GC，此时，JVM 会对 Eden 区和 From Survivor 区中的对象进行存活判断，对于存活的对象，会转移到 To Survivor 区。下一次 Minor GC，存活的对象又会从 To 到 From，这样就总有一个 Survivor 区是空的，而另外一个是无碎片的。</p>
<p><strong>2.大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。</strong></p>
<p>这样做的目的是避免在 Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。 </p>
<p>可以通过 <code>-XX:PretenureSizeThreshold</code> 参数设置直接分配大对象到老年代的阈值。如果对象的大小超过这个阈值，它将直接在老年代中分配。例如，如果想将阈值设置为 1MB（1024KB），可以这样设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:PretenureSizeThreshold=1048576</span><br></pre></td></tr></table></figure>

<p><strong>3.长期存活的对象进入老年代。</strong></p>
<p>虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次 Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC（从一个 Survivor 区转移到另外一个 Survivor 区时）那么对象的年龄加1，直到达到阀值对象进入老年区。 </p>
<p><strong>4.动态判断对象的年龄。</strong></p>
<p>如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的 一半，年龄大于或等于该年龄的对象可以直接进入老年代。 </p>
<p><strong>5.空间分配担保。</strong></p>
<p>整个流程如下：</p>
<ul>
<li>Minor GC 之前，JVM 会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果大于，则发起 Minor GC。</li>
<li>如果小于，则看 HandlePromotionFailure 有没有设置，如果没有设置，就发起 Full GC。</li>
<li>如果设置了 HandlePromotionFailure，则看老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果小于，就发起 Full GC。</li>
<li>如果大于，发起 Minor GC。Minor GC 后，看 Survivor 空间是否足够存放存活对象，如果不够，就放入老年代，如果够放，就直接存放 Survivor 空间。如果老年代都不够放存活对象，担保失败（Handle Promotion Failure），发起 Full GC。</li>
</ul>
<p><img src="whereis-the-object-8.png"></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>判断是否需要进行垃圾回收的算法有<strong>引用标记算法和可达性分析算法</strong>，前者使用Java对象头的Reference Count属性，后者依靠引用关系，解决前者不能解决循环依赖的问题。</p>
<p>垃圾收集算法有标记清除算法（存在内存碎片化问题）、复制算法（内存分割出去不划算）、标记整理算法（需要改动引用对象地址，效率低）、分代收集算法（前三种的组合拳），其中学习了stop-to-world是什么，新生代和老年代是什么，复习了Java对象头和永久代，JVM运行时数据区。</p>
<p>垃圾收集器介绍了CMS、ParNew、G1等，其中，CMS和ParNew作为分区收集器，共同打配合清理堆内存。</p>
<p>基于分代收集的算法（组合拳），对象的分配规则由eden-&gt;Survivor-&gt;old区主键分配，其中根据不同的情况进行minor gc和full gc。</p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java：JDK8函数式接口、lambda表达式、方法引用</title>
    <url>/2024/07/06/Java-JDK8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E3%80%81lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一、函数式接口"><a href="#一、函数式接口" class="headerlink" title="一、函数式接口"></a>一、函数式接口</h1><p>只有一个抽象方法的接口就成为函数式接口。同时，引入了一个新的注解：@FunctionalInterface。可以把他它放在一个接口前，表示这个接口是一个函数式接口。这个注解是非必须的，只要接口只包含一个方法的接口，虚拟机会自动判断，不过最好在接口上使用注解 @FunctionalInterface 进行声明。在接口中添加了 @FunctionalInterface 的接口，只允许有一个抽象方法，否则编译器也会报错。</p>
<p>举例几个Java常用的函数式接口：predicate断言型接口、consumer消费者接口、supplier提供者接口、Function接口等。</p>
<p><strong>记好一句话：函数式接口可以接收匿名内部类和lambda表达式</strong></p>
<p><strong>记好一句话：函数式接口可以接收匿名内部类和lambda表达式</strong></p>
<p><strong>记好一句话：函数式接口可以接收匿名内部类和lambda表达式</strong></p>
<p><strong>全文重点：</strong></p>
<p>俗话说，new一个接口就要new他的实现类对象，但是假设我不存在函数时接口的实现类对象，那么一般就使用匿名内部类的形式创建对象。创建出来的匿名内部类需要实现函数式接口中全部（其实就一个）的抽象方法。既然是匿名内部类的抽象方法，当然可以使用lambda表达式代替方法的实现。然而使用lambda表达式虽然简便了书写，但是代码的可读性也直线下降，没有注解的情况去读lambda表达式十分痛苦，为了针对代码可读性的问题，方法引用应运而生。方法引用作为lambda表达式的语法糖，可以简化lambda表达式的同时，提高代码的可读性，方法引用通过本篇博客的三种情况，代替lambda表达式的书写。</p>
<h3 id="1-1-Predicate"><a href="#1-1-Predicate" class="headerlink" title="1.1 Predicate"></a>1.1 Predicate</h3><p><code>java.util.function.Predicate</code>为函数式接口，predicate的中文意思是“断定”，即判断的意思，判断某个东西是否满足某种条件； 因此它包含test方法，根据输入值来做逻辑判断，其结果为True或者False。</p>
<ul>
<li><code>Predicate</code> 是一个布尔类型的函数，该函数只有一个输入参数。</li>
<li><code>Predicate</code>接口包含了多种默认方法，用于处理复杂的逻辑动词（<em>and, or, negate</em>）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt;&#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是使用<code>Predicate</code>的例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;Integer&gt; atLeast5 = x -&gt; x&gt;<span class="number">5</span>;</span><br><span class="line">predicate.test(<span class="number">3</span>);              <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>;</span><br><span class="line">predicate.test(<span class="string">&quot;foo&quot;</span>);          <span class="comment">// true</span></span><br><span class="line">predicate.negate().test(<span class="string">&quot;foo&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;Boolean&gt; nonNull = Objects::nonNull;</span><br><span class="line">System.out.println(nonNull.test(<span class="literal">null</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;Boolean&gt; isNull = Objects::isNull;</span><br><span class="line">System.out.println(isNull.test(<span class="literal">null</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; isEmpty = String::isEmpty;</span><br><span class="line">System.out.println(isEmpty.test(<span class="string">&quot;&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br><span class="line">System.out.println(isNotEmpty.test(<span class="string">&quot;&quot;</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p><em>x&gt;5</em> 是表达式的主体，返回值就是表达式主体的值。</p>
<h3 id="1-2-Function"><a href="#1-2-Function" class="headerlink" title="1.2 Function"></a>1.2 Function</h3><p><code>java.util.function.Function</code>也是一个函数式编程接口；它代表的含义是“函数”，而函数经常是<strong>有输入输出</strong>的，因此它含有一个<em>apply方法</em>，<em>包含一个输入（一个参数）与一个输出（返回值）</em>；<br> 除apply方法外，它还有<em>compose</em> 与 <em>andThen</em>方法。</p>
<ul>
<li><p>**高阶函数: **</p>
<p>接受一个函数或返回一个函数。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; f = s -&gt; s + <span class="number">1</span>;</span><br><span class="line">Function&lt;Integer, Integer&gt; g = s -&gt; s * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高阶函数: 接受一个函数或返回一个函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 下面表示在执行F时，先执行G，并且执行F时使用G的结果当作输入。</span></span><br><span class="line"><span class="comment"> * 相当于以下代码：</span></span><br><span class="line"><span class="comment"> * Integer a = g.apply(1);</span></span><br><span class="line"><span class="comment"> * System.out.println(f.apply(a));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(f.compose(g).apply(<span class="number">1</span>)); <span class="comment">//output: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示执行F的 apply 后使用其返回的值当作输入再执行G的Apply；</span></span><br><span class="line"><span class="comment"> * 相当于以下代码</span></span><br><span class="line"><span class="comment"> * Integer a = f.apply(1);</span></span><br><span class="line"><span class="comment"> * System.out.println(g.apply(a));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println(f.apply(<span class="number">1</span>));            <span class="comment">//output: 2</span></span><br><span class="line">System.out.println(f.andThen(g).apply(<span class="number">1</span>)); <span class="comment">//output: 4</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>转换器实例</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**定义一个转换的函数式接口</span></span><br><span class="line"><span class="comment"> * T：参数类型</span></span><br><span class="line"><span class="comment"> * R：返回值类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Converter</span>&lt;T,R&gt; &#123;</span><br><span class="line">    R <span class="title function_">convert</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConverterTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Converter&lt;String,Integer&gt; intConverter = (s) -&gt; Integer.valueOf(s);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> intConverter.convert(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;String to Integer:&quot;</span> + value);</span><br><span class="line"></span><br><span class="line">        Converter&lt;String,Double&gt; doubleConverter = (s) -&gt; Double.valueOf(s);</span><br><span class="line">      	<span class="type">Double</span> <span class="variable">dblValue</span> <span class="operator">=</span> doubleConverter.convert(<span class="string">&quot;123.99&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;String to Double:&quot;</span> + dblValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接使用 Function 接口</span></span><br><span class="line">        Function&lt;String,Integer&gt; function = s -&gt; Integer.valueOf(s);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value2</span> <span class="operator">=</span> function.apply(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(value2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        <span class="comment">// :: 表示引用方法</span></span><br><span class="line">        <span class="comment">//引用静态方法，类名::类方法名；如：Integer.valueOf(s)</span></span><br><span class="line">      	<span class="comment">//引用实例方法，对象::方法名</span></span><br><span class="line">        Function&lt;String,Integer&gt; function2 = Integer::valueOf;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value3</span> <span class="operator">=</span> function2.apply(<span class="string">&quot;9999&quot;</span>);</span><br><span class="line">        System.out.println(value3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-Consumer-消费者（重点）"><a href="#1-3-Consumer-消费者（重点）" class="headerlink" title="1.3 Consumer 消费者（重点）"></a>1.3 Consumer 消费者（重点）</h3><p>它定义了一个名为<code>accept</code>的<a href="https://so.csdn.net/so/search?q=%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020">抽象方法</a>，该方法接受一个参数并且不返回任何结果。换句话说，<code>Consumer</code>接口表示一个消费者，它可以对给定的对象执行某些操作，但不产生任何结果。</p>
<p><code>accept(T) 方法</code>：是 Consumer 函数式接口的函数方法，传入一个任意类型，无返回值，可以用于 Lambda 表达式和方法引用。<br><code>andThen(Consumer) 方法</code>：可以传入一个 Consumer ，返回组合了两个 Consumer 后的 Consumer ，传入的 Consumer 不能为 null，否则会得到 NullPointerException 。</p>
<p><strong>通俗的来说：</strong><br>Consumer 相当于一个放东西的容器，你可以在这个容器里定义一个带有入参的代码块，然后返回 T 类型，当调用 accept(T) 方法的时候才会去执行容器里的代码。</p>
<p><strong>例子1：</strong>使用类名引用成员方法（类名引用成员方法见本篇博客第三节3.3）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用实例方法</span></span><br><span class="line">Consumer&lt;String&gt; enameConsumer = employee::setEname;</span><br><span class="line">enameConsumer.accept(<span class="string">&quot;mike&quot;</span>);</span><br><span class="line"><span class="comment">// test(enameConsumer);</span></span><br><span class="line">System.out.println(employee.getName());</span><br><span class="line"></span><br><span class="line"><span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> System.out::println;</span><br><span class="line">Arrays.asList(<span class="string">&quot;james&quot;</span>,<span class="string">&quot;andy&quot;</span>,<span class="string">&quot;scott&quot;</span>).forEach(consumer);</span><br></pre></td></tr></table></figure>



<p><strong>例子2：</strong>使用Consumer函数式接口接受lambda表达式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line">public class MainServer &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Consumer&lt;String&gt; first = x -&gt; System.out.println(&quot;1.&quot;+x.toLowerCase());</span><br><span class="line">        Consumer&lt;String&gt; second = y -&gt; System.out.println(&quot;2.&quot; + y);</span><br><span class="line">        System.out.println(&quot;开始&quot;);</span><br><span class="line">        Consumer&lt;String&gt; result = first.andThen(second);</span><br><span class="line">        //调用了accept 后，会先执行 first 容器里的代码，再执行 second 容器里的代码</span><br><span class="line">        result.accept(&quot;A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-Supplier-供应者"><a href="#1-4-Supplier-供应者" class="headerlink" title="1.4 Supplier 供应者"></a>1.4 Supplier 供应者</h3><p>代表无参数，返回一个结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用默认构造函数</span></span><br><span class="line">Supplier&lt;Employee&gt; supplier = Employee::<span class="keyword">new</span>;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> supplier.get();</span><br><span class="line">System.out.println(employee);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用对象的String getName()方法</span></span><br><span class="line">Supplier&lt;String&gt; stringSupplier = employee::getEname;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-BinaryOperator"><a href="#1-5-BinaryOperator" class="headerlink" title="1.5 BinaryOperator"></a>1.5 BinaryOperator</h3><ul>
<li><p><code>BinaryOperator</code><em>接口接收两个参数，返回一个值，返回值和参数的数据类型相同。</em></p>
</li>
<li><p><code>BinaryOperator</code>接口是<code>BiFunction</code> （接收两个参数）的子接口。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BinaryOperator&lt;Long&gt; addLongs = (x,y) -&gt; x + y;</span><br><span class="line">System.out.println(addLongs.apply(<span class="number">1L</span>, <span class="number">2L</span>));</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;Lambda表达式是一个匿名方法，将行为像数据一样传递。&#x3D;&#x3D;</p>
<h1 id="二、Lambda表达式"><a href="#二、Lambda表达式" class="headerlink" title="二、Lambda表达式"></a>二、Lambda表达式</h1><p><img src="%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3.png"></p>
<p><strong>1、Lambda表达式的基本作用?</strong><br>简化函数式接口的<strong>匿名内部类</strong>的写法。</p>
<p><strong>2、Lambda表达式有什么使用前提?</strong><br>必须是接口的匿名内部类，接口中只能有一个抽象方法</p>
<p><strong>3、Lambda的好处?</strong><br>Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码，它可以写出更简洁、更灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升。</p>
<p>举个例子：单列集合arraylist调用foreach方法进行遍历。</p>
<p><img src="forEach.png"></p>
<p>其中方法的参数是<strong>consumer接口</strong>（留意一下consumer接口）的实现类，因此需要使用匿名内部类的形式调用方法，改进后可以使用lambda表达式遍历。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;博主你这个博客是自己写的吗&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;我的天，好有水平，但是我看不懂&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.使用匿名内部类进行遍历</span></span><br><span class="line">        coll.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用lambda表达式进行遍历</span></span><br><span class="line">        coll.forEach(</span><br><span class="line">           (String s)-&gt; &#123;</span><br><span class="line">               System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.lambda简化版</span></span><br><span class="line">        coll.forEach(</span><br><span class="line">                (String s)-&gt; System.out.println(s)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="三、方法引用"><a href="#三、方法引用" class="headerlink" title="三、方法引用"></a>三、方法引用</h1><p><img src="%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.png"></p>
<p>只有使用匿名内部类和lambda表达式的地方才可以使用方法引用。</p>
<p>它的基本思想是，如果一个Lambda代表的只是“直接调用这个方法”，那最好还是用名称来调用它，而不是去描述如何调用它。事实上，方法引用就是让你根据已有的方法实现来创建Lambda表达式。但是，显式地指明方法的名称，你的代码的可读性会更好。</p>
<p><strong>方法引用的规则:</strong></p>
<ol>
<li>需要有函数式接口</li>
<li>被引用的方法必须已经存在</li>
<li>被引用方法的形参，需要跟抽象方法的第二个形参到最后一个形参保持一致， 返回值需要保持一致。</li>
<li>被引用方法的功能需要满足当前的需求</li>
</ol>
<p><strong>抽象方法形参的详解:</strong><br><strong>第一个参数：</strong>表示被引用方法的调用者，决定了可以引用哪些类中的方法<br>在Stream流当中，第一个参数一般都表示流里面的每一个数据。假设流里面的数据是字符串，那么使用这种方式进行方法引用，只能引用String这个类中的方法。<br><strong>第二个参数到最后一个参数：</strong>跟被引用方法的形参保持一致，如果没有第二个参数，说明被引用的方法需要是无参的成员方法</p>
<h2 id="3-1-静态方法引用"><a href="#3-1-静态方法引用" class="headerlink" title="3.1 静态方法引用"></a>3.1 静态方法引用</h2><img src="%E9%9D%99%E6%80%81%E5%BC%95%E7%94%A8.png" style="zoom:80%;">



<p>举个例子</p>
<p><img src="1.png"></p>
<h2 id="3-2-对象引用成员方法"><a href="#3-2-对象引用成员方法" class="headerlink" title="3.2 对象引用成员方法"></a>3.2 对象引用成员方法</h2><img src="%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95.png" style="zoom: 50%;">

<p>this::方法名和super::方法名，这两个的被引用处不能是静态方法，因为静态方法没有this、super关键字</p>
<p>举个例子：</p>
<p><img src="2.png"></p>
<h2 id="3-3-类名引用成员方法"><a href="#3-3-类名引用成员方法" class="headerlink" title="3.3 类名引用成员方法"></a>3.3 类名引用成员方法</h2><p>举个例子：我现在需要把集合中的字母全部变成大写，使用匿名内部类语法如下</p>
<img src="3.png" style="zoom: 67%;">



<p>现在使用类名引用方法的形式，首先看String类中的toUpperCase方法</p>
<p><img src="all%E5%A4%A7%E5%86%99%E6%96%B9%E6%B3%95.png"></p>
<p>按照抽象方法参数的详解（3.1节），匿名内部类中抽象方法apply中的参数String s是抽象方法的第一个参数，它决定能使用什么类的方法。</p>
<p>第二个参数到末尾的参数要和成员方法的一致，如果抽象方法只有一个参数，那么应该调用这个类的无参方法。</p>
<p>String类中的toUpperCase方法提供了两个，符合可以用空参的那个。</p>
<img src="string%E7%B1%BBtoUpperCase.png" style="zoom:80%;">



<p>因此可以把匿名内部类的写法改成使用方法引用的形式</p>
<img src="4.png" style="zoom:80%;">









]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL：（四）事务隔离级别和MVCC</title>
    <url>/2024/08/16/MySQL-MVCC/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>MVCC是面试重灾区，网上的内容我发现并不全面，只有生搬硬套下来的原理却不解释过程，让我看的云里雾里。我写这篇MVCC的内容目的是能更好了理解MVCC如何实现，结合一些八股的内容和实际的案例进行介绍，全程干货。</p>
<h1 id="一、什么是MVCC"><a href="#一、什么是MVCC" class="headerlink" title="一、什么是MVCC"></a>一、什么是MVCC</h1><p>多版本并发控制（MVCC&#x3D;Multi-Version Concurrency Control），是一种用来解决<strong>读 - 写冲突的无锁并发控制</strong>。也就是为事务分配单向增长的时间戳，为每个修改保存一个版本。版本与事务时间戳关联，读操作只读该事务开始前的数据库的快照（复制了一份数据）。mvcc解决的就是读写时的线程安全问题，线程不用去争抢<strong>读写锁</strong>（读写锁可参考：<a href="https://rengoku.top/2024/08/05/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E4%B8%89%E3%80%81%E9%94%81/">Java多线程：三、多线程锁、java锁的实现 | 颓废市民黄先生 (rengoku.top)</a>）。</p>
<blockquote>
<p>说到读写冲突和多线程并发控制，肯定也会涉及事务的隔离级别，即读未提交（可能脏读），读已提交（不可重复读），可重复读（可能幻读）。</p>
</blockquote>
<p>MVCC所提到的读是快照读，也就是普通的select语句。快照读在读写时不用加锁，不过可能会读到历史数据。</p>
<p>还有一种读取数据的方式是当前读，是一种悲观锁的操作。它会对当前读取的数据进行加锁，所以读到的数据都是最新的。主要包括以下几种操作：</p>
<ul>
<li><p>select lock in share mode（共享锁）</p>
</li>
<li><p>select for update（排他锁）</p>
</li>
<li><p>update（排他锁）</p>
</li>
<li><p>insert（排他锁）</p>
</li>
<li><p>delete（排他锁）</p>
</li>
</ul>
<p><strong>什么是快照读和当前读？</strong></p>
<p><strong>快照读：</strong>快照读是指在读取数据时，读取的是某个<code>Readview</code>中的数据，这个一致性视图反映了事务开始时刻数据库的<strong>快照。</strong></p>
<p><strong>当前读：</strong>当前读，是指读取操作获取的是数据的最新版本，即读取操作发生时数据库中该数据的实际状态。这种读取方式通常伴随着锁的使用，以确保读取的数据在事务处理期间不会被其他事务修改，从而保证事务的一致性和隔离性。</p>
<p><img src="Snipaste_2024-08-17_16-14-30.png"></p>
<p><strong>MVCC在MySQL的InnoDB引擎是默认实现的，无需配置其他内容。</strong></p>
<h1 id="二、MVCC实现原理"><a href="#二、MVCC实现原理" class="headerlink" title="二、MVCC实现原理"></a>二、MVCC实现原理</h1><p>MVCC 的目的就是多版本并发控制，在数据库中的实现，就是为了解决读写冲突，它的实现原理主要是依赖记录中的版本链、undo 日志、Read View 来实现的。</p>
<h2 id="1-隐藏字段"><a href="#1-隐藏字段" class="headerlink" title="1. 隐藏字段"></a>1. 隐藏字段</h2><p><img src="Snipaste_2024-08-17_16-26-15.png" alt="三个隐藏字段"></p>
<p>在MySQL中，除了我们显示的定义列，存储引擎还会隐式帮我们定义一些列，分别是<strong>trx_id，roll_pointer，row_id:</strong></p>
<p><strong>trx_id：</strong></p>
<p>在MySQL的InnoDB存储引擎中，<code>trx_id</code>是一个隐藏列，用于记录对该行数据最后一次进行修改（INSERT、UPDATE或DELETE）的事务的ID。当需要一个新的<code>trx_id</code>时，InnoDB会获取<code>max_trx_id</code>的当前值，然后将其加1，并将结果赋值给新的或修改的数据行的<code>trx_id</code>隐藏列。</p>
<p><strong>roll_pointer：</strong></p>
<p>回滚指针，用于找到上一个版本的数据，结合undolog进行回滚。</p>
<p><strong>row_id:</strong></p>
<p>当表没有主键时，innodb会隐式的增加<code>row_id</code>字段作为主键，如果表中存在主键则没有这个字段</p>
<h2 id="2-undo-log版本链"><a href="#2-undo-log版本链" class="headerlink" title="2. undo log版本链"></a>2. undo log版本链</h2><p><img src="Snipaste_2024-08-17_16-24-43.png" alt="undo log版本链"></p>
<h2 id="3-read-view"><a href="#3-read-view" class="headerlink" title="3. read view"></a>3. read view</h2><p><img src="Snipaste_2024-08-17_16-32-15.png" alt="read view字段"></p>
<h2 id="4-八股：read-view判断规则"><a href="#4-八股：read-view判断规则" class="headerlink" title="4. 八股：read view判断规则"></a>4. 八股：read view判断规则</h2><p><img src="Snipaste_2024-08-17_16-47-39.png" alt="判断规则"></p>
<p>这里是理解的重点，我举个例子：</p>
<p>假设有两个事务，事务A和事务B，它们同时操作同一张表中的数据。事务A的ID为100，事务B的ID为101。事务A在开始时执行了一个SELECT操作，想要读取某条数据；而事务B则在该数据上执行了UPDATE操作，但尚未提交。</p>
<h3 id="4-1-Read-View的创建"><a href="#4-1-Read-View的创建" class="headerlink" title="4.1 Read View的创建"></a>4.1 Read View的创建</h3><ol>
<li>事务A的Read View创建<ul>
<li>当事务A执行SELECT操作时，InnoDB会为事务A创建一个Read View<strong>（普通的select是快照读）</strong>。这个Read View中包含了当前系统中所有活跃的事务ID（即已经开启但尚未提交的事务ID）。在这个例子中，Read View将包含事务A（ID&#x3D;100）和事务B（ID&#x3D;101）的ID，因为事务B此时是活跃的。</li>
<li>Read View还包含以下关键字段：<ul>
<li><code>m_ids</code>：包含活跃事务的ID列表，如[100, 101]。</li>
<li><code>min_trx_id</code>：<code>m_ids</code>中的最小事务ID，即100。</li>
<li><code>max_trx_id</code>：系统应该分配给下一个事务的ID值，这个值通常基于当前最大事务ID加1计算得出，但在这个场景中我们主要关注<code>m_ids</code>和<code>min_trx_id</code>。</li>
<li><code>creator_trx_id</code>：创建Read View的事务ID，即100。</li>
</ul>
</li>
</ul>
</li>
<li>数据可见性判断<ul>
<li>当事务A尝试读取某条数据时，InnoDB会检查该数据的各个版本。每个版本都会有一个<code>trx_id</code>，表示修改该版本的事务ID。</li>
<li>如果某个版本的<code>trx_id</code>与<code>creator_trx_id</code>相同（即事务A自己修改的），则该版本对事务A可见。</li>
<li>如果某个版本的<code>trx_id</code>小于<code>min_trx_id</code>（即该版本在事务A的Read View创建之前已经提交），则该版本对事务A可见。</li>
<li>如果某个版本的<code>trx_id</code>大于或等于Read View中最大的活跃事务ID（在这个例子中我们没有直接使用<code>max_trx_id</code>作为判断条件，因为它通常用于确定新事务的ID），则该版本对事务A不可见，因为它是在事务A的Read View创建之后生成的。</li>
<li>如果某个版本的<code>trx_id</code>在<code>min_trx_id</code>和<code>m_ids</code>中的最大事务ID之间，则需要进一步检查该<code>trx_id</code>是否在<code>m_ids</code>列表中。如果在，说明该版本是在事务A的Read View创建时活跃的，因此不可见；如果不在，说明该版本在事务A的Read View创建前已经提交，因此可见。</li>
</ul>
</li>
</ol>
<h3 id="4-2-例子中的操作"><a href="#4-2-例子中的操作" class="headerlink" title="4.2 例子中的操作"></a>4.2 例子中的操作</h3><ul>
<li>假设事务B修改了数据但尚未提交，因此数据的最新版本（由事务B修改）对事务A不可见。</li>
<li>事务A将根据Read View中的规则，找到并读取事务B修改之前的旧版本数据（如果存在的话）。</li>
</ul>
<h3 id="4-3-为什么是事务A创建read-view？"><a href="#4-3-为什么是事务A创建read-view？" class="headerlink" title="4.3 为什么是事务A创建read view？"></a>4.3 为什么是事务A创建read view？</h3><p>因为事务A做的select操作是快照读，做快照读就会生成read view。在开头提到的一些操作是当前读。</p>
<h3 id="4-4-read-view这个模式是针对同一条数据的吗？"><a href="#4-4-read-view这个模式是针对同一条数据的吗？" class="headerlink" title="4.4 read view这个模式是针对同一条数据的吗？"></a>4.4 read view这个模式是针对同一条数据的吗？</h3><p>不是，他是对所有事务进行的快照，只不过是因为我做修改操作的时候需要判断之前的版本哪个是我进行修改操作的时候读取到的版本，所以我针对的是同一条数据进行分析。再演示一个例子：</p>
<ul>
<li>事务 A 开始，执行第一次 SELECT 查询，创建 Read View A。</li>
<li>事务 B 开始，执行第一次 SELECT 查询，创建 Read View B。</li>
<li>事务 A 对表 T 中的记录 R1进行UPDATE操作，但未提交。</li>
<li>事务 C 开始，执行UPDATE操作，修改表 T 中的记录 R2 ，但未提交。</li>
<li>事务 B 尝试读取记录 R1，使用 Read View B 进行可见性判断。由于事务 A和事务 C  的修改尚未提交，因此事务 B 看不到事务 A 和事务 C 的修改，它可能看到的是记录 R 和记录 R2 的旧版本。</li>
<li>事务 A 提交修改，同时事务 C 也进行提交修改。</li>
<li>如果事务 B 之后再次执行 SELECT 查询（在 Read Committed 隔离级别下），它将创建一个新的 Read View，此时能够看到事务 A 和事务 C 已经提交的修改。如果此时是对记录 R 进行SELECT操作，那么就读取到的是事务 B 提交的最新版本，如果此时是对记录 R2 进行SELECT操作，那么就读取到的是事务 C 提交的最新版本，取决于SELECT 查询是对哪条记录。</li>
<li>事务 B 提交。</li>
</ul>
<blockquote>
<p>强调RC的隔离级别是因为RC和RR下，使用readview的可能会不一样，在下一节我会写得很详细。</p>
</blockquote>
<p>总结：在这个例子中，事务B生成了两次readview，不同的是事务 B 前后两次快照对记录 R 和记录 R2 读取的版本不同。</p>
<h3 id="4-5-trx-id是哪条数据？"><a href="#4-5-trx-id是哪条数据？" class="headerlink" title="4.5 trx_id是哪条数据？"></a>4.5 trx_id是哪条数据？</h3><p>trx_id是在read view中的任何一条事务id，使用trx_id来套用规则。在下一节来讲得更详细一些。</p>
<h1 id="三、事务隔离级别与MVCC"><a href="#三、事务隔离级别与MVCC" class="headerlink" title="三、事务隔离级别与MVCC"></a>三、事务隔离级别与MVCC</h1><h2 id="1-RC与MVCC"><a href="#1-RC与MVCC" class="headerlink" title="1. RC与MVCC"></a>1. RC与MVCC</h2><p><strong>在RC(read commited)的隔离级别下，每一次进行快照读都会生成一个read view。</strong></p>
<p><img src="Snipaste_2024-08-17_17-27-56.png" alt="RC&amp;MVCC"></p>
<p>我从刚刚的那个undo log版本链中来进行分析，如果事务5<strong>第一次进行select操作</strong>到底读取到的是哪个版本：</p>
<p><img src="Snipaste_2024-08-17_17-46-45.png" alt="RC下的MVCC"></p>
<p>对于事务5，事务5进行了select操作，所以进行快照读，生成一次read view。从版本链的最上游开始，trx_id&#x3D;4，来判断事务5读取到的是哪个版本。</p>
<p>我们从判断规则入手：此时trx_id&#x3D;4的情况下，四个条件如下：</p>
<ol>
<li>trx_id不等于5</li>
<li>trx_id不小于3</li>
<li>trx_id不大于6</li>
<li>trx_id在3,4,5这个集合内</li>
</ol>
<p>可以看到，事务4（trx_id&#x3D;4）时，所有判断都不成立，所以事务5不会读取到事务4的版本。</p>
<p>以此类推，可以发现trx_id&#x3D;2的时候，满足第二个条件：<code>trx_id=2&lt;min_trx_id=3</code>。事务5进行select操作的时候会读取到trx_id&#x3D;2的版本，也就是<code>id=30,age=3,name=A30,trx_id=2,roll_point=0X00001</code>这条记录。</p>
<p>同样的写法，<strong>事务5第二次进行快照读的时候</strong>，应该读取到的是事务3的版本，因为事务5打快照的时候，事务3已经提交了。也就是<code>id=30,age=3,name=A3,trx_id=3,roll_point=0X00002</code>这条记录。</p>
<p>看到这里，是不是更好的理解RC了呢？确实和RC名字一样，真的就是<strong>读已提交</strong>啊。这也就是RC的实现原理啦。</p>
<h2 id="2-RR与MVCC"><a href="#2-RR与MVCC" class="headerlink" title="2. RR与MVCC"></a>2. RR与MVCC</h2><p><strong>在RR（repeatable read）的事务隔离级别下，仅在事务中第一次执行快照读的时候生成一次read view，后续会复用这个read view。</strong></p>
<p><img src="Snipaste_2024-08-17_18-08-54.png" alt="RR&amp;MVCC"></p>
<p>这里套用的判断规则和RC是一样的。RR既然叫可重复读，那肯定是套用了一样的read view啊！豁然开朗啊简直是</p>
<p>最后我们再看看mvcc这些内容保证ACID的什么部分：</p>
<p><img src="Snipaste_2024-08-17_18-11-38.png" alt="mvcc保证c和i"></p>
<p>通过整篇的介绍，我们也可以看出，事务隔离级别和底层的MVCC加上锁实现保证<strong>隔离性</strong>；两个日志文件：redo log的保证事务持久性和undo log回滚事务来保证数据<strong>一致性</strong>。</p>
<p>两个日志文件我在这里有介绍：<a href="https://rengoku.top/2024/08/15/MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/">MySQL：（二）存储引擎 | 颓废市民黄先生 (rengoku.top)</a></p>
<h2 id="3-RU如何实现的？"><a href="#3-RU如何实现的？" class="headerlink" title="3. RU如何实现的？"></a>3. RU如何实现的？</h2><p>在上边两节内容中，我讲了事务隔离级别主要通过底层MVCC进行实现的，现在没讲的事务隔离级别除了序列化，就只剩RU（Read Uncommited）了，这一节简单的附上一些资料。</p>
<p>在RU级别中，事务读到的所有数据都是<strong>最新的数据</strong>，可能是事务提交后的数据，也可能是事务<strong>执行中的数据（可能会被回滚）</strong>。</p>
<h3 id="3-1-锁机制"><a href="#3-1-锁机制" class="headerlink" title="3.1 锁机制"></a>3.1 锁机制</h3><ul>
<li><strong>不加锁或轻量级锁</strong>：在RU隔离级别下，数据库系统可能不会对读取的数据加锁，或者只加非常轻量级的锁，以允许其他事务同时读取和写入数据。这意味着，一个事务在读取数据时，可能看到其他事务尚未提交的数据变更。</li>
<li><strong>写锁</strong>：尽管读取时可能不加锁，但写入数据时通常需要加<strong>行级锁</strong>，以防止数据在写入过程中被其他事务修改，从而保证数据的一致性。然而，在RU级别下，写锁的存在并不影响读取到未提交数据的能力。</li>
</ul>
<h3 id="3-2-并发控制"><a href="#3-2-并发控制" class="headerlink" title="3.2 并发控制"></a>3.2 并发控制</h3><ul>
<li><p><strong>多版本并发控制（MVCC）的缺失</strong>：在读未提交隔离级别下，数据库系统可能不会对数据进行多版本控制（MVCC），或者即使支持MVCC，也可能不会利用它来提供隔离性。相反，事务可以直接访问当前数据库的最新状态，包括其他事务尚未提交的数据。</p>
</li>
<li><p><strong>直接访问最新数据</strong>：事务在RU级别下直接访问数据库中的最新数据版本，而不管这些数据是否已经被其他事务提交。这可能导致脏读（Dirty Reads）的发生，即读取到其他事务未提交的数据。</p>
</li>
<li><p><strong>事务视图</strong>：每个事务在开始时可能会创建一个事务视图，但这个视图在读未提交隔离级别下不会限制对其他事务未提交数据的访问。事务可以自由地读取和看到其他事务正在进行的更改，无论这些更改是否已被提交。</p>
</li>
</ul>
<p><strong>简单的说，RU的实现只是加了轻量锁，这种隔离级别是一种用数据隔离性替换性能的隔离方式。</strong></p>
<h1 id="四、八股部分"><a href="#四、八股部分" class="headerlink" title="四、八股部分"></a>四、八股部分</h1><p>最后放部分八股的题目：</p>
<p><img src="Snipaste_2024-08-15_11-17-01.png" alt="八股"></p>
<p>关于24题中3个隐式字段，除了trx_id和roll_pointer，还有一个是row_id，在这里整理一下：</p>
<ol>
<li><p>row_id</p>
<p>这是一个唯一的标识符，用于唯一标识一条行记录。当表没有显式定义主键或唯一索引时，InnoDB会使用row_id作为主键。</p>
</li>
<li><p>trx_id</p>
<p>事务ID，记录的是当前行记录是被哪个事务修改提交的。InnoDB会为每个开启的事务分配一个递增的ID，用于唯一标识一个事务。当某个事务修改了某个行记录时，就会在这个行记录的trx_id隐式字段中记录当前事务的ID。</p>
</li>
<li><p>roll_pointer</p>
<p>回滚指针，用于指向undo日志中该行记录的历史版本。当一个事务对某条记录进行修改时，会把该行记录先拷贝到undo日志中作为一个历史版本，然后再对该行记录进行修改，并使用roll_pointer指针指向undo日志中该行记录的历史版本。</p>
</li>
</ol>
<p>24题中使用undo日志的体现：</p>
<ul>
<li>构成版本链：每次对记录修改时会写入undo日志，而回滚指针将这些记录构成一条链表，供回滚指针进行回滚</li>
<li>实现多线程并发控制：记录未提交事务内容，可以作为其他事务的参考进行快照读</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>MVCC是多版本并发控制，在MySQL的InnoDB引擎中是默认实现的。MVCC和事务隔离级别共同管理事务，尽可能的避免脏读、幻读的问题。</p>
<p>MVCC通过三个隐式字段（row_id、trx_id、roll_pointer）、版本链、undo日志、read view视图实现事务隔离。</p>
<p>顺便把锁的博客放一篇：<a href="https://blog.csdn.net/u010841296/article/details/87909468"><a href="https://rengoku.top/2024/08/15/MySQL-%E9%94%81/">MySQL：（三）全局锁、表级锁、行级锁 | 颓废市民黄先生 (rengoku.top)</a></a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL：（五）分库分表</title>
    <url>/2024/08/20/MySQL-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="为什么要进行分库分表"><a href="#为什么要进行分库分表" class="headerlink" title="为什么要进行分库分表"></a>为什么要进行分库分表</h1><p><img src="Snipaste_2024-08-20_16-32-57.png"></p>
<p>来解释一下IO瓶颈：</p>
<p>在介绍innodb存储引擎<a href="https://rengoku.top/2024/08/15/MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/">MySQL：（二）存储引擎 | 颓废市民黄先生 (rengoku.top)</a>的时候，曾经说过，内存架构中大部分的组件都分配给了缓存。如果内存不足，缓存就不够，那么就要使用后台线程和磁盘进行io，这样效率就会低</p>
<h1 id="拆分策略"><a href="#拆分策略" class="headerlink" title="拆分策略"></a>拆分策略</h1><p><img src="Snipaste_2024-08-20_16-40-42.png" alt="拆分策略"></p>
<h2 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h2><ul>
<li>垂直分表：局限于单个数据库内部，不涉及跨数据库操作。</li>
<li>垂直分库：跨越多个数据库，甚至可能跨越不同的服务器，涉及跨数据库的数据访问和管理。</li>
</ul>
<p><img src="Snipaste_2024-08-20_16-43-58.png" alt="垂直拆分"></p>
<h2 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h2><p>和垂直拆分一样，水平分库会涉及跨数据库，而水平分表不跨数据库。</p>
<p><img src="Snipaste_2024-08-20_16-51-01.png" alt="水平拆分"></p>
<h1 id="MyCat"><a href="#MyCat" class="headerlink" title="MyCat"></a>MyCat</h1><p><a href="https://blog.csdn.net/liuerchong/article/details/107887804">mycat详细介绍及实战-CSDN博客</a></p>
<p>mycat实现分库分表，读写分离。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL：（二）存储引擎</title>
    <url>/2024/08/15/MySQL-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="一、存储引擎"><a href="#一、存储引擎" class="headerlink" title="一、存储引擎"></a>一、存储引擎</h1><h2 id="1-InnoDB"><a href="#1-InnoDB" class="headerlink" title="1. InnoDB"></a>1. InnoDB</h2><p>在MySQL现版本，默认的存储引擎是InnoDB，这个不用多说了，另外常见的还有MyISAM，Memory，CSV等，这里就InnoDB进行介绍。</p>
<p><img src="Snipaste_2024-08-16_21-13-35.png" alt="innodb特点"></p>
<p>总结成三个词语就是：事务，外键，行级锁。</p>
<h2 id="2-idb文件-表空间文件"><a href="#2-idb文件-表空间文件" class="headerlink" title="2. idb文件-表空间文件"></a>2. idb文件-表空间文件</h2><ul>
<li>*.frm：与表相关的元数据信息都存放在frm文件，包括表结构的定义信息等</li>
<li>*.ibd：InnoDB DATA，<strong>表数据，表结构和索引的文件。</strong>该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。</li>
</ul>
<p><img src="Snipaste_2024-08-16_21-19-49.png"></p>
<p>要是想查看这个表，直接打开的话是不行的，因为都是二进制文件</p>
<p><img src="Snipaste_2024-08-16_21-23-14.png"></p>
<p>可以通过<code>ibd2sdi xx.ibd</code>命令来得到json格式的表数据</p>
<p><img src="Snipaste_2024-08-16_21-22-38.png"></p>
<h2 id="3-逻辑存储结构"><a href="#3-逻辑存储结构" class="headerlink" title="3. 逻辑存储结构"></a>3. 逻辑存储结构</h2><p><img src="Snipaste_2024-08-16_21-25-44.png"></p>
<h1 id="二、架构"><a href="#二、架构" class="headerlink" title="二、架构"></a>二、架构</h1><h2 id="1-内存架构"><a href="#1-内存架构" class="headerlink" title="1. 内存架构"></a>1. 内存架构</h2><p><img src="Snipaste_2024-08-16_21-49-19.png"></p>
<p><img src="Snipaste_2024-08-16_21-52-33.png"></p>
<p>buffer pool处理主键索引、二级索引，而change buffer是基于为了减少磁盘io的目的，优化了二级索引处理。</p>
<p><img src="Snipaste_2024-08-16_21-53-58.png"></p>
<p>利用哈希索引去做查操作非常的快，而使用b+树的效率和使用hash索引相比就没有那么高，因此在innodb中优化了对buffer pool的查询。如果hash索引更快则建立hash索引，和之前学的一样，和b+树都是一种数据结构。</p>
<p><img src="Snipaste_2024-08-16_21-54-26.png"></p>
<h2 id="2-磁盘架构"><a href="#2-磁盘架构" class="headerlink" title="2. 磁盘架构"></a>2. 磁盘架构</h2><p><img src="Snipaste_2024-08-17_18-20-45.png"></p>
<p><img src="Snipaste_2024-08-17_18-22-46.png"></p>
<p><img src="Snipaste_2024-08-17_18-23-46.png"></p>
<h2 id="3-后台线程"><a href="#3-后台线程" class="headerlink" title="3. 后台线程"></a>3. 后台线程</h2><p><strong>后台线程负责将InnoDB存储引擎缓冲池中的数据，在合适时间刷新到磁盘。</strong></p>
<p><img src="Snipaste_2024-08-17_18-27-29.png"></p>
<h1 id="三、事务原理"><a href="#三、事务原理" class="headerlink" title="三、事务原理"></a>三、事务原理</h1><p><img src="Snipaste_2024-08-17_18-32-16.png"></p>
<p>这里介绍两个日志：redo log和undo log，锁和MVCC博客戳下面链接：</p>
<p><a href="https://rengoku.top/2024/08/15/MySQL-%E9%94%81/">MySQL：（三）全局锁、表级锁、行级锁 | 颓废市民黄先生 (rengoku.top)</a></p>
<p><a href="https://rengoku.top/2024/08/16/MySQL-MVCC/">MySQL：（四）事务隔离级别和MVCC | 颓废市民黄先生 (rengoku.top)</a></p>
<h2 id="1-redo-log"><a href="#1-redo-log" class="headerlink" title="1. redo log"></a>1. redo log</h2><p><img src="Snipaste_2024-08-17_18-51-26.png" alt="redolog原理"></p>
<p>当执行DML操作的时候，如果在内存的buffer pool不存在需要的数据，会通过后台线程将数据从ibd文件中刷新过去。</p>
<blockquote>
<p>可能会问为什么不是将修改的数据存储在change buffer？</p>
<p>因为刚刚介绍了，change buffer针对二级索引的数据，而现在是通用的情况</p>
</blockquote>
<p>此时在内存中的脏页，后台线程会在合适的时机将数据写回磁盘，将数据整合保证数据一致性。</p>
<p><strong>如果此时事务已经提交了，但是写磁盘的时候失败了怎么办？</strong></p>
<p>这个问题就是redo log起作用的地方。我们回到脏页刷新到磁盘之前：</p>
<p>redo log会将数据页变化写在<strong>log buffer中的redolog buffer</strong>（不记得看内存架构那里），在事务提交的时候，会将数据页变化直接刷新到磁盘当中。之后进行脏页刷新的时候，如果刷新出错了，就可以通过redo log进行恢复。redo log会记录数据的单次变化，所以可以通过redo log进行数据恢复。</p>
<p><strong>我在事务提交的时候直接将数据备份到磁盘中不行吗，为什么要使用redo log？</strong></p>
<p>redo log支持<strong>Write-Ahead Logging（WAL）机制</strong>，即数据库系统首先将事务操作记录到redo log，然后<strong>异步</strong>地将这些操作应用到磁盘上的数据文件。这种机制允许数据库快速响应事务操作，同时通过redo log保证了数据的持久性和一致性，从而提高了数据库的整体性能。</p>
<p>如果没有redo log，数据库系统需要在每次事务提交时都立即将数据写入磁盘，这会增加大量的I&#x2F;O操作，降低数据库的性能。</p>
<p><strong>redo log还有什么作用？</strong></p>
<ol>
<li><p><strong>数据持久性与一致性</strong></p>
<p>redo log是数据库的事务日志，用于记录事务操作的细节，包括插入、更新和删除等。它确保了数据的持久性，即使在数据库发生崩溃或异常重启后，也能通过redo log来还原事务操作，从而维护数据的一致性。</p>
<p>当数据库因崩溃而不正常关闭时，redo log可以用于回滚尚未持久化到磁盘的事务更改，将数据库还原到一致的状态，这是数据库恢复的重要手段。</p>
</li>
<li><p><strong>支持备份与恢复</strong></p>
<p>redo log也用于数据库的备份和恢复过程。备份可以在不中断数据库运行的情况下进行，并且可以使用redo log来还原备份数据，这对于灾难恢复和备份策略非常重要。</p>
</li>
<li><p><strong>支持数据库复制</strong></p>
<p>在分布式系统中，redo log可以用于数据库复制，以将一个数据库的更改传播到另一个数据库。这有助于实现高可用性、负载平衡和数据复制。</p>
</li>
</ol>
<h2 id="2-undo-log"><a href="#2-undo-log" class="headerlink" title="2. undo log"></a>2. undo log</h2><p><img src="Snipaste_2024-08-17_19-10-31.png" alt="undo log"></p>
<p>MVCC：<a href="https://rengoku.top/2024/08/16/MySQL-MVCC/">MySQL：（四）事务隔离级别和MVCC | 颓废市民黄先生 (rengoku.top)</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL：（一）索引底层原理与实现</title>
    <url>/2024/08/15/MySQL-%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h2 id="一、-什么是索引？"><a href="#一、-什么是索引？" class="headerlink" title="一、 什么是索引？"></a>一、 什么是索引？</h2><p>索引是一个排序的列表，在这个列表中存储着索引的值和包含这个值的数据所在行的物理地址，可以大大加快查询的速度，使用索引后可以不用扫描全表来定位某行的数据，而是先通过索引表找到该行数据对应的物理地址然后访问相应的数据。索引的作用类似于书的目录，可以根据目录中的页码快速找到所需的内容。</p>
<h3 id="1-1-索引概述（了解）"><a href="#1-1-索引概述（了解）" class="headerlink" title="1.1 索引概述（了解）"></a>1.1 索引概述（了解）</h3><p>当数据保存在磁盘类存储介质上时，它是作为数据块存放。这些数据块是被当作一个整体来访问的，这样可以保证操作的原子性。硬盘数据块存储结构类似于链表，都包含数据部分，以及一个指向下一个节点（或数据块）的指针，不需要连续存储。</p>
<p>记录集只能在某个关键字段上进行排序，所以如果需要在一个无序字段上进行搜索，就要执行一个线性搜索（Linear Search）的过程，平均需要访问 N&#x2F;2 的数据块，N 是表示所占据的数据块数目。如果这个字段是一个非主键字段（也就是说，不包含唯一的访问入口）， 那么需要在 N 个数据块上搜索整个表格空间。</p>
<p>但是对于一个有序字段，可以运用二分查找（BinarySearch），这样只需要访问 log2(N)的数据块。这就是为什么数据表使用索引后性能可以得到本质上提高的原因。</p>
<p>索引是对记录集的多个字段进行排序的方法。在一张表中为一个字段创建一个索引，将创建另外一个数据结构，包含字段数值以及指向相关记录的指针，然后对这个索引结构进行排序，允许在该数据上进行二分法排序。索引需要额外的磁盘空间。</p>
<p>对于 MyISAM 引擎而言，这些索引是被统一保存在一张表中的。如果很多字段都建立了索引，那么会占用大量的磁盘空间，这个文件将很快到达底层文件系统所能够支持的大小限制。</p>
<h4 id="1-1-1-索引的作用"><a href="#1-1-1-索引的作用" class="headerlink" title="1.1.1 索引的作用"></a>1.1.1 索引的作用</h4><p>索引除了快没有其他的作用，数据库利用各种各样的快速定位技术，能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。</p>
<h4 id="1-1-2-索引的查找过程"><a href="#1-1-2-索引的查找过程" class="headerlink" title="1.1.2 索引的查找过程"></a>1.1.2 索引的查找过程</h4><p>举一个例子，三个表t1、t2、t3，每个表中只有一个字段，但是每一个表中都有1000行记录，这些记录都是1~1000的数字。</p>
<p>执行以下的查找语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt;SELECT c1,c2,c3 FROM t1,t2,t3 WHERE c1=c2 AND c1=c3;</span><br></pre></td></tr></table></figure>


<p>在无索引的情况下处理此查询， 必须寻找 3 个表所有的组合，以便得出与 WHERE 子句相配的那些行。而可能的组合数目 为 1000×1000×1000（十亿）</p>
<p>如果对每个表进行索引，就能极大地加速查询进程，利用索引的查询处理如下。</p>
<p>从表 t1 中选择第一行，查看此行所包含的数据。<br>使用表 t2 上的索引，直接定位 t2 中与 t1 的值匹配的行。同理，利用表 t3 上的索引， 直接定位 t3 中与 t1 的值匹配的行。<br>扫描表 t1 的下一行并重复前面的过程，直到遍历 t1 中所有的行。<br>在这样的情况下，对表 t1 执行了一个完全扫描，但能够在表 t2 和 t3 上进行索引查找直接取出这些表中的行，比未用索引时要快一百万倍。<br>利用索引，MySQL 加速了 WHERE 子句满足条件行的搜索，而在多表连接查询时、在执行连接时加快了与其他表中的行匹配的速度。</p>
<h2 id="二、索引的分类（逻辑分类）"><a href="#二、索引的分类（逻辑分类）" class="headerlink" title="二、索引的分类（逻辑分类）"></a>二、索引的分类（逻辑分类）</h2><p>逻辑的角度来划分，索引分为普通索引、唯一索引、主键索引、组合索引和全文索引。</p>
<h3 id="2-1-普通索引"><a href="#2-1-普通索引" class="headerlink" title="2.1 普通索引"></a>2.1 普通索引</h3><h4 id="2-1-1-普通索引格式"><a href="#2-1-1-普通索引格式" class="headerlink" title="2.1.1 普通索引格式"></a>2.1.1 普通索引格式</h4><p>普通索引是最基本的索引，它没有任何限制，也是大多数情况下用到的索引。</p>
<p>直接创建索引的方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># column 是指定要创建索引的列名</span></span><br><span class="line"><span class="comment"># length 是可选项</span></span><br><span class="line">mysql&gt;CREATE INDEX index_name ON table_name (column(length));</span><br></pre></td></tr></table></figure>

<p>索引列的长度有一个最大上限 255 个字节（MyISAM 和 InnoDB 表的最大上限为 1000 个字 节），如果索引列的长度超过了这个上限，就只能用列的前缀进行索引。另外，BLOB 或 TEXT 类型的列也必须使用前缀索引。</p>
<h4 id="2-1-2-创建普通索引"><a href="#2-1-2-创建普通索引" class="headerlink" title="2.1.2 创建普通索引"></a>2.1.2 创建普通索引</h4><p>方法一：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table info (<span class="built_in">id</span> int(4) not null,name varchar(10) not null,address varchar(50) default <span class="string">&#x27;未知&#x27;</span>);  <span class="comment">##创建一个表结构</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; describe info;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | int(4)      | NO   |     | NULL    |       |</span><br><span class="line">| name    | varchar(10) | NO   |     | NULL    |       |</span><br><span class="line">| address | varchar(50) | YES  |     | 未知    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; create index id_index on info(<span class="built_in">id</span>);    <span class="comment">##为info表中的id创建索引</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; describe info;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | int(4)      | NO   | MUL | NULL    |       |</span><br><span class="line">| name    | varchar(10) | NO   |     | NULL    |       |</span><br><span class="line">| address | varchar(50) | YES  |     | 未知    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到在key下面的MUL，索引创建成功了</span></span><br></pre></td></tr></table></figure>




<p>方法二：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改表结构的方式添加索引</span><br><span class="line">mysql&gt;ALTER TABLE table_name ADD INDEX index_name (column(length));</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table info add index name_index (name);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; describe info;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | int(4)      | NO   | MUL | NULL    |       |</span><br><span class="line">| name    | varchar(10) | NO   | MUL | NULL    |       |</span><br><span class="line">| address | varchar(50) | YES  |     | 未知    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>




<p>方法三：<br>在创建一个表结构时，就创建索引</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table num (<span class="built_in">id</span> int(3),index id_index(<span class="built_in">id</span>));</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; describe num;</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">| Field | Type   | Null | Key | Default | Extra |</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>    | int(3) | YES  | MUL | NULL    |       |</span><br><span class="line">+-------+--------+------+-----+---------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>



<h4 id="2-1-3-查看索引"><a href="#2-1-3-查看索引" class="headerlink" title="2.1.3 查看索引"></a>2.1.3 查看索引</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show index from info\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: info</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: id_index</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: <span class="built_in">id</span></span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">        Table: info</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: name_index</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: name</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>



<h3 id="2-2-唯一索引"><a href="#2-2-唯一索引" class="headerlink" title="2.2 唯一索引"></a>2.2 唯一索引</h3><p>唯一索引与普通索引类似，不同的就是：唯一索引的索引列的值必须唯一，但允许有空值（注意和主键不同）。如果是组合索引，则列值的组合必须唯一。唯一索引创建方法和普通索引类似。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改表结构的时候添加唯一索引：</span></span><br><span class="line">mysql&gt;CREATEUNIQUEINDEXindex_nameON table_name(column(length));</span><br></pre></td></tr></table></figure>

<p>新建一个表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table info2 (<span class="built_in">id</span> int(4) not null,name varchar(10) not null,address varchar(50) default <span class="string">&#x27;未知&#x27;</span>,primary key(<span class="built_in">id</span>));</span><br><span class="line">mysql&gt; describe info2;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | int(4)      | NO   | PRI | NULL    |       |</span><br><span class="line">| name    | varchar(10) | NO   |     | NULL    |       |</span><br><span class="line">| address | varchar(50) | YES  |     | 未知    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; create unique index unique_name on info2(name);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; describe info2;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | int(4)      | NO   | PRI | NULL    |       |</span><br><span class="line">| name    | varchar(10) | NO   | UNI | NULL    |       |</span><br><span class="line">| address | varchar(50) | YES  |     | 未知    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>




<p>修改表结构的时候添加唯一索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">格式</span><br><span class="line">mysql&gt;ALTERTABLEtable_nameADD UNIQUEindex_name(column(length));</span><br></pre></td></tr></table></figure>


<p>创建表的时候同时创建唯一索引：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATETABLE`table`( </span><br><span class="line">...</span><br><span class="line">UNIQUE index Name (title(length)) );</span><br></pre></td></tr></table></figure>

<h3 id="2-3-主键索引"><a href="#2-3-主键索引" class="headerlink" title="2.3 主键索引"></a>2.3 主键索引</h3><p>主键索引是一种特殊的唯一索引，一个表只能有一个主键，不允许有空值。一般是在建表的时候同时创建主键索引。</p>
<p>主键索引也就是primary key，在之前的创建表的过程中已经演示过，有两种方式。</p>
<p>第一种：在字段外创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table info2 (<span class="built_in">id</span> int(4) not null,name varchar(10) not null,address varchar(50) default <span class="string">&#x27;未知&#x27;</span>,primary key(<span class="built_in">id</span>));</span><br></pre></td></tr></table></figure>

<p>第二种：在字段内创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table info2 (<span class="built_in">id</span> int(4) not null primary key,name varchar(10) not null,address varchar(50) default <span class="string">&#x27;未知&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-4-联合索引（组合索引）"><a href="#2-4-联合索引（组合索引）" class="headerlink" title="2.4 联合索引（组合索引）"></a>2.4 联合索引（组合索引）</h3><p>组合索引，也称为联合索引，复合索引或多列索引，是指索引同时包含多个列。在创建联合索引时，可以指定多个列名，以逗号分隔。联合索引的列顺序非常重要，因为查询时使用了联合索引中的一部分列时，这些列必须按照联合索引中的顺序出现。联合索引可以应用于需要根据多个列进行查询、排序、范围查询或分组的场景，以提高这些操作的效率。</p>
<p>平时用的 SQL 查询语句一般都有比较多的限制条件，所以为了进一步榨取 MySQL 的效率，就要考虑建立组合索引。在组合索引的创建中，有两种场景，即为单列索引和多列索引。</p>
<p><strong>特点：</strong><br><strong>遵从最左原则，从左往右依次执行</strong></p>
<h3 id="2-5-全文索引"><a href="#2-5-全文索引" class="headerlink" title="2.5 全文索引"></a>2.5 全文索引</h3><p>对于较大的数据集，将资料输入一个没有 FULLTEXT 索引的表中，然后创建索引，其 速度比把资料输入现有 FULLTEXT 索引的速度更快。不过切记对于大容量的数据表，生成全文索引是一个非常消耗时间、非常消耗硬盘空间的做法。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table info2 add fulltext index addr_index(address);    <span class="comment">##创建全文索引</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.04 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; describe info2;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| <span class="built_in">id</span>      | int(4)      | NO   | PRI | NULL    |       |</span><br><span class="line">| name    | varchar(10) | NO   | UNI | NULL    |       |</span><br><span class="line">| address | varchar(50) | YES  | MUL | 未知    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt; show index from info2\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: <span class="built_in">id</span></span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: unique_name</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: name</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: addr_index</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: address</span><br><span class="line">    Collation: NULL</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: FULLTEXT</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<h3 id="2-6-覆盖索引"><a href="#2-6-覆盖索引" class="headerlink" title="2.6 覆盖索引"></a>2.6 覆盖索引</h3><p>覆盖索引是指一个索引包含了所有需要查询的列，即查询语句中的SELECT字段全部在索引中，通过索引就可以直接获取查询结果，而无需回表查询数据行。这种索引方式可以显著提高查询性能，因为它减少了磁盘I&#x2F;O操作。需要注意的是，覆盖索引并不是针对某次查询而言的，而是指索引本身包含了查询所需的所有列。</p>
<p><strong>联合索引和覆盖索引的区别</strong></p>
<ul>
<li><strong>区别</strong>：覆盖索引关注的是索引是否包含了查询所需的所有列，而联合索引关注的是索引是否同时包含了多个列。一个索引可以是覆盖索引但不一定是联合索引（如只包含一个列的索引且该列满足查询需求），也可以是联合索引但不一定是覆盖索引（如包含多个列但查询还需要其他列的数据）。</li>
<li><strong>联系</strong>：在某些情况下，一个联合索引也可以是覆盖索引，即当查询语句中的SELECT字段全部包含在联合索引中时。此时，联合索引不仅提高了查询效率（因为可以同时利用多个列进行索引），还因为包含了查询所需的所有列而实现了覆盖索引的效果。</li>
</ul>
<h2 id="三、-查看及删除索引"><a href="#三、-查看及删除索引" class="headerlink" title="三、 查看及删除索引"></a>三、 查看及删除索引</h2><h3 id="3-1-查看索引"><a href="#3-1-查看索引" class="headerlink" title="3.1 查看索引"></a>3.1 查看索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看索引的两种方法</span><br><span class="line">mysql&gt;show index from tablename;</span><br><span class="line">mysql&gt;show keys from tablename;</span><br></pre></td></tr></table></figure>


<p>以show keys from tablename为例，两种方法用法相同</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show keys from info2;</span><br><span class="line">+-------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">| Table | Non_unique | Key_name    | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |</span><br><span class="line">+-------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">| info2 |          0 | PRIMARY     |            1 | <span class="built_in">id</span>          | A         |           0 |     NULL | NULL   |      | BTREE      |         |               |</span><br><span class="line">| info2 |          0 | unique_name |            1 | name        | A         |           0 |     NULL | NULL   |      | BTREE      |         |               |</span><br><span class="line">| info2 |          1 | addr_index  |            1 | address     | NULL      |           0 |     NULL | NULL   | YES  | FULLTEXT   |         |               |</span><br><span class="line">+-------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>



<p>可以使用 mysql&gt; show keys from info2\G;使用显示结果更加直观</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; mysql&gt; show keys from info2\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: <span class="built_in">id</span></span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: unique_name</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: name</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 1</span><br><span class="line">     Key_name: addr_index</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: address</span><br><span class="line">    Collation: NULL</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: YES</span><br><span class="line">   Index_type: FULLTEXT</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<ol>
<li><p>Table：表的名称。</p>
</li>
<li><p>Non_unique：如果索引不能包括重复词，则为 0；如果可以，则为 1。</p>
</li>
<li><p>Key_name：索引的名称。</p>
</li>
<li><p>Seq_in_index：索引中的列序号，从 1 开始。</p>
</li>
<li><p>Column_name：列名称。</p>
</li>
<li><p>Collation：列以什么方式存储在索引中。在 MySQL 中，有值‘A’（升序）或 NULL（无分类）。</p>
</li>
<li><p>Cardinality：索引中唯一值数目的估计值。通过运行 ANALYZETABLE 或 myisamchk-a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没 有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。</p>
</li>
<li><p>Sub_part：如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列 被编入索引，则为 NULL。</p>
</li>
<li><p>Packed：指示关键字如何被压缩。如果没有被压缩，则为 NULL。</p>
</li>
<li><p>Null：如果列含有 NULL，则含有 YES。如果没有，则该列含有 NO。</p>
</li>
<li><p>Index_type：用过的索引方法（BTREE, FULLTEXT,HASH, RTREE）。</p>
</li>
<li><p>Comment：备注。</p>
</li>
</ol>
<h3 id="3-2-删除索引"><a href="#3-2-删除索引" class="headerlink" title="3.2 删除索引"></a>3.2 删除索引</h3><p>索引在创建之后，是会占用一定的磁盘空间的，因此表内如果有不再使用的索引，从数据库性能方面考虑，最好是删除无用索引。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">删除索引的两种方式</span><br><span class="line">DROP INDEX 索引名 ON 表名; </span><br><span class="line">ALTER TABLE 表名 DROP INDEX 索引名;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop index addr_index on info2;    <span class="comment">##删除刚刚创建的全文索引</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; show keys from info2\G;   </span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: <span class="built_in">id</span></span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">        Table: info2</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: unique_name</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: name</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 0</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>



<h2 id="四、-索引的底层原理"><a href="#四、-索引的底层原理" class="headerlink" title="四、 索引的底层原理"></a>四、 索引的底层原理</h2><h3 id="4-1-八股：数据结构"><a href="#4-1-八股：数据结构" class="headerlink" title="4.1 八股：数据结构"></a>4.1 八股：数据结构</h3><p>Mysql数据库中的常见索引结构有多种，常用Hash，B+树（最常用，多路搜索树）等数据结构来进行数据存储。树的深度加深一层，意味着多一次查询，对于数据库磁盘而言，就是多一次IO操作，导致查询效率低下。</p>
<p><strong>创建一次索引就代表了创建了一个数据结构，例如B+树。</strong>那么创建的是联合索引的时候，首先根据第一个字段排序，然后在根据第二个排序。联合索引也是只有一棵b+树。</p>
<p><strong>B+树的特征：</strong></p>
<ol>
<li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li>
<li>不可能在非叶子结点命中；</li>
<li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</li>
<li>每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。</li>
<li>更适合文件索引系统；</li>
</ol>
<p>此处讨论B+树，结合案例见4.3。</p>
<h3 id="4-2-八股：存储引擎"><a href="#4-2-八股：存储引擎" class="headerlink" title="4.2 八股：存储引擎"></a>4.2 八股：存储引擎</h3><p>常见的有InnoDB、MyASIM（不支持数据库事务）、Memory等。存储引擎和存储方式（磁盘等）见文章：<a href="https://blog.csdn.net/wangfeijiu/article/details/112454405">MySQL体系构架、存储引擎和索引结构</a></p>
<p>此处使用InnoDB来讨论索引的存储结构，见4.3。</p>
<h3 id="4-3-八股：InnoDB-B-树存储数据结构"><a href="#4-3-八股：InnoDB-B-树存储数据结构" class="headerlink" title="4.3 八股：InnoDB B+树存储数据结构"></a>4.3 八股：InnoDB B+树存储数据结构</h3><p>存储数据结构，也是索引分类的一种：物理分类（第二章讲了逻辑分类）。物理分类分为<strong>聚簇索引</strong>和非聚簇索引。存储数据结构虽然说是索引分类的一种，但是准确的来说，<strong>聚簇索引和非聚簇索引是一种数据的存储方式。</strong></p>
<p><strong>聚簇索引（clustered index）</strong>不是单独的一种索引类型，而是一种数据存储方式。这种存储方式是依靠B+树来实现的，根据表的主键构造一棵B+树且B+树叶子节点存放的都是表的行记录数据时，方可称该主键索引为聚簇索引。聚簇索引也可理解为将数据存储与索引放到了一块，找到索引也就找到了数据。</p>
<p><img src="%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95.jpg"></p>
<p><strong>非聚簇索引（辅助索引或者二级索引）</strong>：数据和索引是分开的，非聚簇索引的叶子节点并不存储数据表中的完整数据记录。相反，它们存储的是指向数据表中相应行的指针，这个指针通常是数据表中主键的值。</p>
<p><img src="%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95.jpg"></p>
<p>虽然InnoDB和MyISAM存储引擎都默认使用B+树结构存储索引，但是只有InnoDB的<strong>主键索引</strong>（主键索引见2.3）才是聚簇索引，InnoDB中的辅助索引以及MyISAM使用的都是非聚簇索引。</p>
<p><strong>使用聚簇索引的优缺点（面试）：</strong></p>
<p>优点：</p>
<ol>
<li>数据访问更快，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</li>
<li>聚簇索引对于主键的排序查找和范围查找速度非常快</li>
</ol>
<p>缺点：</p>
<ol>
<li><p>插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂（页分裂见4.2链接和下图），严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键（主键列不要选没有意义的自增列，选经常查询的条件列才好，不然无法体现其主键索引性能）</p>
</li>
<li><p>更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。</p>
</li>
<li><p>二级索引（非聚簇索引）访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。</p>
</li>
</ol>
<p><img src="f6cd40465df212dd91614785713be6cb.gif"></p>
<h3 id="4-4-八股：回表是什么？为什么会有回表？"><a href="#4-4-八股：回表是什么？为什么会有回表？" class="headerlink" title="4.4 八股：回表是什么？为什么会有回表？"></a>4.4 八股：回表是什么？为什么会有回表？</h3><p>在4.3的聚簇索引中，我们提到缺点的第三条，非聚簇索引需要两次索引查找，这个过程我们就称为回表。</p>
<p>为什么会有回表？我们刚说到，聚簇索引是将索引和数据存储放在一起的，所以找到索引了就是找到了数据。但是根据实际查询的要求，不一定只会根据主键去查询数据。我们看以下场景：</p>
<p>假如有个表T， 里面三个字段：id k name， id为主键，并且其中对k建立了单独索引。此时有两棵B+树，一个是聚簇索引（主键索引）的B+树，一个是非聚簇索引的B+树。</p>
<ol>
<li><p>如果语句是 select * from T where id&#x3D;500，即主键查询方式（聚簇索引），则只需要搜索 ID 这棵 B+ 树，查询一表即可。</p>
</li>
<li><p>如果语句是 select id, k from T where k&#x3D;5，即普通索引查询方式（非聚簇索引），则只要搜索 k 索引树，这样的话查询一表即可。</p>
</li>
<li><p>如果语句是 select id, k , name from T where k&#x3D;5，第一次通过普通索引查询方式得到 id 的值为 500，再到 id 索引树搜索一次（需要回表才能查到name这个数据）。此时这个过程就成为回表了，回表是基于聚簇索引的缺点之一。</p>
</li>
</ol>
<p>所以为了避免回表，那么可以将k和name建成联合索引（<strong>在这个情况下的联合索引，在非主键索引就可以查询到数据，也等同于覆盖索引）。</strong></p>
<p><strong>为什么建成联合索引就可以避免回表？</strong></p>
<p>在4.3中提到，非聚簇索引的叶子结点存储的是指向数据表中相应行的指针，这个指针通常是数据表中主键的值。那么查询到K或者name后，自然的指向了对应的id，那么这个行数据自然也就拿到了。</p>
<h2 id="五、八股：什么时候索引会失效？"><a href="#五、八股：什么时候索引会失效？" class="headerlink" title="五、八股：什么时候索引会失效？"></a>五、八股：什么时候索引会失效？</h2><h3 id="1-不合理的查询条件"><a href="#1-不合理的查询条件" class="headerlink" title="1. 不合理的查询条件"></a>1. 不合理的查询条件</h3><ul>
<li><strong>前模糊查询</strong>：当使用LIKE操作符进行模糊匹配，并且匹配模式以通配符<code>%</code>开头时（如<code>LIKE &#39;%abc&#39;</code>），索引会失效。因为索引是基于前缀匹配的，前缀不确定时，数据库无法利用索引快速定位数据。</li>
<li><strong>OR条件中的非索引列</strong>：如果查询条件中包含OR，且OR连接的条件列中有的列不是索引列，那么索引可能会失效。尽管在某些情况下，如果OR连接的每个条件列都单独建立了索引，数据库可能会使用索引合并策略，但这并不总是发生。</li>
</ul>
<h3 id="2-对索引列使用函数或表达式"><a href="#2-对索引列使用函数或表达式" class="headerlink" title="2. 对索引列使用函数或表达式"></a>2. 对索引列使用函数或表达式</h3><ul>
<li><strong>函数操作</strong>：在查询条件中对索引列使用函数（如<code>UPPER(column_name)</code>、<code>LENGTH(column_name)</code>等）会导致索引失效。因为索引是基于列的原始值建立的，而函数操作改变了列的值，使得数据库无法直接利用索引。</li>
<li><strong>表达式计算</strong>：在索引列上进行表达式计算（如<code>column_name + 1 = 2</code>）同样会导致索引失效。原因与对索引列使用函数类似，索引保存的是原始值，而不是计算后的结果。</li>
</ul>
<h3 id="3-数据类型不匹配"><a href="#3-数据类型不匹配" class="headerlink" title="3. 数据类型不匹配"></a>3. 数据类型不匹配</h3><ul>
<li><strong>隐式类型转换</strong>：当查询条件中的数据类型与索引列的数据类型不匹配，且数据库进行了隐式类型转换时，索引可能会失效。例如，如果索引列是字符串类型，但在查询条件中使用了整型值，而没有显式地进行类型转换，那么数据库可能会进行隐式类型转换，从而导致索引失效。</li>
</ul>
<h3 id="4-索引使用不当"><a href="#4-索引使用不当" class="headerlink" title="4. 索引使用不当"></a>4. 索引使用不当</h3><ul>
<li><strong>联合索引非最左匹配</strong>：在使用联合索引时，如果查询条件没有遵循最左前缀原则，即没有从联合索引的最左边列开始匹配，那么索引可能会失效。这是因为联合索引是按照索引列的顺序进行排序的，直接跳过前面的列进行匹配会破坏索引的有序性。</li>
<li><strong>范围查询后的列</strong>：在联合索引中，如果某个列使用了范围查询（如<code>&gt;</code>、<code>&lt;</code>、<code>BETWEEN</code>等），那么该列之后的所有列都无法使用索引进行快速定位。</li>
</ul>
<h3 id="5-其他情况"><a href="#5-其他情况" class="headerlink" title="5. 其他情况"></a>5. 其他情况</h3><ul>
<li><strong>索引列包含大量重复值</strong>：如果索引列的值区分度不高，即包含大量重复值，那么数据库可能会选择不使用索引，而是通过全表扫描来查询数据。因为在这种情况下，使用索引可能并不会带来性能上的提升。</li>
<li><strong>索引列被用作条件表达式的一部分</strong>：在某些情况下，如果索引列被用作条件表达式的一部分（如<code>column_name IN (SELECT ...)</code>中的子查询），且数据库无法有效地将表达式转换为对索引的直接引用，那么索引可能会失效。</li>
</ul>
<h2 id="六、什么时候不推荐使用索引"><a href="#六、什么时候不推荐使用索引" class="headerlink" title="六、什么时候不推荐使用索引"></a>六、什么时候不推荐使用索引</h2><ol>
<li><strong>数据量小的表</strong>：如果表中的数据量非常小，比如少于1000条记录，那么索引的提速效果可能并不明显，反而会因为索引的维护成本（如存储空间和更新索引的时间）而降低数据库的整体性能。</li>
<li><strong>有大量重复数据的列</strong>：在这些列上建立索引，由于索引中的值大量重复，查询时索引并不能有效地减少搜索范围，同时还会增加索引的维护成本，因此在这些列上建立索引是不必要的。</li>
<li><strong>经常更新的表</strong>：对于经常进行插入、删除和更新操作的表，每次数据变动都需要同时更新索引，这会增加额外的写入负担，降低数据库的写入性能。因此，在这类表上应谨慎考虑索引的创建。</li>
<li><strong>在查询中很少使用或参考的列</strong>：如果列在查询中很少被使用或作为查询条件，那么建立索引并不能提高查询速度，反而会因为索引的维护成本而降低系统性能。</li>
<li><strong>定义为大型数据类型（如TEXT、IMAGE等）的列</strong>：这些列的数据量通常很大，建立索引会占用大量的存储空间，并且由于索引结构本身的特点，可能导致查询性能提升不明显。</li>
<li><strong>修改性能远远大于检索性能的场景</strong>：在某些应用中，数据的修改操作（如插入、更新、删除）可能比检索操作更频繁。在这种情况下，过多的索引会降低修改性能，因为每次数据变动都需要更新索引。因此，当修改性能的重要性高于检索性能时，应减少索引的创建。</li>
<li><strong>复杂的查询和联合索引的选择</strong>：在存在多个字段需要索引的情况下，如果简单地为每个字段都创建单列索引，可能会导致查询优化器在选择索引时变得复杂，增加查询的编译时间。此时，应考虑使用联合索引来优化查询性能。</li>
</ol>
<p>可以参考博客：<a href="https://blog.csdn.net/qq_39746820/article/details/123796252">mysql数据库哪些情况不适合使用索引_mysql重复值过多的字段适合做索引吗-CSDN博客</a></p>
<h2 id="附上一篇美团讲解的索引内容"><a href="#附上一篇美团讲解的索引内容" class="headerlink" title="附上一篇美团讲解的索引内容"></a>附上一篇美团讲解的索引内容</h2><p><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">美团：MySQL索引原理及慢查询优化</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL：（三）全局锁、表级锁、行级锁</title>
    <url>/2024/08/15/MySQL-%E9%94%81/</url>
    <content><![CDATA[<p>MySQL中的锁，按照锁的粒度分，分为：</p>
<ol>
<li>全局锁：锁定数据库中所有表</li>
<li>表级锁：每次操作锁整张表</li>
<li>行级锁：每次操作锁住对应行数据</li>
</ol>
<h1 id="一、全局锁"><a href="#一、全局锁" class="headerlink" title="一、全局锁"></a>一、全局锁</h1><p><img src="Snipaste_2024-08-16_15-45-59.png" alt="全局锁"></p>
<blockquote>
<p>mysqldump相信大家都听说过，这是用来进行数据库备份的工具，除此以外也可以采用数据库主从复制机制进行数据库备份，这同时也是异地容灾、备份等内容。</p>
</blockquote>
<p><strong>数据库备份操作：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 加锁操作</span><br><span class="line">flush tables with read lock;</span><br><span class="line"></span><br><span class="line"># 数据备份</span><br><span class="line">mysqldump -uroot -p1234 databases &gt; database.sql</span><br><span class="line"># 加端口的数据备份</span><br><span class="line">mysqldump -h192.168.xx.xx -uroot -p1234 databases &gt; database.sql</span><br><span class="line"></span><br><span class="line"># 解锁操作</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure>

<p>这里附上一篇<code>flush操作</code>的博客，用的是博客中的第4条：<a href="https://blog.csdn.net/a772304419/article/details/138797621">MySQL flush命令详解-CSDN博客</a></p>
<blockquote>
<p><strong>FLUSH TABLES</strong>: 关闭所有表并清空表缓存（如查询缓存），或者指定特定表进行刷新。这对于解决锁问题、确保数据一致性或在没有重启MySQL服务的情况下应用表结构更改很有用。加上<code>WITH READ LOCK</code>选项可以全局锁定所有表，以便进行安全的备份。</p>
</blockquote>
<p><strong>全局锁存在的问题：</strong></p>
<p><img src="Snipaste_2024-08-16_16-22-46.png" alt="全局锁存在的问题"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 数据备份</span><br><span class="line">mysqldump --single-transaction -uroot -p1234 databases &gt; database.sql</span><br></pre></td></tr></table></figure>

<p>加上这个参数以后，就是通过快照读而不加全局锁了，快照读在上一篇博客有介绍，可以戳链接看看：<a href="https://rengoku.top/2024/08/15/MySQL-MVCC/">MySQL：MVCC与事务 | 颓废市民黄先生 (rengoku.top)</a></p>
<h1 id="二、表级锁"><a href="#二、表级锁" class="headerlink" title="二、表级锁"></a>二、表级锁</h1><p><img src="Snipaste_2024-08-16_16-29-40.png" alt="表级锁分类"></p>
<h2 id="1-表锁"><a href="#1-表锁" class="headerlink" title="1. 表锁"></a>1. 表锁</h2><p>对于表锁，分为两类</p>
<ul>
<li>表共享读锁（read lock）</li>
<li>表独占写锁（write lock）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 加锁</span><br><span class="line">lock tables 表名... read/write</span><br><span class="line"></span><br><span class="line"># 解锁</span><br><span class="line">unlock tables</span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-08-16_16-41-58.png" alt="表锁"></p>
<p>我相信看到这里大家肯定非常熟悉，其实表锁和<strong>读写锁</strong>很类似，都是读共享，写独占。</p>
<p><strong>读的时候会阻塞写操作，例如DDL，DML，写的时候只能让拿到锁的客户端或者线程进行读写操作。</strong></p>
<p>读写锁可以参考另外一篇博客：<a href="https://rengoku.top/2024/08/05/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E4%B8%89%E3%80%81%E9%94%81/">Java多线程：三、多线程锁、java锁的实现 | 颓废市民黄先生 (rengoku.top)</a></p>
<p><strong>演示读锁：</strong></p>
<p><img src="Snipaste_2024-08-16_16-37-24.png" alt="表锁演示"></p>
<p>首先左边的客户端1（线程1）对表score加了一个读锁，然后两个客户端做select操作，发现都是可以读出来的；客户端1（线程1）如果进行写操作（update）则会报错，客户端2（线程2）进行修改操作会阻塞。</p>
<p>通过演示得到的结论：<strong>读锁不会阻塞读操作，而会阻塞其他客户端的写操作。</strong></p>
<p><strong>演示写锁：</strong></p>
<p><img src="Snipaste_2024-08-16_16-44-42.png" alt="写锁演示"></p>
<h2 id="2-元数据锁"><a href="#2-元数据锁" class="headerlink" title="2. 元数据锁"></a>2. 元数据锁</h2><p><img src="Snipaste_2024-08-16_16-55-26.png" alt="元数据锁"></p>
<p>简单来说，<strong>如果某一张表存在未提交的事务，那么元数据锁是不允许对表结构进行修改操作的。</strong></p>
<p>下面我提出两个问题，需要重点理解：</p>
<h3 id="（1）当进行DML操作的时候会添加MDL读锁，当进行DDL操作的时候添加MDL写锁，怎么理解这句话？"><a href="#（1）当进行DML操作的时候会添加MDL读锁，当进行DDL操作的时候添加MDL写锁，怎么理解这句话？" class="headerlink" title="（1）当进行DML操作的时候会添加MDL读锁，当进行DDL操作的时候添加MDL写锁，怎么理解这句话？"></a>（1）当进行DML操作的时候会添加MDL读锁，当进行DDL操作的时候添加MDL写锁，怎么理解这句话？</h3><p><strong>DML操作与MDL读锁</strong></p>
<p><strong>DML（Data Manipulation Language）</strong> 包括INSERT、UPDATE、DELETE等语句，这些语句用于修改数据库中的数据，但不涉及数据库结构的变更。当执行DML操作时，数据库需要访问表的元数据以了解表的结构（如列的类型、是否存在索引等），以便正确地执行数据修改。</p>
<p>为了保证在DML操作期间表的结构不会被其他事务修改（例如，通过DDL语句），数据库会对表的元数据加上一个<strong>MDL读锁</strong>。MDL读锁允许多个事务同时读取元数据，但阻止任何事务修改元数据。这样，DML操作可以安全地执行，因为它们知道在它们执行期间，表的结构是稳定的。</p>
<p><strong>DDL操作与MDL写锁</strong></p>
<p><strong>DDL（Data Definition Language）</strong> 包括CREATE TABLE、ALTER TABLE、DROP TABLE等语句，这些语句用于定义或修改数据库的结构。由于DDL操作直接改变数据库的结构，因此它们需要更高的访问权限和更严格的并发控制。</p>
<p>当执行DDL操作时，数据库会对涉及的表的元数据加上一个<strong>MDL写锁</strong>。MDL写锁是排他的，意味着当一个事务持有表的MDL写锁时，其他任何事务（无论是想读取还是修改元数据）都必须等待该锁被释放。这种锁定机制确保了DDL操作的原子性和一致性，防止了在DDL操作执行期间表的结构被意外修改或访问。</p>
<blockquote>
<p>“元数据”指的是描述数据的数据，它是关于数据本身的信息，包括但不限于数据的结构、属性、关系、存储位置、模型定义、生命周期等。</p>
</blockquote>
<h3 id="（2）如何理解兼容性？"><a href="#（2）如何理解兼容性？" class="headerlink" title="（2）如何理解兼容性？"></a>（2）如何理解兼容性？</h3><ul>
<li><strong>shared_read与shared_write的兼容性</strong>：在元数据锁的层面上，shared_read锁和shared_write锁是兼容的，因为它们都不涉及修改元数据。这意味着，当多个事务同时执行SELECT查询或DML操作时，它们可以并发地访问表的元数据。</li>
<li><strong>与排他锁的互斥性</strong>：然而，无论是shared_read锁还是shared_write锁，都与DDL操作所需的MDL排他锁互斥。这是因为DDL操作需要修改表的元数据，而修改元数据时必须确保没有其他事务正在访问或修改该元数据。</li>
</ul>
<h2 id="3-意向锁"><a href="#3-意向锁" class="headerlink" title="3. 意向锁"></a>3. 意向锁</h2><p>假设线程1已经对某行数据加了行锁，现在线程2想要加一个表锁，那么线程2可以直接加锁吗？<strong>实际上是不行的，这样行锁和表锁会冲突，此时线程2需要对整个表进行逐行遍历，判断是否添加了行锁，没有行锁才能加表锁。</strong>这样一看，加表锁的的效率是不是十分的低？于是为了优化这个加锁的机制，现在引入了意向锁。</p>
<p><img src="Snipaste_2024-08-16_17-19-08.png" alt="意向锁概述"></p>
<p>意向锁优化：<strong>如果线程A添加行锁的时候，添加的意向锁和接下来线程B添加的表锁是兼容的，那么线程B添加表锁成功，反之线程B添加处于阻塞。</strong></p>
<blockquote>
<p>线程A添加行锁的时候，可以添加意向锁。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT ... LOCK IN SHARE MODE</span><br></pre></td></tr></table></figure>

<p>这样在加共享锁时候会添加IS。</p>
</blockquote>
<p><strong>意向锁分为两类：意向共享锁（IS）和意向排他所（IX）。</strong></p>
<p><img src="Snipaste_2024-08-16_17-32-45.png" alt="意向锁分类"></p>
<p>意向共享锁：</p>
<p>如果线程A添加了行锁的时候添加了IS，那么线程B添加表锁的读锁可以添加成功，添加表锁的写锁失败</p>
<p>意向排它锁：</p>
<p>如果线程A添加了行锁的时候添加了XS，那么线程B添加表锁的读锁或者写锁都会失败。</p>
<h1 id="三、行级锁"><a href="#三、行级锁" class="headerlink" title="三、行级锁"></a>三、行级锁</h1><p><img src="Snipaste_2024-08-16_18-00-25.png" alt="行级锁"></p>
<p><strong>划重点：如果不走索引，那么行级锁就失效了</strong></p>
<p><strong>划重点：如果不走索引，那么行级锁就失效了</strong></p>
<p><strong>划重点：如果不走索引，那么行级锁就失效了</strong></p>
<p>在RR的事务隔离级别下，MySQL InnoDB存储引擎默认使用的是<strong>临键锁（Next-Key Lock）</strong>，但也会根据具体的查询条件和索引情况来决定是否退化为间隙锁（Gap Lock）或行锁（Record Lock）。</p>
<h2 id="1-行锁"><a href="#1-行锁" class="headerlink" title="1. 行锁"></a>1. 行锁</h2><p>InnoDB使用多种类型的行锁，包括共享锁（S锁）和排他锁（X锁）：</p>
<ul>
<li><p><strong>共享锁（S锁）</strong>：允许事务读取一行数据，但不允许其他事务修改它。共享锁不会阻止其他事务获取同一行的共享锁，<strong>但会阻止排他锁的获取。</strong></p>
<blockquote>
<p>什么叫阻止排他锁的获取？</p>
<p>当一个事务对数据库中的某个资源（如一行数据）加上了共享锁（Shared Lock）时，这个共享锁允许其他事务也对该资源加上共享锁进行读取操作，但会阻止其他事务对该资源加上排他锁（Exclusive Lock）进行写入或修改操作。</p>
</blockquote>
</li>
<li><p><strong>排他锁（X锁）</strong>：允许事务读取和修改一行数据，同时阻止其他事务获取该行的任何类型的锁。当事务需要修改一行数据时，它会尝试获取该行的排他锁。如果成功，其他事务将无法读取或修改该行，直到锁被释放。</p>
</li>
</ul>
<p><img src="Snipaste_2024-08-16_18-09-19.png" alt="增删改查的加锁情况"></p>
<p><strong>可以看到，DML语句默认是会加上行锁的。刚刚在意向锁中也有介绍，后面两个方式会同时添加意向锁。</strong></p>
<p><img src="Snipaste_2024-08-16_18-12-15.png"></p>
<p><strong>刚刚说了，不走索引的话行锁就失效，此时会自动升级为表锁</strong></p>
<h2 id="2-间隙锁-临键锁"><a href="#2-间隙锁-临键锁" class="headerlink" title="2. 间隙锁&amp;临键锁"></a>2. 间隙锁&amp;临键锁</h2><p><img src="Snipaste_2024-08-16_18-47-46.png" alt="间隙锁概述"></p>
<p><strong>演示第一种情况：索引上的等值查询(唯一索引), 给不存在的记录加锁时,优化为间隙锁。</strong></p>
<p><img src="Snipaste_2024-08-16_18-43-35.png" alt="间隙锁演示1"></p>
<p>线程A使用begin开启事务以后，可以在线程B中的lock_data中可以看到8之前的数据被间隙锁锁上了（3-8，不包含3和8），此时在线程B执行插入操作是会被阻塞的：</p>
<p><img src="Snipaste_2024-08-16_18-52-24.png" alt="间隙锁阻塞插入操作"></p>
<p>如果线程A将事务commit后，线程B才能执行插入操作。</p>
<p><strong>演示第二种情况：索引上的等值查询(普通索引)，向右遍历时最后一个值不满足查询需求时, next-key lock退化为间隙锁。</strong></p>
<p>我们来慢慢分析这段话，现在这段话针对的是<strong>普通索引</strong>。普通索引不是唯一的，这个<strong>B+树的叶子结点形成的双向链表是可以有重复的节点的。</strong></p>
<p>假设我们有一个表<code>students</code>，其中有一个非唯一普通索引<code>age</code>，表中的数据如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----+-----+  </span><br><span class="line">| id | age |  </span><br><span class="line">+----+-----+  </span><br><span class="line">|  1 |  18 |  </span><br><span class="line">|  2 |  18 |  </span><br><span class="line">|  3 |  18 |  </span><br><span class="line">|  4 |  20 |  </span><br><span class="line">|  5 |  22 |  </span><br><span class="line">+----+-----+</span><br></pre></td></tr></table></figure>

<p>现在，我们执行一个等值查询，试图找到<code>age</code>为19的记录，但显然这样的记录不存在：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>; <span class="comment">-- 开始一个事务  </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">19</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; <span class="comment">-- 使用FOR UPDATE来触发锁</span></span><br></pre></td></tr></table></figure>

<p>在这个查询中，InnoDB会利用<code>age</code>索引来查找<code>age</code>为19的记录。由于索引是排序的，查询会向右遍历索引树，直到找到一个不满足查询条件（即<code>age</code>不等于19）的值为止。在这个例子中，查询会遍历到<code>age</code>为20的记录，因为20是第一个大于19的值。</p>
<p><strong>加锁行为：</strong></p>
<ul>
<li><strong>在遍历过程中</strong>：由于查询是等值查询，并且索引是非唯一的，InnoDB原本会为每个可能满足条件的记录（如果存在的话）加上next-key lock。但是，在这个例子中，没有记录满足条件。</li>
<li><strong>当遍历到最后一个不满足条件的值时</strong>：在这个例子中，是<code>age</code>为20的记录。由于查询没有找到任何满足条件的记录，InnoDB不会在这个记录上加上行锁（因为行锁是针对满足查询条件的记录的）。但是，为了防止其他事务在这个间隙（即<code>age</code>为18和20之间的间隙）中插入<code>age</code>为19的记录，InnoDB会在这个间隙上加上间隙锁。</li>
</ul>
<p><strong>结果：</strong></p>
<p>因此，尽管查询没有找到任何满足条件的记录，但InnoDB仍然在<code>age</code>为18和20之间的间隙上加了间隙锁。这意味着，在这个事务提交之前，其他事务无法在这个间隙中插入<code>age</code>为19的记录，从而防止了幻读的发生。</p>
<p><strong>这里存在的理解误区：</strong></p>
<p>现在是基于age索引进行的，所以id走唯一索引不一样，现在的间隙锁锁住的是age&#x3D;18和age&#x3D;20之间的间隙，而非age&#x3D;18或者age&#x3D;20的哪条具体的记录。</p>
<p><strong>情景三：索引上的范围查询(唯一索引)– 会访问到不满足条件的第一个值为止。</strong></p>
<ul>
<li><p><strong>查询执行</strong>：当执行一个范围查询（如<code>SELECT * FROM table WHERE index_column BETWEEN value1 AND value2 FOR UPDATE;</code>）时，InnoDB会利用索引来加速查询过程。</p>
</li>
<li><p><strong>锁定行为</strong>：</p>
<p>对于唯一索引，由于索引值是唯一的，因此查询会逐一访问索引中的记录，直到找到不满足条件的第一个值为止。</p>
<p>在这个过程中，InnoDB会为每个满足条件的记录加上临键锁。这意味着，它锁定了这些记录本身以及它们之前的间隙（实际上，对于唯一索引的最后一个满足条件的记录，它可能只锁定间隙部分，因为后面没有更多的记录来形成临键锁的行锁部分）。</p>
<p>当查询到达不满足条件的第一个值时，InnoDB会在这个值之前的间隙上加上间隙锁（如果之前还没有加上的话），但不会锁定这个值本身，因为它不满足查询条件。</p>
</li>
<li><p><strong>防止幻读</strong>：通过这种方式，临键锁确保了即使在可重复读事务隔离级别下，其他事务也无法在查询范围内插入新的记录，从而防止了幻读的发生。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7部署docker</title>
    <url>/2024/07/06/centOS%E9%83%A8%E7%BD%B2docker/</url>
    <content><![CDATA[<h1 id="0-安装Docker"><a href="#0-安装Docker" class="headerlink" title="0.安装Docker"></a>0.安装Docker</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p>
<p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p>
<p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</p>
<h1 id="1-CentOS安装Docker"><a href="#1-CentOS安装Docker" class="headerlink" title="1.CentOS安装Docker"></a>1.CentOS安装Docker</h1><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p>
<h2 id="1-1-卸载（可选）"><a href="#1-1-卸载（可选）" class="headerlink" title="1.1.卸载（可选）"></a>1.1.卸载（可选）</h2><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure>



<h2 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2.安装docker"></a>1.2.安装docker</h2><p>首先需要大家虚拟机联网，安装yum工具</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure>



<p>然后更新本地镜像源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>





<p>然后输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure>

<p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p>
<h2 id="1-3-启动docker"><a href="#1-3-启动docker" class="headerlink" title="1.3.启动docker"></a>1.3.启动docker</h2><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>



<p>通过命令启动docker：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure>



<p>然后输入命令，可以查看docker版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="image-20210418154704436.png"></p>
<h2 id="1-4-配置镜像加速"><a href="#1-4-配置镜像加速" class="headerlink" title="1.4.配置镜像加速"></a>1.4.配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>
<p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<h1 id="2-CentOS7安装DockerCompose"><a href="#2-CentOS7安装DockerCompose" class="headerlink" title="2.CentOS7安装DockerCompose"></a>2.CentOS7安装DockerCompose</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1.下载"></a>2.1.下载</h2><p>Linux下需要通过命令下载：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果下载速度较慢，或者下载失败，联系博主给你一份</p>
<p><img src="image-20210417133020614.png"></p>
<p>上传到<code>/usr/local/bin/</code>目录也可以。</p>
<h2 id="2-2-修改文件权限"><a href="#2-2-修改文件权限" class="headerlink" title="2.2.修改文件权限"></a>2.2.修改文件权限</h2><p>修改文件权限：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>



<h2 id="2-3-Base自动补全命令："><a href="#2-3-Base自动补全命令：" class="headerlink" title="2.3.Base自动补全命令："></a>2.3.Base自动补全命令：</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果这里出现错误，需要修改自己的hosts文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>





<h1 id="3-Docker镜像仓库"><a href="#3-Docker镜像仓库" class="headerlink" title="3.Docker镜像仓库"></a>3.Docker镜像仓库</h1><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p>
<p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p>
<h2 id="3-1-简化版镜像仓库"><a href="#3-1-简化版镜像仓库" class="headerlink" title="3.1.简化版镜像仓库"></a>3.1.简化版镜像仓库</h2><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p>
<p>搭建方式比较简单，命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry	\</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure>



<p>命令中挂载了一个数据卷registry-data到容器内的&#x2F;var&#x2F;lib&#x2F;registry 目录，这是私有镜像库存放数据的目录。</p>
<p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p>
<h2 id="3-2-带有图形化界面版本"><a href="#3-2-带有图形化界面版本" class="headerlink" title="3.2.带有图形化界面版本"></a>3.2.带有图形化界面版本</h2><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure>



<h2 id="3-3-配置Docker信任地址"><a href="#3-3-配置Docker信任地址" class="headerlink" title="3.3.配置Docker信任地址"></a>3.3.配置Docker信任地址</h2><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>软件技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Git：版本控制工具</title>
    <url>/2024/06/26/git%E9%80%9F%E6%9F%A5/</url>
    <content><![CDATA[<h3 id="1-博客前言"><a href="#1-博客前言" class="headerlink" title="1. 博客前言"></a>1. 博客前言</h3><p>本篇博客记录git常用的命令，用于快速复习。基于命令行，对一个项目进行版本控制（不使用图形化界面，例如idea、vscode等）。</p>
<h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><h4 id="2-1-删除git仓库"><a href="#2-1-删除git仓库" class="headerlink" title="2.1 删除git仓库"></a>2.1 删除git仓库</h4><p>​	如果项目是拉取的，或者想要换一个gitee仓库，那么在使用自己的仓库之前需要将之前的删掉。步骤如下：</p>
<ol>
<li><p>打开命令行工具,得航到你的项目所在的目录。</p>
</li>
<li><p>输入以下命令来取消当前项目与Gitee的关联: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>

<p>这里的”origin”通常是默认的远程仓库名称，但如果你使用了不同的名称，你需要将其替换为实际的远程仓库名。</p>
</li>
<li><p>输入以下命令来检查是否已成功取消关联:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -V</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​		如果没有版本提示，说明就是删除成功了，跳到2.2步</p>
<h4 id="2-2-提交代码到gitee仓库"><a href="#2-2-提交代码到gitee仓库" class="headerlink" title="2.2 提交代码到gitee仓库"></a>2.2 提交代码到gitee仓库</h4><ol>
<li><p>项目初始化。右键自己的项目，或者进项目的目录一级，右键打开git bash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 右键自己的项目，或者进项目的目录一级，右键打开git bash</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure>



<p>此时文件夹中多出一个.git文件（需要打开隐藏文件夹开关）</p>
<img src="init%E5%91%BD%E4%BB%A4.png" style="zoom: 50%;">




</li>
<li><p>添加远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># origin 后面的是自己在gitee上创建的仓库地址</span></span><br><span class="line">git remote add origin https://gitee.com/samurai127/XXX.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否连接成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<p>提示版本号说明成功绑定</p>
</li>
</ol>
<h4 id="2-3-提交"><a href="#2-3-提交" class="headerlink" title="2.3 提交"></a>2.3 提交</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将代码提交到本地仓库</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git commit -m <span class="string">&#x27;版本备注&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代码推送到远程仓库。如果多人开发，需要把master换成自己的分支，例如dev01</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>至此，在gitee上已经能够看到提交的代码了</p>
<h4 id="2-4-版本回退"><a href="#2-4-版本回退" class="headerlink" title="2.4 版本回退"></a>2.4 版本回退</h4><p>如果本地的代码被你改的bug一大堆，那么可以尝试恢复到之前交的git仓库的版本。<br>此处推荐使用reset命令进行版本回退（如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用这种方法）。</p>
<h5 id="2-4-1-回退到上一个版本"><a href="#2-4-1-回退到上一个版本" class="headerlink" title="2.4.1 回退到上一个版本"></a>2.4.1 回退到上一个版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取所有更新，不同步</span></span><br><span class="line">git fetch --all </span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地代码同步线上最新版本(会覆盖本地所有与远程仓库.上同名的文件);</span></span><br><span class="line">git reset --hard origin/ master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再更新一次 (其实也可以不用，第二二步命令做过了其实)</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h5 id="2-4-2-回退到指定版本"><a href="#2-4-2-回退到指定版本" class="headerlink" title="2.4.2 回退到指定版本"></a>2.4.2 回退到指定版本</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">git logs</span><br><span class="line"><span class="comment"># 回退版本：f42aa0e换成需要的版本号</span></span><br><span class="line">git reset --hard f42aa0e</span><br></pre></td></tr></table></figure>



<h3 id="3-管理分支开发"><a href="#3-管理分支开发" class="headerlink" title="3. 管理分支开发"></a>3. 管理分支开发</h3><h4 id="3-1-从其他分支更新本地代码"><a href="#3-1-从其他分支更新本地代码" class="headerlink" title="3.1 从其他分支更新本地代码"></a>3.1 从其他分支更新本地代码</h4><p>假设多人开发，我在dev01，另一个成员在dev02，dev02更新后上传到origin dev02，我需要在本地更新dev02的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin dev02:dev01</span><br></pre></td></tr></table></figure>



<p>看一张图了解原理：</p>
<img src="pull%E5%91%BD%E4%BB%A4.png" style="zoom: 50%;">

<p><strong>所以：git pull &#x3D; git fetch + git merge</strong></p>
<h4 id="3-2-绑定远程分支和本地分支"><a href="#3-2-绑定远程分支和本地分支" class="headerlink" title="3.2 绑定远程分支和本地分支"></a>3.2 绑定远程分支和本地分支</h4><p>按照3.1的场景，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev02 origin/dev02 </span><br></pre></td></tr></table></figure>

<p>这个命令做了如下事情：</p>
<ol>
<li><strong>创建本地分支</strong>：如果本地不存在名为 dev02 的分支，这个命令会创建一个新的本地分支 dev02。</li>
<li><strong>设置上游分支</strong>：新创建的本地 dev02 分支会自动设置为跟踪（tracking）远程仓库 origin 上的 dev02 分支。这意味着当你以后在这个本地分支上执行 git pull 或 git  push（不带参数）时，Git 会知道要与远程的 origin&#x2F;dev02 分支进行交互。</li>
</ol>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>软件技术</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程：（一）线程池</title>
    <url>/2024/08/03/java-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>全文了解线程池干货，<strong>要想看面试题直接看标题中带有八股的就行了。</strong></p>
<h1 id="一、什么是线程池"><a href="#一、什么是线程池" class="headerlink" title="一、什么是线程池"></a>一、什么是线程池</h1><h2 id="1-1-什么是线程池？"><a href="#1-1-什么是线程池？" class="headerlink" title="1.1 什么是线程池？"></a>1.1 什么是线程池？</h2><p>线程池（Thread Pool）是一种并发编程中常用的技术，用于管理和重用线程。它由线程池管理器、工作队列和线程池线程组成。</p>
<p>线程池的基本概念是，在应用程序启动时创建一定数量的线程，并将它们保存在线程池中。当需要执行任务时，从线程池中获取一个空闲的线程，将任务分配给该线程执行。当任务执行完毕后，线程将返回到线程池，可以被其他任务复用。</p>
<p>大白话：线程池的设计思想是为了避免频繁地创建和销毁线程的开销，以及控制并发执行的线程数量，从而提高系统的性能和资源利用率。线程池保证线程的可复用。</p>
<h2 id="1-2-线程池的关键组成部分："><a href="#1-2-线程池的关键组成部分：" class="headerlink" title="1.2 线程池的关键组成部分："></a>1.2 线程池的关键组成部分：</h2><h3 id="1-2-1-线程池管理器（ThreadPoolExecutor）"><a href="#1-2-1-线程池管理器（ThreadPoolExecutor）" class="headerlink" title="1.2.1 线程池管理器（ThreadPoolExecutor）"></a>1.2.1 线程池管理器（ThreadPoolExecutor）</h3><p>负责创建、管理和控制线程池。它负责线程的创建、销毁和管理，以及线程池的状态监控和调度任务。</p>
<h3 id="1-2-2-线程池阻塞队列（BlockingQueue）"><a href="#1-2-2-线程池阻塞队列（BlockingQueue）" class="headerlink" title="1.2.2 线程池阻塞队列（BlockingQueue）"></a>1.2.2 线程池阻塞队列（BlockingQueue）</h3><p>用于存储待执行的任务。当线程池中的线程都在执行任务时，新的任务会被放入工作队列中等待执行。</p>
<h3 id="1-2-3-线程池线程（Worker-Thread）"><a href="#1-2-3-线程池线程（Worker-Thread）" class="headerlink" title="1.2.3 线程池线程（Worker Thread）"></a>1.2.3 线程池线程（Worker Thread）</h3><p>实际执行任务的线程。线程池中会维护一组线程，这些线程可以被重复使用，从而避免了频繁创建和销毁线程的开销。</p>
<h2 id="1-3-八股：Java线程池中阻塞队列常用类型有哪些？"><a href="#1-3-八股：Java线程池中阻塞队列常用类型有哪些？" class="headerlink" title="1.3 八股：Java线程池中阻塞队列常用类型有哪些？"></a>1.3 八股：Java线程池中阻塞队列常用类型有哪些？</h2><p><code>ArrayBlockingQueue</code>是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则 对元素进行排序。 </p>
<p><code>LinkedBlockingQueue</code> 一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于 ArrayBlockingQueue </p>
<p><code>SynchronousQueue</code>一个不存储元素的阻塞队列。</p>
<p><code>PriorityBlockingQueue</code>一个具有优先级的无限阻塞队列。PriorityBlockingQueue也是基于最小二叉堆实现。PriorityBlockingQueue 并<strong>不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。</strong><br>因此使用的时候要特别注意，<strong>生产者生产数据的速度绝对不能快于消费者消费数据的速度</strong>，否则时间一长，会最终耗尽所有的可用堆内存空间。</p>
<p><code>DelayQueue</code> 阿里内部资料只有当其指定的延迟时间到了，才能够从队列中获取到该元素。 DelayQueue是一个没有大小限制的队列， 因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。 </p>
<p>这里能说出前三种也就差不多了，如果能说全那是最好。</p>
<h1 id="二、八股：常用的线程池"><a href="#二、八股：常用的线程池" class="headerlink" title="二、八股：常用的线程池"></a>二、八股：常用的线程池</h1><p><strong>newSingleThreadExecutor：</strong>创建一个单线程的线程池，此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>
<p><strong>newFixedThreadPool：</strong>创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。</p>
<p><strong>newCachedThreadPool：</strong>创建一个可缓存的线程池，此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。</p>
<p><strong>newScheduledThreadPool：</strong>创建一个大小无限的线程池，此线程池支持定时以及周期性执行任务的需求。</p>
<h1 id="三、使用线程池的步骤"><a href="#三、使用线程池的步骤" class="headerlink" title="三、使用线程池的步骤"></a>三、使用线程池的步骤</h1><h2 id="3-1-使用线程池的一般步骤如下："><a href="#3-1-使用线程池的一般步骤如下：" class="headerlink" title="3.1 使用线程池的一般步骤如下："></a>3.1 使用线程池的一般步骤如下：</h2><ol>
<li><strong>创建线程池：</strong>使用Executors工具类提供的静态方法之一，或者直接使用ThreadPoolExecutor类来创建线程池。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>); <span class="comment">// 创建固定大小的线程池</span></span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-08-03_18-05-06.png" alt="使用executors工具类创建线程"></p>
<p><code>newCachedThreadPool</code>说是没有上限的线程池，实际上还是有的，是int的最大值。并且普通电脑在创建几千个的时候就蚌埠住了，所以理论上是没有上限的线程池。</p>
<ol start="2">
<li><strong>提交任务：</strong>使用execute()或submit()方法将任务提交给线程池。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executor.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>()); <span class="comment">// 提交Runnable任务</span></span><br><span class="line">Future&lt;String&gt; future = executor.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>()); <span class="comment">// 提交Callable任务，并返回Future对象</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>关闭线程池：</strong>在不再需要线程池时，需要调用shutdown()方法来关闭线程池。这将停止接受新任务，并逐渐关闭线程池中的线程。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executor.shutdown();</span><br></pre></td></tr></table></figure>

<p>实际开发中不会关闭线程池，比如游戏的服务器之类的，实时打开，在学习的时候还是需要了解流程的。</p>
<h2 id="3-2-八股：Java线程池中submit-和-execute-方法有什么区别？"><a href="#3-2-八股：Java线程池中submit-和-execute-方法有什么区别？" class="headerlink" title="3.2 八股：Java线程池中submit() 和 execute()方法有什么区别？"></a>3.2 八股：Java线程池中submit() 和 execute()方法有什么区别？</h2><p>两个方法都可以向线程池提交任务，execute()方法的返回类型是void，它定义在Executor接口中, 而submit()方法可以返回持有计算结果的Future对象，它定义在ExecutorService接口中，它扩展了 Executor接口，其它线程池类像ThreadPoolExecutor和ScheduledThreadPoolExecutor都有这些 方法。</p>
<h2 id="3-3-演示线程池（个人认为理解线程池的需要看）"><a href="#3-3-演示线程池（个人认为理解线程池的需要看）" class="headerlink" title="3.3 演示线程池（个人认为理解线程池的需要看）"></a>3.3 演示线程池（个人认为理解线程池的需要看）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.print1n(Thread.current <span class="title function_">Thread</span><span class="params">()</span>.getName() + ---<span class="string">&quot; );</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//main方法：</span></span><br><span class="line"><span class="string">//1.获取线程池对象</span></span><br><span class="line"><span class="string">ExecutorService pool1 = Executors . newCachedThreadPool();</span></span><br><span class="line"><span class="string">//2.提交任务</span></span><br><span class="line"><span class="string">pool1. submit (new MyRunnable());</span></span><br><span class="line"><span class="string">//Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">poo11.submit (new MyRunnable());</span></span><br><span class="line"><span class="string">//Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">pool1.submit(new MyRunnable());</span></span><br><span class="line"><span class="string">//Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">pool1.submit(new MyRunnable());</span></span><br><span class="line"><span class="string">//Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">poo11.submit (new MyRunnable());</span></span><br><span class="line"><span class="string">//Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">pool1.submit (new MyRunnable());</span></span><br><span class="line"><span class="string">//3.销毁线程池</span></span><br><span class="line"><span class="string">//pool1. shutdown();</span></span><br></pre></td></tr></table></figure>

<p>首先，在main方法中，不让main线程sleep，那么打印的结果如下：可以看到，线程池1中创建了1,2,3,4,5，一共5个线程（打印结果比较长我就截图一部分，实际上是5个）</p>
<p><img src="Snipaste_2024-08-03_18-21-34.png" alt="main线程没有sleep的打印结果"></p>
<p><strong>如果让main线程睡眠，那么可以让线程1在main方法sleep时赶紧结束run方法中的逻辑，使得线程1执行结束后返回线程池，在main线程sleep的时间结束后，再次调用submit方法时，拿到的还是线程1</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.print1n(Thread.current <span class="title function_">Thread</span><span class="params">()</span>.getName() + ---<span class="string">&quot; );</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//main方法：</span></span><br><span class="line"><span class="string">//1.获取线程池对象</span></span><br><span class="line"><span class="string">ExecutorService pool1 = Executors . newCachedThreadPool();</span></span><br><span class="line"><span class="string">//2.提交任务</span></span><br><span class="line"><span class="string">pool1. submit (new MyRunnable());</span></span><br><span class="line"><span class="string">Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">poo11.submit (new MyRunnable());</span></span><br><span class="line"><span class="string">Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">pool1.submit(new MyRunnable());</span></span><br><span class="line"><span class="string">Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">pool1.submit(new MyRunnable());</span></span><br><span class="line"><span class="string">Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">poo11.submit (new MyRunnable());</span></span><br><span class="line"><span class="string">Thread.sleep( millis: 1000);</span></span><br><span class="line"><span class="string">pool1.submit (new MyRunnable());</span></span><br><span class="line"><span class="string">//3.销毁线程池</span></span><br><span class="line"><span class="string">//pool1. shutdown();</span></span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-08-03_18-26-05.png" alt="使main线程sleep的打印结果"></p>
<h1 id="四、线程池原理"><a href="#四、线程池原理" class="headerlink" title="四、线程池原理"></a>四、线程池原理</h1><h2 id="4-1-ThreadPoolExecutor类"><a href="#4-1-ThreadPoolExecutor类" class="headerlink" title="4.1 ThreadPoolExecutor类"></a>4.1 ThreadPoolExecutor类</h2><p>在创建线程池的方法中（3.1节），曾经说过创建线程池使用工具类或者使用ThreadPoolExecutor类，实际上工具类的底层也是调用ThreadPoolExecutor类来创建线程池：</p>
<p>Executors类提供4个静态工厂方法：newCachedThreadPool()、newFixedThreadPool(int)、newSingleThreadExecutor和newScheduledThreadPool(int)。这些方法最终都是通过ThreadPoolExecutor类来完成的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可以看到类里面有7个参数，这7个参数也就是线程池的核心参数。</strong></p>
<h2 id="4-2-八股：线程池七大核心参数"><a href="#4-2-八股：线程池七大核心参数" class="headerlink" title="4.2 八股：线程池七大核心参数"></a>4.2 八股：线程池七大核心参数</h2><h3 id="4-2-1-黑马讲的故事（方便记忆参数，可以跳过）"><a href="#4-2-1-黑马讲的故事（方便记忆参数，可以跳过）" class="headerlink" title="4.2.1 黑马讲的故事（方便记忆参数，可以跳过）"></a>4.2.1 黑马讲的故事（方便记忆参数，可以跳过）</h3><p>故事就是讲了饭店内只有3名正式员工，同时招待的顾客最大6人，但是剩下的3名员工是临时工，只有招待人数大于3人的时候才会去招人，否则就不招，辞退这三个临时工。</p>
<p><img src="Snipaste_2024-08-03_18-48-51.png"></p>
<p>但是饭店小，只能允许10个人排队，超出的人就不给排队了</p>
<p><img src="Snipaste_2024-08-03_18-53-22.png"></p>
<p>OK，现在根据故事给出的7个参数代换： </p>
<p><img src="Snipaste_2024-08-03_18-57-58.png" alt="7个参数代换"></p>
<h3 id="4-2-2-八股：7个核心参数"><a href="#4-2-2-八股：7个核心参数" class="headerlink" title="4.2.2 八股：7个核心参数"></a>4.2.2 八股：7个核心参数</h3><ol>
<li>int corePoolSize,核心线程数量，不能小于0 </li>
<li>int maximumPoolSize,最大的线程数量，减去核心线程&#x3D;临时线程</li>
<li>long keepAliveTime,空闲线程的最大存活时间</li>
<li>TimeUnit unit,时间单位</li>
<li>BlockingQueue<Runnable> workQueue,任务队列</Runnable></li>
<li>ThreadFactory threadFactory,创建线程工厂</li>
<li>RejectedExecutionHandler handler，任务的拒绝策略</li>
</ol>
<h2 id="4-3-线程池的工作原理流程（建议4-3全看，方便理解4-5的八股）"><a href="#4-3-线程池的工作原理流程（建议4-3全看，方便理解4-5的八股）" class="headerlink" title="4.3 线程池的工作原理流程（建议4.3全看，方便理解4.5的八股）"></a>4.3 线程池的工作原理流程（建议4.3全看，方便理解4.5的八股）</h2><h3 id="4-3-1-场景一"><a href="#4-3-1-场景一" class="headerlink" title="4.3.1 场景一"></a>4.3.1 场景一</h3><p>现在有如下场景：核心线程3个，临时线程3个，此时有5个任务进来的时候线程池应该如何创建线程？</p>
<p><img src="Snipaste_2024-08-03_19-05-57.png"></p>
<p>正确的是创建3个核心线程去处理前3个任务，而后两个任务应该排队，直到3个核心线程空闲出来才会被执行。</p>
<p><img src="Snipaste_2024-08-03_19-07-50.png"></p>
<h3 id="4-3-2-场景二"><a href="#4-3-2-场景二" class="headerlink" title="4.3.2 场景二"></a>4.3.2 场景二</h3><p>此时在场景一中，提交的任务数是8个，那么线程池如何创建线程？</p>
<p>答案是1,2,3任务由核心线程处理，4,5,6任务进入阻塞队列，7,8任务交给临时线程处理。</p>
<p><strong>重点：</strong></p>
<ol>
<li>只有阻塞队列满了以后，才会临时线程</li>
<li>任务被线程处理的顺序不取决于先来先处理，比如案例中4,5,6任务先来但是7,8任务先被处理</li>
</ol>
<p><img src="Snipaste_2024-08-03_19-13-39.png"></p>
<h3 id="4-3-3-场景三"><a href="#4-3-3-场景三" class="headerlink" title="4.3.3 场景三"></a>4.3.3 场景三</h3><p>当提交的任务数超过了核心线程数（参数1），临时线程数（参数2减去参数1），队列数（参数6，创建阻塞队列的时候给队列传递参数决定容量的大小，比如ArrayBlockingQueue指定数组大小，见1.3节）的时候，多出来的线程就会触发拒绝策略（参数7）</p>
<p><img src="Snipaste_2024-08-03_19-23-56.png"></p>
<h2 id="4-4-八股：任务拒绝策略（参数7）"><a href="#4-4-八股：任务拒绝策略（参数7）" class="headerlink" title="4.4 八股：任务拒绝策略（参数7）"></a>4.4 八股：任务拒绝策略（参数7）</h2><p><img src="Snipaste_2024-08-03_19-28-28.png" alt="任务拒绝策略"></p>
<p><strong>主要的是使用默认的策略。</strong></p>
<p>如果使用第三个，那么在场景三中，被抛弃的是任务4，然后加入任务10，队列为5&#x3D;&gt;6&#x3D;&gt;10</p>
<p>如果使用第四个，那么任务10会跳过线程池，直接调用这个线程的run方法</p>
<h2 id="4-5-阿里八股：线程池原理知道吗？以及核心参数？"><a href="#4-5-阿里八股：线程池原理知道吗？以及核心参数？" class="headerlink" title="4.5 阿里八股：线程池原理知道吗？以及核心参数？"></a>4.5 阿里八股：线程池原理知道吗？以及核心参数？</h2><p>首先线程池有几个核心的参数概念： </p>
<ol>
<li>最大线程数maximumPoolSize </li>
<li>核心线程数corePoolSize </li>
<li>活跃时间keepAliveTime </li>
<li>阻塞队列workQueue </li>
<li>拒绝策略RejectedExecutionHandler</li>
</ol>
<p>当提交一个新任务到线程池时，具体的执行流程如下： </p>
<ol>
<li>当我们提交任务，线程池会根据corePoolSize大小创建若干任务数量线程执行任务 </li>
<li>当任务的数量超过corePoolSize数量，后续的任务将会进入阻塞队列阻塞排队 </li>
<li>当阻塞队列也满了之后，那么将会继续创建(maximumPoolSize-corePoolSize)个数量的线程来 执行任务，如果任务处理完成，maximumPoolSize-corePoolSize额外创建的线程等待 keepAliveTime之后被自动销毁 </li>
<li>如果达到maximumPoolSize，阻塞队列还是满的状态，那么将根据不同的拒绝策略对应处理</li>
</ol>
<p><img src="Snipaste_2024-08-03_19-33-13.png"></p>
<p>这是阿里面试多线程&amp;JUC的35题，我直接照着搬答案过来了，是不是把第四大节看完后就很好理解了？</p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程：（二）JMM、happens-before、volatile</title>
    <url>/2024/08/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9AJMM/</url>
    <content><![CDATA[<h1 id="一、内存模型（含八股内容）"><a href="#一、内存模型（含八股内容）" class="headerlink" title="一、内存模型（含八股内容）"></a>一、内存模型（含八股内容）</h1><h2 id="1-1-内存模型及并发问题"><a href="#1-1-内存模型及并发问题" class="headerlink" title="1.1 内存模型及并发问题"></a>1.1 内存模型及并发问题</h2><p>Java 内存模型（Java Memory Model，JMM）定义了 Java 程序中的变量、线程如何和主存以及工作内存进行交互的规则。它主要涉及到多线程环境下的共享变量可见性、指令重排等问题，是理解并发编程中的关键概念。</p>
<p>并发编程的线程之间存在两个问题：</p>
<ul>
<li>线程间如何通信？即：线程之间以何种机制来交换信息</li>
<li>线程间如何同步？即：线程以何种机制来控制不同线程间发生的相对顺序</li>
</ul>
<p>有两种并发模型可以解决这两个问题：</p>
<ul>
<li>消息传递并发模型</li>
<li>共享内存并发模型</li>
</ul>
<p>这两种模型之间的区别如下图所示：</p>
<p><img src="jmm-a610752d-ef73-47f2-b02c-6954eb3d62bf.png"></p>
<p>重要的事情说三遍</p>
<p><strong>Java 使用的是共享内存并发模型！！！！</strong></p>
<p><strong>Java 使用的是共享内存并发模型！！！！</strong></p>
<p><strong>Java 使用的是共享内存并发模型！！！！</strong></p>
<h2 id="1-2-须知：Java共享内存并发模型"><a href="#1-2-须知：Java共享内存并发模型" class="headerlink" title="1.2 须知：Java共享内存并发模型"></a>1.2 须知：Java共享内存并发模型</h2><p>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。典型的共享内存通信方式，就是通过共享对象进行通信。 </p>
<p>例如线程 A 与 线程 B 之间如果要通信的话，那么就必须经历下面两个步骤： 1. 线程 A 把本地内存 A 更新过得共享变量刷新到主内存中去。 2. 线程 B 到主内存中去读取线程 A 之前更新过的共享变量，<strong>也就是说，线程A和线程B之间一定要通过主存。</strong></p>
<p><img src="jmm-f02219aa-e762-4df0-ac08-6f4cceb535c2.jpg" alt="共享内存"></p>
<h2 id="1-3-八股：本地内存和主存有什么区别？"><a href="#1-3-八股：本地内存和主存有什么区别？" class="headerlink" title="1.3 八股：本地内存和主存有什么区别？"></a>1.3 八股：本地内存和主存有什么区别？</h2><p>线程之间的共享变量存在于主存中，每个线程都有一个私有的本地内存，存储了该线程的读、写共享变量的副本。本地内存是 Java 内存模型的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器等（比如cpu的三级缓存）。</p>
<h1 id="二、如何保证内存可见性？"><a href="#二、如何保证内存可见性？" class="headerlink" title="二、如何保证内存可见性？"></a>二、如何保证内存可见性？</h1><p>由于java用的是内存共享并发模型，那么我们就按照这个来说。线程的安全问题包括原子性、可见性、活跃性、有序性，这里就先讨论可见性。</p>
<p>可见性就是指，如果线程A在本地内存中更新了一个变量，那么线程B以及其他线程需要同步修改后的数据。如何同步修改后的数据？此时就是需要JMM，JMM控制主存和本地内存之间的交互，来提供内存可见性保证。</p>
<p>Java 中的 <code>volatile 关键字</code>可以保证多线程操作共享变量的可见性以及禁止指令重排序，<code>synchronized 关键字</code>不仅保证可见性，同时也保证了原子性（互斥性）。</p>
<p>在更底层，JMM 通过内存屏障来实现内存的可见性以及禁止重排序。为了程序员更方便地理解，设计者提出了 happens-before 的概念（下文会细讲），它更加简单易懂，从而避免了程序员为了理解内存可见性而去学习复杂的重排序规则，以及这些规则的具体实现方法。</p>
<h1 id="三、JMM与重排序"><a href="#三、JMM与重排序" class="headerlink" title="三、JMM与重排序"></a>三、JMM与重排序</h1><p>前面提到了，JMM 定义了多线程之间如何互相交互的规则，主要目的是为了解决由于编译器优化、处理器优化和缓存系统等导致的可见性、原子性和有序性。</p>
<p>那我们接下来就来聊聊重排序以及它所带来的顺序问题。</p>
<h3 id="3-1-为什么指令重排可以提高性能？"><a href="#3-1-为什么指令重排可以提高性能？" class="headerlink" title="3.1 为什么指令重排可以提高性能？"></a>3.1 为什么指令重排可以提高性能？</h3><p>大家都知道，计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排。</p>
<p>那可能有小伙伴就要问：<strong>为什么指令重排序可以提高性能？</strong></p>
<p>简单地说，每一个指令都会包含多个步骤，每个步骤可能使用不同的硬件。因此，<strong>流水线技术</strong>产生了，它的原理是指令 1 还没有执行完，就可以开始执行指令 2，而不用等到指令 1 执行结束后再执行指令 2，这样就大大提高了效率。</p>
<p>但是，流水线技术最害怕<strong>中断</strong>，恢复中断的代价是比较大的，所以我们要想尽办法不让流水线中断。指令重排就是减少中断的一种技术。</p>
<p>我们分析一下下面这段代码的执行情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = b + c;</span><br><span class="line">d = e - f ;</span><br></pre></td></tr></table></figure>

<p>先加载 b、c（<strong>注意，有可能先加载 b，也有可能先加载 c</strong>），但是在执行 <code>add(b,c)</code> 的时候，需要等待 b、c 装载结束才能继续执行，也就是需要增加停顿，那么后面的指令（加载 e 和 f）也会有停顿，这就降低了计算机的执行效率。</p>
<p>为了减少停顿，我们可以在加载完 b 和 c 后把 e 和 f 也加载了，然后再去执行 <code>add(b,c)</code>，这样做对程序（串行）是没有影响的，但却减少了停顿。</p>
<p>换句话说，既然 <code>add(b,c)</code> 需要停顿，那还不如去做一些有意义的事情（加载 e 和 f）。</p>
<p>综上所述，<strong>指令重排对于提高 CPU 性能十分必要，但也带来了乱序的问题。</strong></p>
<h3 id="3-2-重排序有哪几种？"><a href="#3-2-重排序有哪几种？" class="headerlink" title="3.2 重排序有哪几种？"></a>3.2 重排序有哪几种？</h3><p>指令重排一般分为以下三种：</p>
<ul>
<li><strong>编译器优化重排</strong>，编译器在<strong>不改变单线程程序语义</strong>的前提下，重新安排语句的执行顺序。</li>
<li><strong>指令并行重排</strong>，现代处理器采用了指令级并行技术来将多条指令重叠执行。如果<strong>不存在数据依赖性</strong>(即后一个执行的语句无需依赖前面执行的语句的结果)，处理器可以改变语句对应的机器指令的执行顺序。</li>
<li><strong>内存系统重排</strong>，由于处理器使用缓存和读写缓存冲区，这使得加载(load)和存储(store)操作看上去可能是在乱序执行，因为三级缓存的存在，导致内存与缓存的数据同步存在时间差。</li>
</ul>
<p><strong>指令重排可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong>。所以在多线程下，指令重排序可能会导致一些问题。</p>
<h1 id="四、happens-before-关系模型"><a href="#四、happens-before-关系模型" class="headerlink" title="四、happens-before 关系模型"></a>四、happens-before 关系模型</h1><h2 id="4-1-八股：什么是happens-before-关系模型？"><a href="#4-1-八股：什么是happens-before-关系模型？" class="headerlink" title="4.1 八股：什么是happens-before 关系模型？"></a>4.1 八股：什么是happens-before 关系模型？</h2><p>happens-before 关系的定义如下：</p>
<ol>
<li><p><strong>如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</strong></p>
</li>
<li><p><strong>两个操作之间存在 happens-before 关系，并不意味着 Java 平台的具体实现必须要按照 happens-before 关系指定的顺序来执行。如果重排序之后的执行结果，与按 happens-before 关系来执行的结果一致，那么 JMM 也允许这样的重排序。</strong></p>
</li>
</ol>
<p>总之，<strong>如果操作 A happens-before 操作 B，那么操作 A 在内存上所做的操作对操作 B 都是可见的，不管它们在不在一个线程。</strong></p>
<h2 id="4-2-了解：happens-before-关系有哪些？"><a href="#4-2-了解：happens-before-关系有哪些？" class="headerlink" title="4.2 了解：happens-before 关系有哪些？"></a>4.2 了解：happens-before 关系有哪些？</h2><p>   在 Java 中，有以下天然的 happens-before 关系：</p>
<ul>
<li>程序顺序规则：一个线程中的每一个操作，happens-before 于该线程中的任意后续操作。</li>
<li>监视器锁规则：对一个锁的解锁，happens-before 于随后对这个锁的加锁。</li>
<li>volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</li>
<li>传递性：如果 A happens-before B，且 B happens-before C，那么 A happens-before C。</li>
<li>start 规则：如果线程 A 执行操作 <code>ThreadB.start()</code>启动线程 B，那么 A 线程的 <code>ThreadB.start()</code>操作 happens-before 于线程 B 中的任意操作。</li>
<li>join 规则：如果线程 A 执行操作 <code>ThreadB.join()</code>并成功返回，那么线程 B 中的任意操作 happens-before 于线程 A 从 <code>ThreadB.join()</code>操作成功返回。</li>
</ul>
<p>   举例：</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// A操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// B操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a + b;<span class="comment">// C 操作</span></span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure>

<p>   根据以上介绍的 happens-before 规则，假如只有一个线程，那么不难得出：</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>&gt; A happens-before B</span><br><span class="line"><span class="number">2</span>&gt; B happens-before C</span><br><span class="line"><span class="number">3</span>&gt; A happens-before C</span><br></pre></td></tr></table></figure>

<p>   注意，真正在执行指令的时候，其实 JVM 有可能对操作 A &amp; B 进行重排序，因为无论先执行 A 还是 B，他们都对对方是可见的，并且不影响执行结果。</p>
<p>   如果这里发生了重排序，这在视觉上违背了 happens-before 原则，但是 JMM 是允许这样的重排序的。</p>
<p>   所以，我们只关心 happens-before 规则，不用关心 JVM 到底是怎样执行的。只要确定操作 A happens-before 操作 B 就行了。</p>
<p>   重排序有两类，JMM 对这两类重排序有不同的策略：</p>
<ul>
<li>会改变程序执行结果的重排序，比如 A -&gt; C，JMM 要求编译器和处理器都禁止这种重排序。</li>
<li>不会改变程序执行结果的重排序，比如 A -&gt; B，JMM 对编译器和处理器不做要求，允许这种重排序。</li>
</ul>
<h1 id="五、volatile关键字"><a href="#五、volatile关键字" class="headerlink" title="五、volatile关键字"></a>五、volatile关键字</h1><h2 id="5-1-八股：volatile关键字的作用"><a href="#5-1-八股：volatile关键字的作用" class="headerlink" title="5.1 八股：volatile关键字的作用"></a>5.1 八股：volatile关键字的作用</h2><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义： </p>
<ol>
<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。 </li>
<li>禁止进行指令重排序。 </li>
<li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。 </li>
<li>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</li>
<li>volatile仅能实现变量的修改可见性，并不能保证原子性；synchronized则可以保证变量的修改 可见性和原子性。</li>
<li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。 </li>
<li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</li>
</ol>
<h2 id="5-2-八股：volatile禁止指令重排序（volatile和-happens-before）"><a href="#5-2-八股：volatile禁止指令重排序（volatile和-happens-before）" class="headerlink" title="5.2 八股：volatile禁止指令重排序（volatile和 happens-before）"></a>5.2 八股：volatile禁止指令重排序（volatile和 happens-before）</h2><p>在讲 JMM的时候，我们提到了指令重排，相信大家都还有印象，我们来回顾一下重排序需要遵守的规则：</p>
<ul>
<li>重排序不会对存在数据依赖关系的操作进行重排序。比如：<code>a=1;b=a;</code> 这个指令序列，因为第二个操作依赖于第一个操作，所以在编译时和处理器运行时这两个操作不会被重排序。</li>
<li>重排序是为了优化性能，但是不管怎么重排序，单线程下程序的执行结果不能被改变。比如：<code>a=1;b=2;c=a+b</code> 这三个操作，第一步 (a&#x3D;1) 和第二步 (b&#x3D;2) 由于不存在数据依赖关系，所以可能会发生重排序，但是 c&#x3D;a+b 这个操作是不会被重排序的，因为需要保证最终的结果一定是 c&#x3D;a+b&#x3D;3。</li>
</ul>
<p>使用 volatile 关键字修饰共享变量可以禁止这种重排序。怎么做到的呢？</p>
<p>当我们使用 volatile 关键字来修饰一个变量时，Java 内存模型会插入内存屏障（一个处理器指令，可以对 CPU 或编译器重排序做出约束）来确保以下两点：</p>
<ul>
<li>写屏障（Write Barrier）：当一个 volatile 变量被写入时，写屏障确保在该屏障之前的所有变量的写入操作都提交到主内存。</li>
<li>读屏障（Read Barrier）：当读取一个 volatile 变量时，读屏障确保在该屏障之后的所有读操作都从主内存中读取。</li>
</ul>
<p>换句话说：</p>
<ul>
<li>当程序执行到 volatile 变量的读操作或者写操作时，在其前面操作的更改肯定已经全部进行，且结果对后面的操作可见；在其后面的操作肯定还没有进行；</li>
<li>在进行指令优化时，不能将 volatile 变量的语句放在其后面执行，也不能把 volatile 变量后面的语句放到其前面执行。</li>
</ul>
<h2 id="5-3-volatile不保证原子性"><a href="#5-3-volatile不保证原子性" class="headerlink" title="5.3 volatile不保证原子性"></a>5.3 volatile不保证原子性</h2><p>比如i++操作：</p>
<p>在Java（以及许多其他编程语言中），i++ 是一个后缀递增操作符，它对变量 i 执行一个复合操作，该操作可以分解为以下三个步骤（尽管在实际执行时这些步骤可能会被优化或合并，但从概念上讲）： </p>
<ol>
<li>读取（Load）：首先，从内存中读取变量 i 的当前值。这个值被加载到CPU的寄存器中，供后续操作使用。 </li>
<li>修改（Increment）：然后，将寄存器中的值增加1。这个步骤是在CPU内部完成的，不涉及内存的读写操作（除了可能涉及的缓存一致性协议）。 </li>
<li>写回（Store）：最后，将修改后的值写回到内存中变量 i 的位置。这一步确保了内存中 i 的值被更新为新的值。</li>
</ol>
<p> 需要注意的是，在多线程环境中，这三个步骤可能会被其他线程的类似操作打断，导致数据不一致的问题。特别是，如果两个线程几乎同时执行对同一个变量的 i++ 操作，它们可能会： 第一个线程读取了 i 的原始值（比如10）。 第二个线程也读取了 i 的相同原始值（因为第一个线程还没有写回新值）。 第一个线程增加1并将结果（11）写回内存。 第二个线程也增加1（基于它读取的旧值10），并将结果（也是11）写回内存，覆盖了第一个线程的结果。 </p>
<p>这就是为什么在多线程环境中，即使使用了 volatile 关键字来确保变量的可见性，i++ 这样的复合操作也仍然需要额外的同步机制来确保原子性。volatile 保证了每次读取 i 时都会从主内存中获取最新值，但它并不保证 i++ 操作的原子性。</p>
<p><strong>解决方式：</strong>使用<code>synchronized关键字（重入锁）</code>或者<code>lock接口的实现类ReentrantLock（重入锁）</code>进行加锁，总所周知学线程编程的时候都会学习的两个锁，可以保证原子性</p>
<h1 id="六、synchronized关键字"><a href="#六、synchronized关键字" class="headerlink" title="六、synchronized关键字"></a>六、synchronized关键字</h1><p>由于我写累了就不写基本用法了，就是修饰静态代码块，同步方法（实例方法），静态方法（类方法）三种用途，不懂的可以自己去查资料</p>
<p>重点放在关键字保证的线程安全上，<strong>synchronized关键字是允许指令重排的，也就是说，满足了 happens-before模型的结果一致原则的指令重排。</strong></p>
<p>另外，<strong>synchronized属于重入锁，这部分放到多线程和锁的内容去介绍。</strong></p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程：（三）多线程锁、JUC锁的实现</title>
    <url>/2024/08/05/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E4%B8%89%E3%80%81%E9%94%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大部分内容由网上搜索，有直接复制粘贴的内容，本篇博客整理我查找的内容，且加入我个人的理解和个人需要了解的知识进行搜索得到的内容，有错误请在评论区留言</p>
<h1 id="一、首先介绍一下锁"><a href="#一、首先介绍一下锁" class="headerlink" title="一、首先介绍一下锁"></a>一、首先介绍一下锁</h1><p>操作系统层面的锁： 操作系统通过锁机制来管理进程（或线程）对共享资源的访问，以防止数据竞争和保证数据一致性。 常见的操作系统锁包括互斥锁（Mutex）、读写锁（Read-Write Lock）、自旋锁（Spinlock）等，它们用于控制对临界区（Critical Section）的访问。 </p>
<blockquote>
<p>这里介绍一下“临界区”的概念。所谓“临界区”，指的是某一块代码区域，它同一时刻只能由一个线程执行。</p>
</blockquote>
<p>Java多线程的锁： Java中的锁是Java编程语言中用于实现多线程同步和互斥的机制。 Java提供了多种类型的锁，如synchronized关键字、ReentrantLock类、ReadWriteLock等，用于控制多线程对共享资源的并发访问。</p>
<p>首先需要明确的一点是：<strong>Java 多线程的锁都是基于对象的</strong>，Java 中的每一个对象都可以作为一个锁。在<a href="https://rengoku.top/2024/08/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9AJMM/">上一节</a>最后一点讲synchronized的时候有提到，synchronized可以修饰静态方法和实例方法，<strong>synchronized在这里其实就是加上了一个类锁。</strong></p>
<p>Class 对象是一种特殊的 Java 对象，代表了程序中的类和接口。Java 中的每个类型（包括类、接口、数组以及基础类型）在 JVM 中都有一个唯一的 Class 对象与之对应。这个 Class 对象被创建的时机是在 JVM 加载类时，由 JVM 自动完成。</p>
<p>Class 对象中包含了与类相关的很多信息，如类的名称、类的父类、类实现的接口、类的构造方法、类的方法、类的字段等等。这些信息通常被称为元数据（metadata）。</p>
<p>可以通过 Class 对象来获取类的元数据，甚至动态地创建类的实例、调用类的方法、访问类的字段等。这就是Java 的反射（Reflection）机制</p>
<p>所以我们常说的类锁，其实就是 Class 对象的锁。</p>
<p><strong>多线程锁的类型</strong></p>
<p>Java中常用的多线程锁类型有以下几种:</p>
<ol>
<li>synchronized关键字</li>
<li>ReentrantLock类</li>
<li>ReadWriteLock接口</li>
<li>StampedLock类</li>
<li>Atomic类</li>
</ol>
<p>这几个我会在第三大节里面介绍，首先先看基本锁的类型</p>
<h1 id="二、锁的分类"><a href="#二、锁的分类" class="headerlink" title="二、锁的分类"></a>二、锁的分类</h1><p>直接上一个图</p>
<img src="other-bukfsdjavassmtjstd-b2ded433-defd-4535-b767-fd2e5be0b5b9.png" style="zoom: 150%;">

<h1 id="1、乐观锁-VS-悲观锁"><a href="#1、乐观锁-VS-悲观锁" class="headerlink" title="1、乐观锁 VS 悲观锁"></a>1、乐观锁 VS 悲观锁</h1><h3 id="八股：乐观锁-VS-悲观锁"><a href="#八股：乐观锁-VS-悲观锁" class="headerlink" title="八股：乐观锁 VS 悲观锁"></a>八股：乐观锁 VS 悲观锁</h3><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。</p>
<p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。<strong>Java 中，synchronized 关键字 是最典型的悲观锁。</strong></p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会加锁，只是在更新数据的时候会去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>
<p>乐观锁在 Java 中是通过无锁编程来实现的，最常采用的是<strong>CAS 算法</strong>，<strong>Java 原子类</strong>的递增操作就通过 CAS 自旋实现的。</p>
<p><img src="other-bukfsdjavassmtjstd-840de182-83e2-4639-868a-bd5cc984575f.png"></p>
<p>根据上面的概念描述我们可以发现：</p>
<ul>
<li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li>
<li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li>
</ul>
<h3 id="乐观锁的例子"><a href="#乐观锁的例子" class="headerlink" title="乐观锁的例子"></a>乐观锁的例子</h3><p>线程1将金额为100的数据修改为90，此时业务不提交，此时线程2将90修改为80，但是线程1业务报错需要回滚，此时线程1将金额恢复为100。</p>
<p>我们可以这样设计乐观锁的实现：</p>
<ol>
<li><strong>定义乐观锁字段</strong>：在数据库中，给涉及到并发修改的数据表添加一个版本号（version）字段。每次读取数据时，同时读取这个版本号。</li>
<li><strong>读取数据时获取版本号</strong>：线程1和线程2在读取金额时，同时读取到当前金额（例如初始是100）和版本号（假设为1）。</li>
<li><strong>更新数据时检查版本号</strong>：<ul>
<li>线程1将金额从100修改为90，同时提交版本号从1更新为2。但在实际提交到数据库之前，线程1的业务逻辑发生错误，需要回滚。</li>
<li>在线程1回滚的过程中，它会恢复金额到100，并且假设这个版本号不变（因为实际操作中版本号应该在每次修改时递增，但在这里为了简化，我们假设线程1由于错误并未成功递增版本号）。</li>
<li>线程2接着将金额从90（或线程1回滚后的100，具体取决于线程1的操作在数据库中的实际体现）修改为80，同时它会将版本号从1更新为2（假设线程1的更新并未成功改变版本号）。</li>
</ul>
</li>
<li><strong>乐观锁的实现</strong>：<ul>
<li>当线程1尝试回滚并将金额从90恢复为100并尝试将版本号设置回1时，乐观锁会介入。因为此时数据库中的版本号已经是2了，线程1的更新会因为版本号不匹配而失败。这样，线程1就无法覆盖线程2的更新。</li>
<li>正确的做法应该是线程1检测到版本号不匹配后，可以选择重新读取最新数据并决定是否继续执行操作，或者记录一个错误日志等。</li>
</ul>
</li>
<li><strong>解决策略</strong>：<ul>
<li>如果线程1的操作需要严格基于修改前的数据，那么它应该重新读取最新的数据（此时金额为80，版本号为2），并决定是否继续或重试。</li>
<li>在某些情况下，也可以让线程1在版本号不匹配时简单地放弃修改，记录一个错误或异常，然后退出。</li>
</ul>
</li>
</ol>
<h3 id="八股：CAS算法"><a href="#八股：CAS算法" class="headerlink" title="八股：CAS算法"></a>八股：CAS算法</h3><p>在2.1中提到，<strong>乐观锁采用的是无锁编程，底层有采用CAS算法，</strong>那么什么是CAS算法？</p>
<p>CAS（Compare-and-Swap）是一种乐观锁的实现方式，全称为“比较并交换”，是一种无锁的原子操作。</p>
<p>在并发编程中，我们都知道<code>i++</code>操作是非线程安全的，这是因为 <code>i++</code>操作不是原子操作，这个在volatile关键字里讲过，可以去翻一下</p>
<p>在 CAS 中，有这样三个值：</p>
<ul>
<li>V：要更新的变量(var)</li>
<li>E：预期值(expected)</li>
<li>N：新值(new)</li>
</ul>
<p>比较并交换的过程如下：</p>
<p>判断 V 是否等于 E，如果等于，将 V 的值设置为 N；如果不等，说明已经有其它线程更新了 V，于是当前线程放弃更新，什么都不做。</p>
<p>这里的<strong>预期值 E 本质上指的是“旧值”</strong>。</p>
<p>我们以一个简单的例子来解释这个过程：</p>
<ol>
<li>如果有一个多个线程共享的变量<code>i</code>原本等于 5，我现在在线程 A 中，想把它设置为新的值 6;</li>
<li>我们使用 CAS 来做这个事情；</li>
<li>首先我们用 i 去与 5 对比，发现它等于 5，说明没有被其它线程改过，那我就把它设置为新的值 6，此次 CAS 成功，<code>i</code>的值被设置成了 6；</li>
<li>如果不等于 5，说明<code>i</code>被其它线程改过了（比如现在<code>i</code>的值为 2），那么我就什么也不做，此次 CAS 失败，<code>i</code>的值仍然为 2。</li>
</ol>
<p>在这个例子中，<code>i</code>就是 V，5 就是 E，6 就是 N。</p>
<p>那有没有可能我在判断了<code>i</code>为 5 之后，正准备更新它的新值的时候，被其它线程更改了<code>i</code>的值呢？</p>
<p>不会的。因为 CAS 是一种原子操作，它是一种系统原语，是一条 CPU 的原子指令，从 CPU 层面已经保证它的原子性。</p>
<p><strong>当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。</strong></p>
<h3 id="了解：CAS算法如何实现原子操作？"><a href="#了解：CAS算法如何实现原子操作？" class="headerlink" title="了解：CAS算法如何实现原子操作？"></a>了解：CAS算法如何实现原子操作？</h3><h4 id="（1）实现原理"><a href="#（1）实现原理" class="headerlink" title="（1）实现原理"></a>（1）实现原理</h4><p>java底层实现CAS操作是使用native关键字调用c++的接口</p>
<p>在 Java 中，有一个<code>Unsafe</code>类（下文介绍什么是unsafe类），它在<code>sun.misc</code>包中。它里面都是一些<code>native</code>方法（下文也会介绍什么是native方法），其中就有几个是关于 CAS 的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object o, <span class="type">long</span> offset,Object expected, Object x)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object o, <span class="type">long</span> offset,<span class="type">int</span> expected,<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">compareAndSwapLong</span><span class="params">(Object o, <span class="type">long</span> offset,<span class="type">long</span> expected,<span class="type">long</span> x)</span>;</span><br></pre></td></tr></table></figure>

<p>Unsafe 对 CAS 的实现是通过 C++ 实现的，它的具体实现和操作系统、CPU 都有关系。</p>
<blockquote>
<p>Unsafe 是 Java 中一个非常特殊的类，它为 Java 提供了一种底层、”不安全”的机制来直接访问和操作内存、线程和对象。正如其名字所暗示的，Unsafe 提供了许多不安全的操作，因此它的使用应该非常小心，并限于那些确实需要使用这些底层操作的场景。我们在这里涉及到这个类基本上是需要native方法。</p>
</blockquote>
<blockquote>
<p><code>native</code>方法，简单的说就是由 Java 调用非 Java 代码的接口，被调用的方法是由非 Java 语言实现的，例如它可以由 C 或 C++语言来实现，并编译成 DLL，然后直接供 Java 进行调用。<code>native</code>方法是通过 JNI（<code>Java Native Interface</code>）实现调用的，从 Java 1.1 开始 JNI 标准就是 Java 平台的一部分，它允许 Java 代码和其他语言的代码进行交互。</p>
</blockquote>
<h4 id="（2）实现原子操作"><a href="#（2）实现原子操作" class="headerlink" title="（2）实现原子操作"></a>（2）实现原子操作</h4><p>JDK 提供了一些用于原子操作的类，在<code>java.util.concurrent.atomic</code>包下面。在 JDK 8 中，有以下这些类：</p>
<p>这里就做部分了解，需要深入了解可自行搜相关内容</p>
<p><img src="cas-20230731195315.png"></p>
<h3 id="八股：CAS-的三大问题"><a href="#八股：CAS-的三大问题" class="headerlink" title="八股：CAS 的三大问题"></a>八股：CAS 的三大问题</h3><p>尽管 CAS 提供了一种有效的同步手段，但也存在一些问题，主要有以下三个：ABA 问题、长时间自旋、多个共享变量的原子操作。</p>
<h4 id="（1）ABA-问题"><a href="#（1）ABA-问题" class="headerlink" title="（1）ABA 问题"></a>（1）ABA 问题</h4><p>所谓的 ABA 问题，就是一个值原来是 A，变成了 B，又变回了 A。<strong>而当前线程在CAS操作中错误地认为该变量没有被其他线程修改过，从而可能导致数据不一致或错误。</strong>这个时候使用 CAS 是检查不出变化的，但实际上却被更新了两次。</p>
<p>ABA 问题的解决思路是在变量前面追加上<strong>版本号或者时间戳</strong>。从 JDK 1.5 开始，JDK 的 atomic 包里提供了一个类<code>AtomicStampedReference</code>类来解决 ABA 问题。</p>
<p>这个类的<code>compareAndSet</code>方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果二者都相等，才使用 CAS 设置为新的值和标志。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(V   expectedReference,</span></span><br><span class="line"><span class="params">                              V   newReference,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> expectedStamp,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> newStamp)</span> &#123;</span><br><span class="line">    Pair&lt;V&gt; current = pair;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        expectedReference == current.reference &amp;&amp;</span><br><span class="line">        expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">        ((newReference == current.reference &amp;&amp;</span><br><span class="line">          newStamp == current.stamp) ||</span><br><span class="line">          casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先来看参数：</p>
<ul>
<li>expectedReference：预期引用，也就是你认为原本应该在那个位置的引用。</li>
<li>newReference：新引用，如果预期引用正确，将被设置到该位置的新引用。</li>
<li>expectedStamp：预期标记，这是你认为原本应该在那个位置的标记。</li>
<li>newStamp：新标记，如果预期标记正确，将被设置到该位置的新标记。</li>
</ul>
<p>执行流程：</p>
<p>①、<code>Pair&lt;V&gt; current = pair;</code> 这行代码获取当前的 pair 对象，其中包含了引用和标记。</p>
<p>②、接下来的 return 语句做了几个检查：</p>
<ul>
<li><code>expectedReference == current.reference &amp;&amp; expectedStamp == current.stamp</code>：首先检查当前的引用和标记是否和预期的引用和标记相同。如果二者中有任何一个不同，这个方法就会返回 false。</li>
<li>如果上述检查通过，也就是说当前的引用和标记与预期的相同，那么接下来就会检查新的引用和标记是否也与当前的相同。如果相同，那么实际上没有必要做任何改变，这个方法就会返回 true。</li>
<li>如果新的引用或者标记与当前的不同，那么就会调用 casPair 方法来尝试更新 pair 对象。casPair 方法会尝试用 newReference 和 newStamp 创建的新的 Pair 对象替换当前的 pair 对象。如果替换成功，casPair 方法会返回 true；如果替换失败（也就是说在尝试替换的过程中，pair 对象已经被其他线程改变了），casPair 方法会返回 false。</li>
</ul>
<h4 id="（2）长时间自旋"><a href="#（2）长时间自旋" class="headerlink" title="（2）长时间自旋"></a>（2）长时间自旋</h4><p>CAS 多与自旋结合。如果自旋 CAS 长时间不成功，会占用大量的 CPU 资源（存在一直自旋到最大次数后停止的情况，但是占用很多cpu资源）。</p>
<p>解决思路是让 JVM 支持处理器提供的<strong>pause 指令</strong>（还有其他的，可以再去搜一些内容）。</p>
<p>pause 指令能让自旋失败时 cpu 睡眠一小段时间再继续自旋，从而使得读操作的频率降低很多，为解决内存顺序冲突而导致的 CPU 流水线重排的代价也会小很多。</p>
<h4 id="（3）多个共享变量的原子操作"><a href="#（3）多个共享变量的原子操作" class="headerlink" title="（3）多个共享变量的原子操作"></a>（3）多个共享变量的原子操作</h4><p>当对一个共享变量执行操作时，CAS 能够保证该变量的原子性。但是对于多个共享变量，CAS 就无法保证操作的原子性，这时通常有两种做法：</p>
<ol>
<li>使用<code>AtomicReference</code>类保证对象之间的原子性，把多个变量放到一个对象里面进行 CAS 操作；</li>
<li>使用锁。锁内的临界区代码可以保证只有当前线程能操作。</li>
</ol>
<h2 id="2、自旋锁-VS-自适应自旋锁"><a href="#2、自旋锁-VS-自适应自旋锁" class="headerlink" title="2、自旋锁 VS 自适应自旋锁"></a>2、自旋锁 VS 自适应自旋锁</h2><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>先了解一下临界资源：</p>
<p><strong>临界资源指的是多个进程&#x2F;线程共同访问的某类资源，如打印机、数据表格或变量等。由于这些资源同时只能被一个进程&#x2F;线程安全地使用，因此在并发编程中需要对它们的访问进行控制，以避免数据不一致或竞态条件的发生。</strong></p>
<p>突发提问，临界区是什么？不记得了看第一节介绍锁的地方吧</p>
<p><strong>自旋锁（Spinlock）</strong>是一种对<strong>临界资源</strong>进行互斥访问的手段，自旋锁的定义和工作原理如下：</p>
<p><strong>定义：</strong></p>
<p>自旋锁是一种锁机制，当一个线程尝试去获取某一把锁的时候，如果这个锁已经被另外一个线程占有了，那么此线程就无法获取这把锁，该线程会等待，间隔一段时间后再次尝试获取。这种采用循环加锁，等待锁释放的机制就称为自旋锁。</p>
<p><strong>工作原理：</strong></p>
<ul>
<li><strong>等待与重试</strong>：当线程发现锁被占用时，不是进入睡眠或阻塞状态，而是采用忙等待（busy waiting）的方式，即不断循环检查锁的状态，直到锁被释放。</li>
<li><strong>原子操作</strong>：在自旋锁的实现中，对锁状态的检查和修改必须是原子操作，以避免竞态条件。</li>
</ul>
<p><strong>自旋锁通过等待和不断重试的操作，避免了线程的cpu来回切换，减少开销。</strong>仔细一想，如果锁里面的代码一下子就执行完成，甚至比切换线程，切换CPU的状态还要快，不使用自旋锁是不是有点得不偿失了呢？</p>
<p><img src="other-bukfsdjavassmtjstd-be0964a8-856a-45c9-ab75-ce9505c2e237.png"></p>
<p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是 10 次，可以使用<code>-XX:PreBlockSpin</code> 来更改）没有成功获得锁，就应当挂起线程。</p>
<p><strong>自旋锁的实现原理同样也是 CAS</strong>，AtomicInteger 中调用 unsafe 进行自增操作的源码中的 do-while 循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p>
<p><img src="other-bukfsdjavassmtjstd-0756521c-becf-4657-ab42-1973d74e9c73.png"></p>
<h4 id="自适应自旋锁"><a href="#自适应自旋锁" class="headerlink" title="自适应自旋锁"></a>自适应自旋锁</h4><p><strong>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。</strong>如果在同一个锁对象上，自旋刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功的，进而它将允许自旋等待更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>
<h2 id="3、无锁、偏向锁、轻量级锁、重量级锁"><a href="#3、无锁、偏向锁、轻量级锁、重量级锁" class="headerlink" title="3、无锁、偏向锁、轻量级锁、重量级锁"></a>3、无锁、偏向锁、轻量级锁、重量级锁</h2><p>这四种锁是专门针对 synchronized 的，我们在第三大节：JUC包下的锁中去介绍。</p>
<h2 id="4、可重入锁-VS-不可重入锁"><a href="#4、可重入锁-VS-不可重入锁" class="headerlink" title="4、可重入锁 VS 不可重入锁"></a>4、可重入锁 VS 不可重入锁</h2><p>可重入锁又名递归锁，是指同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提：锁的是同一个对象或者 class），不会因为之前已经获取过还没释放而阻塞。Java 中<code>ReentrantLock</code>和<code>synchronized</code>都是可重入锁，可重入锁的一个优点就是可以一定程度避免死锁。</p>
<p><strong>为什么可重入锁就可以在嵌套调用时自动获得锁呢？</strong></p>
<h3 id="（1）实现机制"><a href="#（1）实现机制" class="headerlink" title="（1）实现机制"></a>（1）实现机制</h3><p>可重入锁的实现通常依赖于以下几个关键点：</p>
<ol>
<li>锁计数器（Lock Counter）<ul>
<li>每个锁对象都维护一个计数器，用于记录该锁被当前线程持有的次数。</li>
<li>当线程首次获取锁时，计数器被初始化为1。</li>
<li>如果线程在持有锁的情况下再次尝试获取同一个锁，计数器将递增。</li>
</ul>
</li>
<li>锁的持有者（Lock Owner）<ul>
<li>锁对象还记录着当前持有该锁的线程。</li>
<li>只有锁的当前持有者线程才能增加锁的计数器（即重复获取锁）。</li>
</ul>
</li>
<li>锁释放（Lock Release）<ul>
<li>当线程退出被锁保护的代码区域时，它会释放锁。</li>
<li>释放锁时，锁的计数器会递减。</li>
<li>如果计数器减至0，则表示当前线程已经完全释放了锁，其他线程可以尝试获取该锁。</li>
</ul>
</li>
</ol>
<h3 id="（2）嵌套调用的自动加锁"><a href="#（2）嵌套调用的自动加锁" class="headerlink" title="（2）嵌套调用的自动加锁"></a>（2）嵌套调用的自动加锁</h3><p>之前我们说过 ReentrantLock 和 synchronized 都是重入锁，那么我们通过重入锁 ReentrantLock 以及非可重入锁 NonReentrantLock 的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p>
<p>首先<code>ReentrantLock</code>和<code> NonReentrantLock</code> 都继承了父类<code>AQS</code>（第三大节），其父类 AQS 中维护了一个同步状态 status 来计数重入次数，status 初始值为 0。</p>
<p>当线程在持有可重入锁的情况下进入嵌套调用（即一个被锁保护的方法或代码块内部调用了另一个被相同锁保护的方法或代码块）时，由于当前线程已经是锁的持有者，因此它可以自动增加锁的计数器，而无需等待锁的释放。这样，线程就可以无缝地进入内层被锁保护的区域，而不会导致死锁或阻塞。</p>
<p>非可重入锁则是在确定当前线程是持有锁的线程之后，直接将 status 置为 0，将锁释放。</p>
<p><img src="other-bukfsdjavassmtjstd-d6e12a34-c889-45e1-83bf-a4d7e36eedde.png"></p>
<h2 id="5、公平锁和非公平锁"><a href="#5、公平锁和非公平锁" class="headerlink" title="5、公平锁和非公平锁"></a>5、公平锁和非公平锁</h2><p>这里的“公平”，其实通俗意义来说就是“先来先服务”，也就是 FIFO。如果对一个锁来说，先对锁获取请求的线程一定会先被满足，后对锁获取请求的线程后被满足，那这个锁就是公平的，即<strong>当一个线程释放锁后，等待时间最长的线程会获得锁的访问权</strong>。反之，那就是不公平的。</p>
<p>一般情况下，<strong>非公平锁能提升一定的效率。但是非公平锁可能会发生线程饥饿（有一些线程长时间得不到锁）的情况</strong>。所以要根据实际的需求来选择非公平锁和公平锁。</p>
<p><code>ReentrantLock</code> 支持非公平锁和公平锁两种，而 <code>synchronized</code> 只支持非公平锁。</p>
<p>在 Java 中，<code>ReentrantLock</code>类可以作为公平锁或非公平锁来使用，通过构造函数的参数来指定。默认情况下，<code>ReentrantLock</code>是非公平锁。如果需要创建公平锁，可以在创建<code>ReentrantLock</code>实例时，将构造函数的<code>fair</code>参数设置为<code>true</code>。</p>
<h2 id="6、读写锁和排它锁"><a href="#6、读写锁和排它锁" class="headerlink" title="6、读写锁和排它锁"></a>6、读写锁和排它锁</h2><p> <code>synchronized</code>和<code>ReentrantLock</code>，其实都是“排它锁”。也就是说，这些锁在同一时刻只允许一个线程进行访问。</p>
<p>而读写锁可以在同一时刻允许多个读线程访问。Java 提供了 <code>ReentrantReadWriteLock</code>类作为读写锁的默认实现，内部维护了两个锁：一个读锁，一个写锁。通过分离读锁和写锁，使得在“读多写少”的环境下，大大地提高了性能。</p>
<h3 id="（1）介绍一下ReentrantReadWriteLock："><a href="#（1）介绍一下ReentrantReadWriteLock：" class="headerlink" title="（1）介绍一下ReentrantReadWriteLock："></a>（1）介绍一下ReentrantReadWriteLock：</h3><p><strong>ReentrantReadWriteLock</strong>：是Java中的一个读写锁实现，它允许多个线程同时读取共享资源（读读可以并发），但在写入时只允许一个线程独占（读写、写读、写写互斥）。这个锁支持重入，即同一个线程可以多次获取相同类型的锁。它提高了读操作的并发性，同时保证了写操作的独占性。</p>
<p><code>ReentrantReadWriteLock</code>和<code>ReentrantLock</code>之间并没有继承关系。它们各自独立实现，服务于不同的锁需求。<code>ReentrantReadWriteLock</code>实现了<code>ReadWriteLock</code>接口。这个接口提供了两个锁对象：读锁（ReadLock）和写锁（WriteLock），分别通过<code>readLock()</code>和<code>writeLock()</code>方法获取。</p>
<p>同理，<code>ReadWriteLock</code>接口和<code>Lock</code>接口也不是继承关系，<strong>都是JUC包下独立的接口。</strong></p>
<h3 id="（2）回归正题："><a href="#（2）回归正题：" class="headerlink" title="（2）回归正题："></a><strong>（2）回归正题：</strong></h3><p><strong>排它锁也叫独享锁</strong>，如果线程 T 对数据 A 加上排它锁后，则其他线程不能再对 A 加任何类型的锁。获得排它锁的线程既能读数据又能修改数据。</p>
<p>与之对应的，就是共享锁，指该锁可被多个线程所持有。如果线程 T 对数据 A 加上共享锁后，则其他线程只能对 A 再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p>
<p>独享锁与共享锁也是通过<code>AQS</code>（第三大节介绍）来实现的，通过实现不同的方法，来实现独享或者共享。</p>
<p>下图为 <code>ReentrantReadWriteLock</code> 的部分源码：</p>
<p><img src="other-bukfsdjavassmtjstd-baa93e76-ac90-4955-8955-50dabc6efbdd.png"></p>
<p>我们看到ReentrantReadWriteLock有两把锁：ReadLock 和 WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现 ReadLock 和 WriteLock 是靠内部类 Sync 实现的锁。Sync 是 AQS（第三大节介绍） 的一个子类。</p>
<p>在 ReentrantReadWriteLock 里面，读锁和写锁的锁主体都是 Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以 ReentrantReadWriteLock 的并发性相比一般的互斥锁有了很大提升。</p>
<p><strong>那读锁和写锁的具体加锁方式有什么区别呢？</strong></p>
<p>AQS中的存储status字段，该字段用来描述有多少线程持有锁。</p>
<p>在独享锁中，这个值通常是 0 或者 1（如果是重入锁的话 state 值就是重入的次数），在共享锁中 state 就是持有锁的数量。但是ReentrantReadWriteLock 中有读、写两把锁，所以需要在一个整型变量 state 上分别描述读锁和写锁的数量（或者也可以叫状态）。</p>
<p>关于深入去探究status字段的切割等底层原理就不写了，可以自行参考，我相信你准备面试也看不完这个</p>
<h1 id="三、JUC包下的锁"><a href="#三、JUC包下的锁" class="headerlink" title="三、JUC包下的锁"></a>三、JUC包下的锁</h1><h2 id="1、抽象类AQS-AQLS-AOS"><a href="#1、抽象类AQS-AQLS-AOS" class="headerlink" title="1、抽象类AQS&#x2F;AQLS&#x2F;AOS"></a>1、抽象类AQS&#x2F;AQLS&#x2F;AOS</h2><h3 id="什么是AQS？"><a href="#什么是AQS？" class="headerlink" title="什么是AQS？"></a>什么是AQS？</h3><p>重要的事情说三遍</p>
<p><strong>AQS的全称为（AbstractQueuedSynchronizer）抽象的队列式的同步器</strong>，是并发编程中实现同步器的一个框架，用来存储<strong>同步状态（State）和线程队列（CLH队列的变体）</strong>。</p>
<p><strong>AQS的全称为（AbstractQueuedSynchronizer）抽象的队列式的同步器</strong>，是并发编程中实现同步器的一个框架，用来存储<strong>同步状态（State）和线程队列（CLH队列的变体）</strong>。</p>
<p><strong>AQS的全称为（AbstractQueuedSynchronizer）抽象的队列式的同步器</strong>，是并发编程中实现同步器的一个框架，用来存储<strong>同步状态（State）和线程队列（CLH队列的变体）</strong>。</p>
<p>我们需要特别记住<strong>同步状态（State）和线程队列（CLH队列的变体）。</strong></p>
<p>字面意思理解：</p>
<ol>
<li><p>是一个抽象类，也就是它定义了一些基础功能，会有很多子类去扩展他的功能。</p>
</li>
<li><p>是一个队列式的，也就是会用来协调多个线程的。</p>
</li>
<li><p>是一个同步器，那么是用来给多个线程同步某个数据或者某个状态的。</p>
</li>
</ol>
<p>AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构造出应用广泛的同步器，比如 <strong>ReentrantLock、ReentrantReadWriteLock</strong>等等，都是基于 AQS 的。</p>
<p>AQS 里面的“资源”是用一个<code>int</code>类型的数据来表示的，有时候业务需求的资源数超出了<code>int</code>的范围，所以在 JDK 1.6 中，多了一个<strong>AQLS</strong>（AbstractQueuedLongSynchronizer）。它的代码跟 AQS 几乎一样，只是把资源的类型变成了<code>long</code>类型。AQS 和 AQLS 都继承了一个类叫<strong>AOS</strong>（AbstractOwnableSynchronizer）。这个类也是在 JDK 1.6 中出现的。</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构有两个，同步状态status和节点node</p>
<h4 id="同步状态status"><a href="#同步状态status" class="headerlink" title="同步状态status"></a>同步状态status</h4><p>AQS 内部使用了一个volatile的变量 state 来作为资源的标识。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The synchronization state.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br></pre></td></tr></table></figure>

<p>同时定义了几个获取和改变 state 的 protected 方法，子类可以覆盖这些方法来实现自己的逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getState()</span><br><span class="line">setState()</span><br><span class="line">compareAndSetState()</span><br></pre></td></tr></table></figure>

<p>这三种操作均是原子操作，其中 compareAndSetState 的实现依赖于 Unsafe类 的 <code>compareAndSwapInt()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步状态值</span></span><br><span class="line"><span class="comment"> * 使用volatile修饰，保证多线程修改的可见性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取同步状态值</span></span><br><span class="line"><span class="comment"> * 使用final修饰，子类不能覆盖，只能调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改同步状态值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> newState)</span> &#123;</span><br><span class="line">    state = newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CAS修改state值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetState</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, stateOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h4><p>AQS 内部使用了一个先进先出（FIFO）的双端队列，并使用了两个引用 head 和 tail 用于标识队列的头部和尾部。</p>
<p>但它并不直接储存线程，而是储存拥有线程的 Node 节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">/**共享模式*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">SHARED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    <span class="comment">/**独占模式*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">EXCLUSIVE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**标记线程由于中断或超时，需要被取消，即踢出队列*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CANCELLED</span> <span class="operator">=</span>  <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**线程需要被唤醒*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIGNAL</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**线程正在等待一个条件*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONDITION</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**传播 当前节点执行释放release操作后，需要通知到其他线程*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PROPAGATE</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// waitStatus只取上面CANCELLED、SIGNAL、CONDITION、PROPAGATE四种取值之一</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示前驱节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示后继节点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队列元素需要关联一个线程对象</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示下一个waitStatus值为CONDITION的节点</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否当前结点是处于共享模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isShared</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回前一个节点，如果没有前一个节点，则抛出空指针异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Node <span class="title function_">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException &#123;</span><br><span class="line">        <span class="comment">// 获取前一个节点的指针</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> prev;</span><br><span class="line">        <span class="comment">// 如果前一个节点不存在</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 否则返回</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化头节点使用</span></span><br><span class="line">    Node() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  当有线程需要入队时，那么就创建一个新节点，然后关联该线程对象，由addWaiter()方法调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">        <span class="built_in">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="built_in">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个线程需要等待一个条件阻塞了，那么就创建一个新节点，关联线程对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node(Thread thread, <span class="type">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">        <span class="built_in">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="built_in">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过 Node 我们可以实现两种队列：</p>
<p>1）一是通过 prev 和 next 实现 CLH（Craig, Landin, and Hagersten）队列（线程同步队列、双向队列）。</p>
<p>在 CLH 锁中，每个等待的线程都会有一个关联的 Node，每个 Node 有一个 prev 和 next 指针。当一个线程尝试获取锁并失败时，它会将自己添加到队列的尾部并自旋，等待前一个节点的线程释放锁。类似下面这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class CLHLock &#123;</span><br><span class="line">    private volatile Node tail;</span><br><span class="line">    private ThreadLocal&lt;Node&gt; myNode = ThreadLocal.withInitial(Node::new);</span><br><span class="line">    private ThreadLocal&lt;Node&gt; myPred = new ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public void lock() &#123;</span><br><span class="line">        Node node = myNode.get();</span><br><span class="line">        node.locked = true;</span><br><span class="line">        // 把自己放到队尾，并取出前面的节点</span><br><span class="line">        Node pred = tail;</span><br><span class="line">        myPred.set(pred);</span><br><span class="line">        while (pred.locked) &#123;</span><br><span class="line">            // 自旋等待</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void unlock() &#123;</span><br><span class="line">        Node node = myNode.get();</span><br><span class="line">        node.locked = false;</span><br><span class="line">        myNode.set(myPred.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static class Node &#123;</span><br><span class="line">        private volatile boolean locked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）二是通过 nextWaiter 实现 <code>Condition</code>上的等待线程队列（单向队列），这个 Condition 主要用在 <code>ReentrantLock</code>类中。</p>
<h2 id="2、接口-Condition-Lock-ReadWriteLock"><a href="#2、接口-Condition-Lock-ReadWriteLock" class="headerlink" title="2、接口 Condition&#x2F;Lock&#x2F;ReadWriteLock"></a>2、接口 Condition&#x2F;Lock&#x2F;ReadWriteLock</h2><p>locks 包下共有三个接口：<code>Condition</code>、<code>Lock</code>、<code>ReadWriteLock</code>。</p>
<p>其中，Lock 和 ReadWriteLock 从名字就可以看得出来，分别是锁和读写锁的意思。Lock 接口里面有一些获取锁和释放锁的方法声明，而 ReadWriteLock 里面只有两个方法，分别返回“读锁”和“写锁”：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line">    Lock <span class="title function_">readLock</span><span class="params">()</span>;</span><br><span class="line">    Lock <span class="title function_">writeLock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lock 接口中有一个方法可以获得一个Condition：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Condition <span class="title function_">newCondition</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>之前我们提到过每个对象都可以用<code>Object</code>的<strong>wait&#x2F;notify</strong>方法来实现<strong>等待&#x2F;通知机制</strong>。而 Condition 接口也提供了类似 Object 的方法，可以配合<strong>Lock</strong>来实现等待&#x2F;通知模式。使用Condition监视器的理由可以认为线程等待队列可以是多个，而object只能是一个。</p>
<h2 id="3、ReentrantLock类"><a href="#3、ReentrantLock类" class="headerlink" title="3、ReentrantLock类"></a>3、ReentrantLock类</h2><p>ReentrantLock 是 Lock 接口的默认实现，实现了锁的基本功能。</p>
<p>从名字上看，它是一个“可重入”锁，从源码上看，它内部有一个抽象类<code>Sync</code>，继承了 <code>AQS</code>，自己实现了一个同步器。</p>
<p>同时，ReentrantLock 内部有两个非抽象类<code>NonfairSync</code>和<code>FairSync</code>，它们都继承了 Sync。从名字上可以看得出，分别是”非公平同步器“和”公平同步器“的意思。这意味着 ReentrantLock 可以支持”公平锁“和”非公平锁“。</p>
<p>通过看这两个同步器的源码可以发现，它们的实现都是”独占“的。都调用了 AOS 的<code>setExclusiveOwnerThread</code>方法，所以 ReentrantLock 的锁是”独占“的，也就是说，它的锁都是”排他锁“，不能共享。</p>
<p>在 ReentrantLock 的构造方法里，可以传入一个<code>boolean</code>类型的参数，来指定它是否是一个公平锁，默认情况下是非公平的。这个参数一旦实例化后就不能修改，只能通过<code>isFair()</code>方法来查看。</p>
<p><strong>根据第二大节中的内容，ReentrantLock 是可重入锁、公平锁和非公平锁、排它锁。</strong></p>
<h2 id="4、synchronized关键字"><a href="#4、synchronized关键字" class="headerlink" title="4、synchronized关键字"></a>4、synchronized关键字</h2><p>在Java中，<code>synchronized</code> 关键字用于控制多个线程对共享资源的访问，其底层实现涉及多种锁状态，这些状态根据竞争情况逐步升级，以提高锁的获取与释放效率。我查到的资料说，在jdk1.6之前所有锁都是操作系统提供的重量级锁，后续对synchronized进行优化，直到现在出现了<strong>四个锁状态</strong>，<strong>由低到高</strong>（即锁的要求越来越高）分别是<strong>无锁状态、偏向锁、轻量级锁状态、重量级锁状态。</strong></p>
<h3 id="（1）无锁状态"><a href="#（1）无锁状态" class="headerlink" title="（1）无锁状态"></a>（1）无锁状态</h3><p><strong>定义</strong>：<br>无锁状态是指没有对资源进行锁定，所有的线程都能访问并尝试修改同一个资源，但同时只有一个线程能修改成功。无锁的特点是修改操作会在循环内进行，线程会不断地尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>无需使用锁机制，适用于线程冲突较少的场景。</li>
<li>线程通过自旋（CAS）来尝试访问资源，直至成功。</li>
</ul>
<h3 id="（2）偏向锁状态"><a href="#（2）偏向锁状态" class="headerlink" title="（2）偏向锁状态"></a>（2）偏向锁状态</h3><p><strong>定义</strong>：<br>偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>偏向锁的目标是减少无竞争且只有一个线程使用锁的情况下的性能消耗。</li>
<li>JVM使用CAS操作把线程ID记录到对象的<strong>Mark Word（等下介绍）</strong>当中，并修改标识位，当前线程就拥有了这把锁。</li>
<li>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。</li>
</ul>
<h3 id="（3）轻量级锁状态"><a href="#（3）轻量级锁状态" class="headerlink" title="（3）轻量级锁状态"></a>（3）轻量级锁状态</h3><p><strong>定义</strong>：<br>轻量级锁是指当锁是偏向锁的时候，却被另外的线程所访问，此时偏向锁就会升级为轻量级锁。其他线程会通过自旋的形式尝试获取锁，线程不会阻塞，从而提高性能。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>轻量级锁是介于偏向锁和重量级锁之间的锁实现。</li>
<li>通过CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，如果成功，则线程拥有锁。</li>
<li>适用于线程竞争不激烈且同步块执行时间较短的场景。</li>
<li>如果多个线程竞争锁，轻量级锁可能会升级为重量级锁。</li>
</ul>
<h3 id="（4）重量级锁状态"><a href="#（4）重量级锁状态" class="headerlink" title="（4）重量级锁状态"></a>（4）重量级锁状态</h3><p><strong>定义</strong>：<br>重量级锁是指当多个线程竞争同一个锁时，锁的状态会升级为重量级锁。此时，除了锁的拥有者外，其余线程都会处于阻塞状态。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>重量级锁通过对象内部的监视器锁（monitor）实现，依赖于操作系统的Mutex Lock。</li>
<li>线程阻塞和唤醒的开销较大，适用于线程竞争激烈的场景。</li>
<li>当轻量级锁的自旋次数达到一定阈值时，如果仍未获得锁，则会升级为重量级锁。</li>
</ul>
<h3 id="引发问题"><a href="#引发问题" class="headerlink" title="引发问题"></a>引发问题</h3><p>好，现在看到这里大部分的无锁偏、向锁、轻量级锁、重量级锁内容就可以解释清楚了，但是博客写到这里的时候，我就在思考，<strong>synchronized的锁底层并没有使用AQS这样的抽象队列同步器，为什么synchronized可以实现可重入锁，排它锁的功能？</strong></p>
<p>首先我们需要了解，java中的锁存放在哪里，上面的提到的Mark Word是什么？</p>
<h3 id="Java锁的位置、什么是Mark-Word？"><a href="#Java锁的位置、什么是Mark-Word？" class="headerlink" title="Java锁的位置、什么是Mark Word？"></a>Java锁的位置、什么是Mark Word？</h3><p>首先我们来看看一个对象的“锁”是存放在什么地方的。</p>
<p>每个 Java 对象都有一个对象头。如果是非数组类型，则用 2 个字宽来存储对象头，如果是数组，则会用 3 个字宽来存储对象头。在 32 位处理器中，一个字宽是 32 位；在 64 位虚拟机中，一个字宽是 64 位。对象头的内容如下表所示：</p>
<table>
<thead>
<tr>
<th>长度</th>
<th>内容</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>32&#x2F;64bit</td>
<td>Mark Word</td>
<td>存储对象的 hashCode 或锁信息等</td>
</tr>
<tr>
<td>32&#x2F;64bit</td>
<td>Class Metadata Address</td>
<td>存储到对象类型数据的指针</td>
</tr>
<tr>
<td>32&#x2F;64bit</td>
<td>Array length</td>
<td>数组的长度（如果是数组）</td>
</tr>
</tbody></table>
<p>我们主要来看看 Mark Word 的格式：</p>
<table>
<thead>
<tr>
<th>锁状态</th>
<th>29 bit 或 61 bit</th>
<th>1 bit 是否是偏向锁？</th>
<th>2 bit 锁标志位</th>
</tr>
</thead>
<tbody><tr>
<td>无锁</td>
<td></td>
<td>0</td>
<td>01</td>
</tr>
<tr>
<td>偏向锁</td>
<td>线程 ID</td>
<td>1</td>
<td>01</td>
</tr>
<tr>
<td>轻量级锁</td>
<td>指向栈中锁记录的指针</td>
<td>此时这一位不用于标识偏向锁</td>
<td>00</td>
</tr>
<tr>
<td>重量级锁</td>
<td>指向互斥量（重量级锁）的指针</td>
<td>此时这一位不用于标识偏向锁</td>
<td>10</td>
</tr>
<tr>
<td>GC 标记</td>
<td></td>
<td>此时这一位不用于标识偏向锁</td>
<td>11</td>
</tr>
</tbody></table>
<p>可以看到，当对象状态为偏向锁时，<code>Mark Word</code>存储的是偏向的线程 ID；当状态为轻量级锁时，<code>Mark Word</code>存储的是指向线程栈中<code>Lock Record</code>的指针；当状态为重量级锁时，<code>Mark Word</code>为指向堆中的 monitor（监视器）对象的指针。</p>
<blockquote>
<p>在 Java 中，监视器（monitor）是一种同步工具，用于保护共享数据，避免多线程并发访问导致数据不一致。在 Java 中，每个对象都有一个内置的监视器。</p>
</blockquote>
<p>监视器包括两个重要部分，一个是锁，一个是等待&#x2F;通知机制，后者是通过 Object 类中的<code>wait()</code>, <code>notify()</code>, <code>notifyAll()</code>等方法实现的。</p>
<blockquote>
<p>我在下文会提到 Object 类中的<code>wait()</code>, <code>notify()</code>, <code>notifyAll()</code>等方法，可以看下我学习多线程碰到的问题。</p>
</blockquote>
<p>好了，现在可以回答为什么synchronized可以实现可重入锁，排它锁的功能？</p>
<h3 id="可重入锁的实现"><a href="#可重入锁的实现" class="headerlink" title="可重入锁的实现"></a>可重入锁的实现</h3><p>synchronized是可重入锁，这意味着同一个线程可以多次获取同一个对象锁，而不会导致死锁。synchronized实现可重入锁的机制主要依赖于对象头中的锁计数器（或称为锁记录器、锁状态等，具体实现可能因JVM版本和平台而异）：</p>
<blockquote>
<p>根据我查到的资料，锁计数器是一个抽象的概念，在对象头中并非是以一个单独的字段出现，而是在Mark Word中以锁信息的方式存储在内，并且这些信息具体实现可能因JVM版本和平台而异。</p>
</blockquote>
<ol>
<li><strong>锁计数器</strong>：每个对象都有一个与之关联的锁计数器，用于记录当前持有该对象锁的线程重入的次数。</li>
<li><strong>加锁</strong>：当一个线程首次获取锁时，JVM会将锁计数器的值设置为1，并将锁的持有者设置为当前线程。如果同一个线程再次尝试获取该锁，锁计数器会递增，而不是阻塞线程。</li>
<li><strong>解锁</strong>：当线程退出同步代码块时，锁计数器会递减。只有当锁计数器的值减为0时，锁才会被完全释放，此时其他线程才能获取该锁。</li>
</ol>
<p>通过这种机制，synchronized确保了同一个线程可以多次进入同步代码块而不会导致死锁，同时也保证了在锁被完全释放之前，其他线程无法进入该同步代码块。</p>
<h3 id="排他锁的实现"><a href="#排他锁的实现" class="headerlink" title="排他锁的实现"></a>排他锁的实现</h3><p>synchronized实现的锁本质上是排他锁（互斥锁），即在同一时刻，只有一个线程能够持有锁并访问被保护的资源。这是通过JVM的监视器锁（monitor lock）机制实现的：</p>
<ol>
<li><strong>监视器锁</strong>：每个Java对象都可以关联一个监视器锁（monitor）。当线程进入同步代码块时，它会尝试获取与同步代码块对象相关联的监视器锁。</li>
<li><strong>加锁与解锁</strong>：如果监视器锁未被其他线程持有，则当前线程将获取锁并继续执行同步代码块。如果锁已被其他线程持有，则当前线程将被阻塞，直到锁被释放。线程退出同步代码块时，会释放锁，允许其他线程获取锁并执行同步代码块。</li>
</ol>
<h3 id="讲一个我学习多线程时碰到的问题"><a href="#讲一个我学习多线程时碰到的问题" class="headerlink" title="讲一个我学习多线程时碰到的问题"></a>讲一个我学习多线程时碰到的问题</h3><p>这个问题是关于重量级锁的内容。当时我学习Object类的wait方法、notify方法（包括notifyAll，下文可能会省略）这些关于线程的方法的时候，我没有使用synchronized关键字包裹代码，类似的结构像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;wait之前: &quot;</span>);</span><br><span class="line">        obj.wait(); <span class="comment">//所有可能会引起线程阻塞等到的方法都会拋出InterruptedException受查异常</span></span><br><span class="line">        System.out.println(<span class="string">&quot;wait之后: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我相信大家学习的时候一定学到了<strong>Object类的wait方法、notify方法是为了让线程中出让锁，或是唤醒等待状态下的线程</strong>，但是前提条件都是加了锁，否则哪里来的出让锁和抢夺cpu一说？</p>
<p>我们再把这三个方法说得细致一些：当一个线程调用了一个对象的 <code>wait()</code> 方法时，它会释放该对象的监视器锁，并进入该对象的等待集合中等待。直到其他线程调用了该对象的 <code>notify()</code> 或 <code>notifyAll()</code> 方法，并且当前线程重新获得了该对象的监视器锁之后，它才会从 <code>wait()</code> 方法返回，并继续执行。这也就是<strong>重量级锁</strong>中我们说到的内容。</p>
<p>由于 <code>notify()</code> 和 <code>notifyAll()</code> 是用来唤醒等待在该对象监视器上的线程的，因此它们必须在持有该对象监视器锁的同步代码块或同步方法中调用。否则，编译器会报错，因为如果没有持有监视器锁，那么线程就没有权限调用这些方法。</p>
<p><img src="Snipaste_2024-08-07_01-22-20.png"></p>
<p>如果还没有获取到锁就尝试解锁，运行后就会抛出非法的锁状态异常。这里的代码抛出该异常正是这个原因：wait方法内部有一步重要的操作：先解锁，再阻塞等待。</p>
<p>因此，在使用wait方法 前，必须先加锁，把wait方法写到synchronized代码块内部。 同时，Java也规定调用notify方法也必须在synchronized代码块中。</p>
<p>并且，加锁的锁对象必须要与调用wait方法的锁对象是同一个。如果加锁对象与调用wait方法的对象不是同一个，也会抛出<code>IllgalMonitorStateException</code> 异常。</p>
<h3 id="Lock和synchronized有什么区别？"><a href="#Lock和synchronized有什么区别？" class="headerlink" title="Lock和synchronized有什么区别？"></a>Lock和synchronized有什么区别？</h3><p>Lock和synchronized是Java中用于控制多个线程对共享资源进行访问的两种不同机制，它们在多个方面存在显著的区别。以下是Lock和synchronized之间的一些主要区别：</p>
<h4 id="类型与实现"><a href="#类型与实现" class="headerlink" title="类型与实现"></a>类型与实现</h4><ul>
<li><strong>Lock</strong>：是一个接口（<code>java.util.concurrent.locks.Lock</code>），提供了比synchronized关键字更灵活的线程同步控制。它允许显式地获取锁和释放锁，支持中断和超时等待等特性。</li>
<li><strong>synchronized</strong>：是Java中的一个关键字，用于实现同步控制。它支持对方法或代码块进行同步，但不如Lock接口那样灵活。</li>
</ul>
<h4 id="加锁与解锁方式"><a href="#加锁与解锁方式" class="headerlink" title="加锁与解锁方式"></a>加锁与解锁方式</h4><ul>
<li><strong>Lock</strong>：需要显式地调用<code>lock()</code>方法来获取锁，并在适当的时候调用<code>unlock()</code>方法来释放锁。这种方式提供了更细粒度的控制，但也要求程序员必须确保在finally块中释放锁，以避免死锁。</li>
<li><strong>synchronized</strong>：加锁和解锁是隐式的。对于同步方法，JVM会在方法调用时自动获取锁，并在方法返回时（无论是正常返回还是异常返回）自动释放锁。对于同步代码块，锁的范围由<code>synchronized(对象)</code>语句块确定，当执行完该代码块时，JVM会自动释放锁。</li>
</ul>
<h4 id="等待与通知机制"><a href="#等待与通知机制" class="headerlink" title="等待与通知机制"></a>等待与通知机制</h4><ul>
<li><strong>Lock</strong>：提供了<code>Condition</code>接口，允许多个条件变量存在，可以实现更灵活的线程间通信。通过<code>Condition</code>的<code>await()</code>、<code>signal()</code>和<code>signalAll()</code>方法，可以实现线程的等待、唤醒和唤醒所有等待线程。</li>
<li><strong>synchronized</strong>：使用<code>Object</code>类的<code>wait()</code>、<code>notify()</code>和<code>notifyAll()</code>方法来实现线程的等待和唤醒。这些方法只能与synchronized关键字一起使用，且每个对象只有一个等待队列和一个通知队列。</li>
</ul>
<h4 id="锁的类型与公平性"><a href="#锁的类型与公平性" class="headerlink" title="锁的类型与公平性"></a>锁的类型与公平性</h4><ul>
<li><strong>Lock</strong>：支持非公平锁和公平锁。非公平锁允许插队，即新请求的线程可能会立即获得锁，而已经等待的线程可能会继续等待。公平锁则严格按照请求锁的顺序来获取锁，但可能会导致性能下降。</li>
<li><strong>synchronized</strong>：只支持非公平锁。</li>
</ul>
<h4 id="性能与伸缩性"><a href="#性能与伸缩性" class="headerlink" title="性能与伸缩性"></a>性能与伸缩性</h4><ul>
<li><strong>Lock</strong>：通常比synchronized具有更好的性能和伸缩性。因为Lock接口的实现类（如<code>ReentrantLock</code>）可以使用不同的算法来优化锁的获取和释放过程，例如使用自旋锁、轻量级锁等。</li>
<li><strong>synchronized</strong>：在JDK 1.6及以后的版本中，synchronized的性能得到了显著提高，包括引入了自旋锁和轻量级锁等优化机制。但在某些高并发场景下，Lock接口的实现类可能仍然具有更好的性能。</li>
</ul>
<h4 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h4><ul>
<li><strong>Lock</strong>：适用于需要更灵活控制锁的场景，例如需要实现超时等待、可中断等待、尝试非阻塞地获取锁等。</li>
<li><strong>synchronized</strong>：适用于简单的同步控制场景，如保护单例模式中的唯一实例、在多线程环境下访问共享资源等。</li>
</ul>
<h2 id="5、ReentrantReadWriteLock"><a href="#5、ReentrantReadWriteLock" class="headerlink" title="5、ReentrantReadWriteLock"></a>5、ReentrantReadWriteLock</h2><p><code>ReentrantReadWriteLock</code>是 <code>ReadWriteLock</code> 接口的默认实现。它与 ReentrantLock 的功能类似，同样是可重入的，支持非公平锁和公平锁。不同的是，它还支持”读写锁“。</p>
<blockquote>
<p>在这里只介绍内部结构，可重入锁、非公平锁和公平锁看第二大节</p>
</blockquote>
<p>ReentrantReadWriteLock 内部的结构大概是这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内部结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line"><span class="keyword">final</span> Sync sync;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReadLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ReadLock</span><span class="params">(ReentrantReadWriteLock lock)</span> &#123;</span><br><span class="line">            sync = lock.sync;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WriteLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">WriteLock</span><span class="params">(ReentrantReadWriteLock lock)</span> &#123;</span><br><span class="line">            sync = lock.sync;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法，初始化两个锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantReadWriteLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">    readerLock = <span class="keyword">new</span> <span class="title class_">ReadLock</span>(<span class="built_in">this</span>);</span><br><span class="line">    writerLock = <span class="keyword">new</span> <span class="title class_">WriteLock</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取读锁和写锁的方法</span></span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.WriteLock <span class="title function_">writeLock</span><span class="params">()</span> &#123; <span class="keyword">return</span> writerLock; &#125;</span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.ReadLock  <span class="title function_">readLock</span><span class="params">()</span>  &#123; <span class="keyword">return</span> readerLock; &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，它同样是内部维护了两个同步器。且维护了两个 Lock 的实现类 ReadLock 和 WriteLock。从源码可以发现，这两个内部类用的是外部类的同步器。</p>
<h2 id="6、拓展：StampedLock"><a href="#6、拓展：StampedLock" class="headerlink" title="6、拓展：StampedLock"></a>6、拓展：StampedLock</h2><p>在第一大节的结尾，有提到这个锁，对于普通学习多线程的同学来说我认为见的都很少，但是我看的博客有介绍这个锁的性能，所以我也就简单的说说~</p>
<p><code>StampedLock</code> 类是 Java 8 才发布的，也是 Doug Lea 大神所写，有人称它为锁的性能之王。</p>
<p>StampedLock 没有实现 Lock 接口和 ReadWriteLock 接口，但它实现了“读写锁”的功能，并且性能比 ReentrantReadWriteLock 更高。StampedLock 还把读锁分为了“乐观读锁”和“悲观读锁”两种。</p>
<p>感兴趣可以自行搜索，在这里的博客就只介绍面向八股的比较常见的锁啦</p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程：（四）详解ConcurrentHashMap构成</title>
    <url>/2024/08/06/java%EF%BC%9A%E8%AF%A6%E8%A7%A3ConcurrentHashMap/</url>
    <content><![CDATA[<h1 id="一、JDK-1-7"><a href="#一、JDK-1-7" class="headerlink" title="一、JDK 1.7"></a>一、JDK 1.7</h1><h2 id="1-1-加锁机制"><a href="#1-1-加锁机制" class="headerlink" title="1.1 加锁机制"></a>1.1 加锁机制</h2><p>ConcurrentHashMap 在 JDK 1.7 中，提供了一种粒度更细的加锁机制，这种机制叫分段锁「Lock Striping」。整个哈希表被分为多个段，每个段都独立锁定。读取操作不需要锁，写入操作仅锁定相关的段。这减小了锁冲突的几率，从而提高了并发性能。</p>
<p>这种机制的优点：在并发环境下将实现更高的吞吐量，而在单线程环境下只损失非常小的性能。</p>
<p>可以这样理解分段锁，就是<strong>将数据分段，对每一段数据分配一把锁</strong>。当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>
<p>有些方法需要跨段，比如 <code>size()</code>、<code>isEmpty()</code>、<code>containsValue()</code>，它们可能需要锁定整个表而不仅仅是某个段，这需要按顺序锁定所有段，操作完后，再按顺序释放所有段的锁。如下图：</p>
<p><img src="map-20230816155810.png" alt="jdk1.7之前的构成图"></p>
<h2 id="1-2-八股：jdk1-7之前的构成"><a href="#1-2-八股：jdk1-7之前的构成" class="headerlink" title="1.2 八股：jdk1.7之前的构成"></a>1.2 八股：jdk1.7之前的构成</h2><p>敲重点！字体加粗了务必记好。</p>
<p>ConcurrentHashMap 是由 <strong>Segment 数组结构和 HashEntry 数组</strong>构成的。Segment 是一种可重入的锁 <code>ReentrantLock</code>，HashEntry 则用于存储键值对数据。</p>
<p>一个 ConcurrentHashMap 里包含<strong>一个 Segment 数组，数组中都是segment对象</strong>，Segment 的结构和 HashMap 类似，是一种数组和链表结构，一个 Segment 里包含一个 <strong>HashEntry 数组</strong>，每个 HashEntry 是一个链表结构的元素，每个 Segment 守护着一个 HashEntry 数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得它对应的 Segment 锁（可重入锁）。</p>
<p><strong>HashEntry到底是什么？</strong></p>
<p>我自己搜的时候都在介绍hashentry是数组，但是搜到的都是类似链表的结构，包括在1.1节中的图片看上去都是链表，这是怎么回事？</p>
<p>其实，<code>HashEntry</code>本身是一个<strong>结构体（或内部类，同样segment也是内部类）</strong>，实际上是每个<code>Segment</code>内部的一个数组，用于封装键值对数据，并可能包含指向下一个<code>HashEntry</code>的引用以形成链表结构，用于处理哈希冲突。但由于哈希冲突的存在，这个数组的每个位置可能不仅仅是一个<code>HashEntry</code>对象，而是一个由<code>HashEntry</code>对象组成的链表（或更复杂的结构，如红黑树，但这在JDK 1.7中不是默认的）。</p>
<p><code>ConcurrentHashMap</code>使用链表来存储这些具有相同索引值的键值对。具体来说，每个数组位置（在JDK 1.7中实际上是<code>Segment</code>内部的数组，而在JDK 1.8及以后是<code>Node</code>数组）存储的是链表的头节点。如果发生哈希冲突，新的键值对会被添加到这个链表的末尾。</p>
<p>接下来看看Segment的结构组成：</p>
<p>单一的 Segment 结构如下：</p>
<p><img src="map-20230816160155.png"></p>
<p>像这样的 Segment 对象，在 ConcurrentHashMap 集合中有多少个呢？有 2 的 N 次方个，共同保存在一个名为 segments 的数组当中。 因此整个 ConcurrentHashMap 的结构如下：</p>
<p><img src="map-20230816160223.png"></p>
<p>可以说，ConcurrentHashMap 是一个二级哈希表。在一个总的哈希表下面，有若干个子哈希表。</p>
<p>Case1：不同 Segment 的并发写入（可以并发执行）</p>
<p><img src="map-20230816160301.png"></p>
<p>Case2：同一 Segment 的一写一读（可以并发执行）</p>
<p><img src="map-20230816160316.png"></p>
<p>Case3：同一 Segment 的并发写入</p>
<p><img src="map-20230816160331.png"></p>
<h1 id="二、JDK1-8往后"><a href="#二、JDK1-8往后" class="headerlink" title="二、JDK1.8往后"></a>二、JDK1.8往后</h1><p>而在 JDK 1.8 中，ConcurrentHashMap 主要做了两个优化：</p>
<ul>
<li>同<code>HashMap</code> 一样，链表也会在长度达到 8 的时候转化为红黑树，这样可以提升大量冲突时候的查询效率；</li>
<li>以某个位置的头结点（链表的头结点或红黑树的 root 结点）为锁，**配合自旋+CAS(乐观锁)**避免不必要的锁开销，进一步提升并发性能。</li>
</ul>
<p><img src="map-20230816155924.png"></p>
<p>相比 JDK1.7 中的 ConcurrentHashMap，JDK1.8 中的 ConcurrentHashMap 取消了 Segment 分段锁，采用 CAS + synchronized 来保证并发安全性，整个容器只分为一个 Segment，即 table 数组。</p>
<p>JDK1.8 中的 ConcurrentHashMap 对节点 Node 类中的共享变量，和 JDK1.7 一样，使用 volatile 关键字，保证多线程操作时，变量的可见性。</p>
]]></content>
      <categories>
        <category>Java开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis：持久层技术、ORM框架</title>
    <url>/2024/07/06/mybatis/</url>
    <content><![CDATA[<h1 id="回顾-JDBC开发"><a href="#回顾-JDBC开发" class="headerlink" title="回顾 JDBC开发"></a>回顾 JDBC开发</h1><ol>
<li><p>优点：简单易学,上手快, 非常灵活构建SQL，效率高</p>
</li>
<li><p>缺点：代码繁琐，难以写出高质量的代码（例如：资源的释放，SQL注入安全性等）</p>
</li>
</ol>
<p>开发者既要写业务逻辑，又要写对象的创建和销毁，必须管底层具体数据库的语法</p>
<p>（例如：分页）。</p>
<ol start="3">
<li>适合于超大批量数据的操作，速度快</li>
</ol>
<p>性能：jdbc(80%代码只完成20%的事) &gt; mybatis &gt; hibernate:(from Employee) &gt; jpa</p>
<h1 id="什么是mybatis，有什么特点"><a href="#什么是mybatis，有什么特点" class="headerlink" title="什么是mybatis，有什么特点"></a>什么是mybatis，有什么特点</h1><ol>
<li><p>基于上述二种支持，我们需要在中间找到一个平衡点呢？结合它们的优点，摒弃它们的缺点，这就是myBatis，现今myBatis被广泛的企业所采用。 </p>
</li>
<li><p>MyBatis，前身ibatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p>
</li>
<li><p>iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO）</p>
</li>
<li><p>持久层技术：</p>
</li>
</ol>
<p>​		<strong>jdbc&#x2F;dbutils&#x2F;springDAO</strong></p>
<p>​		ORM ( Object Relationship Mapping)框架：ORM 框架是持久化框架有<strong>mybatis、hibernate、springORM、Java Persistence API (JPA)、toplink、EJB3 EntityBean</strong></p>
<p>​	<a href="http://www.mybatis.cn/archives/2391.html"><a href="http://www.mybatis.cn/">MyBatis中文官网</a></a></p>
<h1 id="1-准备Maven-Pom-xml"><a href="#1-准备Maven-Pom-xml" class="headerlink" title="1.准备Maven Pom.xml"></a>1.准备Maven Pom.xml</h1><p> 在IntelliJ IDEA中配置 <em>pom.xml</em> 引入类库，这样在创建项目时直接引用类库即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 常量声明 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdk版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 模块的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql driver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- apache libraries --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类字节增强库：getter/setter, constructor method etc... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="2-创建POJO实体类"><a href="#2-创建POJO实体类" class="headerlink" title="2. 创建POJO实体类"></a>2. 创建POJO实体类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">// lombok类库 生成getter, setter, toString</span></span><br><span class="line"><span class="comment">// @ToString            //生成toString()</span></span><br><span class="line"><span class="comment">// @AllArgsConstructor  //全参数构造</span></span><br><span class="line"><span class="comment">// @NoArgsConstructor   //默认构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">//lombok类库：用注解为实体类的属性生成getter/setter及构造函数等</span></span><br><span class="line">    <span class="keyword">private</span> Integer empno; <span class="comment">//Integer=null, int=0</span></span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String job;</span><br><span class="line">    <span class="keyword">private</span> Integer mgr;</span><br><span class="line">    <span class="keyword">private</span> Date hiredate;</span><br><span class="line">    <span class="keyword">private</span> Double sal;</span><br><span class="line">    <span class="keyword">private</span> Double comm;</span><br><span class="line">    <span class="keyword">private</span> Integer deptno;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-创建-mybatis-config-xml配置文件"><a href="#3-创建-mybatis-config-xml配置文件" class="headerlink" title="3. 创建 mybatis-config.xml配置文件"></a>3. 创建 mybatis-config.xml配置文件</h1><p>在 <code>src/main/resources</code> 目录下新建<code>mybatis-config.xml</code> 配置文件，内容如下：</p>
<ol>
<li><p>（可选）配置相关属性：<code>&lt;properties resource=&quot;jdbc.properties&quot;/&gt; </code> 引入连接信息</p>
</li>
<li><p>（可选）配置实体类别名：<code>&lt;typeAliases&gt; ... &lt;/typeAliases&gt;</code></p>
</li>
</ol>
<ol start="3">
<li><p>配置连接池环境:  <code>&lt;environments default=&quot;...&quot;&gt; ... &lt;/environments&gt;</code></p>
</li>
<li><p>注册SQL Mapper映射文件：</p>
</li>
</ol>
<h2 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/scott?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<h2 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a><strong>mybatis-config.xml</strong></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载外部的属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置不同的数据库环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册实体映射文件，里面写SQL --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="**&lt;typeAliases&gt;**类型别名"></a>**&lt;typeAliases&gt;**类型别名</h2><p>类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 为包内的类命名别名：Employee 或 employee --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.glut.mybatismapper.entity&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：<typeAliases>加在<properties>元素的后面，<environments>元素的前面。</environments></properties></typeAliases></strong></p>
<h2 id="特性配置"><a href="#特性配置" class="headerlink" title="**&lt;settings&gt;**特性配置"></a>**&lt;settings&gt;**特性配置</h2><p>MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。具体配置项参考 Mybatis中文参考手册。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 二级缓存开关; 这个配置使全局的映射器启用或禁用二级缓存 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：<settings>加在<properties>元素的后面，<typeAliases>元素的前面。</typeAliases></properties></settings></strong></p>
<h1 id="4-创建-SqlSessionFactory"><a href="#4-创建-SqlSessionFactory" class="headerlink" title="4. 创建 SqlSessionFactory"></a>4. 创建 SqlSessionFactory</h1><ul>
<li><p>通过加载核心配置文件创建SqlSessionFactory实例，SqlSessionFactory是一个应用程序内全局单一的实例，支持多线程安全操作</p>
</li>
<li><p>通过SqlSessionFactory 获得 SqlSession 操作数据库，所有的数据库操作通过SqlSession 完成。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">      <span class="comment">// 加载核心配置文件</span></span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">      <span class="comment">// sql会话工厂，此对象类似 DataSource</span></span><br><span class="line">      <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 得到sql会话对象,它封装了Connection， 此对象类似 java.sql.Connection</span></span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">      System.out.println(sqlSession.getConnection());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 执行查询</span></span><br><span class="line">      <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> sqlSession.selectList(<span class="string">&quot;名字空间 + 语句 ID&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-编写XML映射文件"><a href="#5-编写XML映射文件" class="headerlink" title="5. 编写XML映射文件"></a>5. 编写XML映射文件</h1><p>SQL语句元素有：</p>
<ul>
<li>select</li>
<li>insert</li>
<li>update</li>
<li>delete</li>
<li>sql</li>
</ul>
<p>Mybatis XML映射文件中可用来生成动态 SQL 的 XML 元素有：</p>
<ul>
<li>where</li>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
<li>bind</li>
</ul>
<p><strong>创建一个包：com.lanqiao.mapper</strong></p>
<ol>
<li><p>创建 XML 映射文件，编写sql语句</p>
</li>
<li><p>编写结果映射配置:  <resultMap id type="实体类全类名"></resultMap></p>
</li>
<li><p>主要的XML元素:</p>
</li>
</ol>
<h2 id="5-1-根元素"><a href="#5-1-根元素" class="headerlink" title="5.1 **&lt;mapper&gt;**根元素"></a>5.1 **&lt;mapper&gt;**根元素</h2><ul>
<li>namespace: 命名空间，通常是接口映射的全类名。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-2-与-元素"><a href="#5-2-与-元素" class="headerlink" title="5.2 **&lt;select&gt; ** 与 **&lt;where&gt;**元素"></a>5.2 **&lt;select&gt; ** 与 **&lt;where&gt;**元素</h2><p><code>&lt;select&gt;</code>元素用来编写select语句。</p>
<p><code>&lt;where&gt;</code>元素会生成一个 <code>WHERE</code>关键字。</p>
<ul>
<li><p><code>&lt;select resultType=&quot;POJO全类名&quot;&gt;</code>: 自动查询结果映射，要求结果集的列与实体类的属性名一致不区分大小写。</p>
</li>
<li><p><code>&lt;select resultMap=&quot;REF_ResultMap_ID&quot;&gt;</code>：手动结果映射，这种是推荐结果映射方式，这种方式比较灵活，而合适多表查询的结果映射。</p>
</li>
<li><p><code>&lt;bind name=&quot;变量名&quot; value=&quot;&quot;&gt;</code>: 绑定生成新变量在后面用于</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">     SELECT * FROM EMP WHERE EMPNO=#&#123;empno,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Employee&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;baseResultMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM EMP</span><br><span class="line">    <span class="comment">&lt;!-- 动态WHERE, 会生成一个 WHERE关键字,并且会消除条件中多余的 AND 或 OR关键字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在Java 里把 %JAMES% 拼好 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;if test=&quot;ename != null&quot;&gt;AND ENAME like #&#123;ename&#125;&lt;/if&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;enamePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + ename + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">        AND ENAME like #&#123;enamePattern&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null and job.trim().length()&gt;0&quot;</span>&gt;</span>AND JOB=trim(#&#123;job&#125;)<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sal != null&quot;</span>&gt;</span>&lt;![CDATA[ AND SAL&lt;=#&#123;sal&#125; ]]&gt;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptnoList != null&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;deptnoList&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">open</span>=<span class="string">&quot;AND DEPTNO in(&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">          #&#123;deptno&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：以上where 条件中<code>SAL &lt;=#&#123;sal&#125;</code>  的小于号是 XML 的无字符，需要放在XML CDATA 节点内，</strong></p>
<p><strong><code>&lt;![CDATA[ AND SAL&lt;=#&#123;sal&#125; ]]&gt;</code></strong></p>
<h2 id="5-3-结果映射元素"><a href="#5-3-结果映射元素" class="headerlink" title="5.3 **&lt;resultMap&gt;**结果映射元素"></a>5.3 **&lt;resultMap&gt;**结果映射元素</h2><p><code>&lt;resultMap&gt;</code>元素用来将查询结果集映射到实体。<code>&lt;resultMap&gt;</code>内部有以下几个主要元素：</p>
<ul>
<li><p><code>&lt;id&gt;</code>元素专门用于<em><strong>映射主键字段</strong></em></p>
<ul>
<li>javaType: 映射的 Java 属性类型，可以mybatis 预定义的类型别名（在第 8 节）或类型的全类名。</li>
<li>jdbcType: jdbc的类型名称（在第 7 节）。</li>
<li>typeHandler：类型处理器。无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。Mybatis 已定义了一些默认的类型处理器。</li>
</ul>
</li>
<li><p><code>&lt;result&gt;</code>元素用于映射普通字段。<result>元素的属性与<id>元素的的属性一样。</id></result></p>
</li>
<li><p><code>&lt;association&gt;</code>元素用于M:1多对一关联中映射 1方的实体</p>
</li>
<li><p><code>&lt;collection&gt;</code> 元素用于1:M一对多关联中映射 M方的实体</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.lanqiao.domain.Employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;empno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;empno&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;job&quot;</span> <span class="attr">column</span>=<span class="string">&quot;job&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;mgr&quot;</span> <span class="attr">column</span>=<span class="string">&quot;mgr&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;hiredate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;hiredate&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DATE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sal&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sal&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;comm&quot;</span> <span class="attr">column</span>=<span class="string">&quot;comm&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="5-3-1-多对一关联映射"><a href="#5-3-1-多对一关联映射" class="headerlink" title="5.3.1 **&lt;association&gt;**多对一关联映射"></a>5.3.1 **&lt;association&gt;**多对一关联映射</h3><p>常用的两种实体关联映射有：</p>
<ul>
<li><strong>M:1（多对一关联映射）</strong></li>
<li><strong>1:1（一对一关联映射）</strong></li>
</ul>
<p>实体的 M:1(多对一)关联中使用<code>&lt;association&gt;&lt;/association&gt;</code>映射，关联元素处理“有一个”类型的关系，如一个员工属于一个部门。</p>
<p><strong>多对一关联有以下两种映射方式：</strong></p>
<ol>
<li><strong>(推荐）嵌套结果</strong></li>
</ol>
<p>​	使用嵌套结果映射来处理重复的联合结果的子集。首先让我们来查看这个元素的属性。所有的结果集你都会看到，它和普通的只由 <code>select </code>和 <code>resultMap</code> <em>属性</em>的结果映射不同。</p>
<p>​	<em>嵌套结果要求使用一条SQL语句查询出实体与关联实体（关联表）的数据，效率好。</em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">  省略其它字段的映射....</span><br><span class="line">  <span class="comment">&lt;!-- 1.嵌套结果（推荐使用）: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Department&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">column</span>=<span class="string">&quot;DEPTNO&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;DNAME&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;loc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;LOC&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span> </span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 或者也可以引用另一个名字空间下的结果映射，这样可以减少一些映射配置</span></span><br><span class="line"><span class="comment">  &lt;association property=&quot;dept&quot; </span></span><br><span class="line"><span class="comment">      resultMap=&quot;com.lanqiao.mapper.DepartmentMapper.baseResultMap&quot;&gt;</span></span><br><span class="line"><span class="comment">  &lt;/association&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>嵌套查询</strong></li>
</ol>
<p><em>嵌套查询 (性能差)</em>: 通过执行另外一个 SQL 映射语句来返回预期的复杂类型(JavaBean)。也就是说每个关联的实体都通过一条单独的 SQL来查询。</p>
<p>这种方式很简单, 但是对于大型数据集合和列表将不会表现很好。问题就是我们熟知的 <strong>“N+1 查询问题”</strong>。</p>
<blockquote>
<p><strong>（面试题）</strong>在mybatis的查询中什么是<strong>N+1</strong>次查询，即嵌套查询中的<strong>N+1</strong>问题：这种关联会发生<strong>N+1</strong>次查询问题。N指的是执行了多少条SQL语句获取关联实体，1指的是主查询。如下映射所示：</p>
</blockquote>
<ul>
<li><p>一条语句为查询员工实体：</p>
<p><code>select * from scott.emp</code>  </p>
<p>你执行了一个单独的 SQL 语句来获取员工结果列表(<strong>就是“+1”</strong>)。</p>
</li>
<li><p>N条语句为查询每个员工关联的部门实体</p>
<p>对返回的每条记录, 你执行了一个查询语句来为每个实体加载细节(<strong>就是“N”</strong>)。</p>
<p>当一条语句查询出员工的结果集时，员工结果集中关联的每个部门 (10,20,30,40) 都会导致执行了N 条 SQL语句查询部门实体，<em>已被查询出的部门实体会被缓存在mybatis的一级缓存 SqlSession中</em>：</p>
<p><code>select * from  scott.dept=10;</code>   </p>
<p><code>select * from scott.dept=20;</code>  </p>
<p><code>......</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseResultMap_2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用单独的语句查询关联实体，column=&quot;deptno&quot;员工表外键 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">select</span>=<span class="string">&quot;selectDeptByPrimaryKey&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDeptByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">&quot;deptResultMap&quot;</span>&gt;</span></span><br><span class="line">  	select * from dept where deptno=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>什么是N+1问题的第二个例子：</p>
<p>例如，假设有一个用户（User）和多个订单（Order）的关系，如果你先查询出所有用户，然后再对每个用户查询他们的订单，那么查询的次数将是用户数量加1。</p>
<p>如果用户先查询出所有用户，然后再对每个用户查询他们的订单，那么总的查询次数将是用户数量加1。这里的“加1”指的是最初查询所有用户的那一次查询。</p>
<p>接下来，我们分析为什么总的查询次数会是用户数量加1。</p>
<ol>
<li><strong>首次查询</strong>：首先，系统会执行一次查询来获取所有的用户。这是首次查询，也是“加1”中的“1”所代表的那一次查询。</li>
<li><strong>后续查询</strong>：在获取了所有用户之后，系统需要对每个用户执行一次查询来获取他们的订单。因为用户数量是未知的，所以我们用“用户数量”来表示这部分的查询次数。</li>
</ol>
<p>将首次查询和后续查询的次数相加，就得到了总的查询次数：用户数量 + 1。</p>
<h3 id="5-3-2-一对多关联映射"><a href="#5-3-2-一对多关联映射" class="headerlink" title="5.3.2 **&lt;collection&gt;**一对多关联映射"></a>5.3.2 **&lt;collection&gt;**一对多关联映射</h3><p>1:M（一对多）关联使用<code>&lt;collection ofType=&quot;元素类型&quot; column=&quot;外键字段&quot;&gt;&lt;/collection&gt;</code>元素，要映射Many端结果到List集合中，我们使用集合元素。</p>
<p>映射集合也有两种方式：</p>
<ul>
<li><p><strong>1（推荐使用）嵌套结果</strong></p>
<p>​    <code>&lt;collection property=&quot;属性名&quot; ofType=&quot;集合元素的类型&quot; column=&quot;外键列&quot;&gt;</code></p>
<p>​    <code>&lt;/collection&gt;</code></p>
<p>​    结果映射引用了<code>EmployeeMapper.xml</code> 中的 <code>baseResultMap</code> 结果映射配置.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;departemnt&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;deptno&quot;</span>       <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;loc&quot;</span>      <span class="attr">column</span>=<span class="string">&quot;loc&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employeeList&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">ofType</span>=<span class="string">&quot;employee&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resultMap</span>=<span class="string">&quot;com.lanqiao.mapper.EmployeeMapper.baseResultMap&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>2. 嵌套查询</strong></p>
<p>通过在<code>&lt;collection&gt;&lt;/collection&gt;</code>元素上指定<code>select=&quot;查询 Many端实体的语句&quot; </code>属性，</p>
<p>该属性会使用当前实体的主键（Many端为外键）来执行另一条查询语句获取Many端实体，并将获取到的Many端实体存入集合中。</p>
<p>​    <code>&lt;collection property=&quot;属性名&quot; ofType=&quot;属性类型&quot; column=&quot;外键列&quot; select=&quot;查询 Many端实体的语句&quot;&gt;</code></p>
<p>​    <code>&lt;/collection&gt;</code></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseResultMap_2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;departemnt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;deptno&quot;</span>       <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>    <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;loc&quot;</span>      <span class="attr">column</span>=<span class="string">&quot;loc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;employeeList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">column</span>=<span class="string">&quot;deptno&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;selectEmployeeByDeptno&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByDeptno&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultMap</span>=<span class="string">&quot;com.lanqiao.mapper.EmployeeMapper.baseResultMap&quot;</span>&gt;</span></span><br><span class="line">   select *</span><br><span class="line">   from emp</span><br><span class="line">   where deptno=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>优点：编写<strong>SQL</strong>简单，无需做多表的连接查询；关联的实体通过单独的<strong>SQL</strong>语句查询并单独封装。<br> 缺点：执行了<strong>N+1</strong>条件语句。性能差</em></p>
<h2 id="5-4-通用-SQL-片段"><a href="#5-4-通用-SQL-片段" class="headerlink" title="5.4 **&lt;sql&gt;**通用 SQL 片段"></a>5.4 **&lt;sql&gt;**通用 SQL 片段</h2><p><em>通用 SQL片段</em>，可被其他语句引用的可重用语句块。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">  empno,ename,job,mgr,hiredate,sal,comm,deptno,header</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Long&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span></span><br><span class="line">    from emp</span><br><span class="line">    where  empno = #&#123;empno,jdbcType=INTEGER&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="5-5-元素"><a href="#5-5-元素" class="headerlink" title="5.5 **&lt;if&gt;**元素"></a>5.5 **&lt;if&gt;**元素</h2><p><code>&lt;if&gt;</code>元素用以根据条件判断生成动态SQL。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1.在程序里把 %JAMES% 拼好 </span></span><br><span class="line"><span class="comment">		emp.setEname(&quot;%J%&quot;);</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span></span><br><span class="line">    AND ENAME like #&#123;ename&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">	<span class="comment">&lt;!-- 2.在XML里把 % 拼好 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;enamePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + ename + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">    AND ENAME like #&#123;enamePattern&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- SQL中遇到小于号用 CDATA 元素包裹起来。大于号可以直接用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sal != null&quot;</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[ AND SAL&lt;=#&#123;sal&#125;  ]]&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- trim(#&#123;job&#125;) 是mysql的trim()函数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null and job.trim().length()&gt;0&quot;</span>&gt;</span></span><br><span class="line">    AND JOB=trim(#&#123;job&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h2 id="5-6-元素"><a href="#5-6-元素" class="headerlink" title="5.6 **&lt;choose&gt;**元素"></a>5.6 **&lt;choose&gt;**元素</h2><p>分支结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 类似 java的 switch --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span> <span class="comment">&lt;!-- java switch case --&gt;</span></span><br><span class="line">      sql语句</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span> <span class="comment">&lt;!-- java switch default --&gt;</span></span><br><span class="line">       sql语句</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="5-7-元素"><a href="#5-7-元素" class="headerlink" title="5.7**&lt;foreach&gt;**元素"></a>5.7**&lt;foreach&gt;**元素</h2><p><code> &lt;foreach&gt;</code>元素通过遍历集合来产生动态 SQL。</p>
<ul>
<li>java 代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// @Data = @Getter + @Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">//省略其它属性</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//用于查询条件的多个部门号</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; deptnoList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>xml 映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptnoList != null&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;deptno&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;deptnoList&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">open</span>=<span class="string">&quot;AND DEPTNO in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    #&#123;deptno&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-8-元素"><a href="#5-8-元素" class="headerlink" title="5.8**&lt;trim&gt;**元素"></a>5.8**&lt;trim&gt;**元素</h2><p><code>&lt;trim&gt;</code> 元素用于删除空格或删除指定字符，并添加上指定的前缀字符 和 后缀字符。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;加上前缀字符&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;加上的后缀字符&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">prefixOverrides</span>=<span class="string">&quot;被删除的前缀字符&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;被删除的后缀字符&quot;</span>&gt;</span></span><br><span class="line">   	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span>ename,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span>job,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;mgr != null&quot;</span>&gt;</span>mgr,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>示例：用来前置<code>SET</code>关键字和清除最后的逗号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update_2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">    update emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;set&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span>ENAME=#&#123;ename&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span>JOB=#&#123;job&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sal != null&quot;</span>&gt;</span>SAL=#&#123;sal&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;comm != null&quot;</span>&gt;</span>COMM=#&#123;comm&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empno != null&quot;</span>&gt;</span>EMPNO=#&#123;empno&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-9-元素、set元素"><a href="#5-9-元素、set元素" class="headerlink" title="5.9**&lt;update&gt;**元素、set元素"></a>5.9**&lt;update&gt;**元素、set元素</h2><p><code>&lt;set&gt;</code>元素会前置一个<code>SET</code>关键字，<em>同时会删除最后多余的逗号</em></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  update emp</span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span>ENAME=#&#123;ename&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span>JOB=#&#123;job&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sal != null&quot;</span>&gt;</span>SAL=#&#123;sal&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;comm != null&quot;</span>&gt;</span>COMM=#&#123;comm&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empno != null&quot;</span>&gt;</span>EMPNO=#&#123;empno&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-10-元素"><a href="#5-10-元素" class="headerlink" title="5.10**&lt;insert&gt;**元素"></a>5.10**&lt;insert&gt;**元素</h2><p>insert语句没有resultMap，默认返回整数即插入的行数.<br><em>如果某些字段允许为 null 时，安全的做法就是对这样的列做 空值处理，这不是 mybaits 需要的，而是不同数据的驱动需要。</em></p>
<ul>
<li><p><code>useGeneratedKeys=&quot;true&quot;</code> : 说明主键值由数据库生成</p>
</li>
<li><p><code>keyProperty=&quot;empno&quot; </code>: 自动生成的主键值赋给 POJO 的哪个属性</p>
</li>
<li><p><code>keyColumn=&quot;empno&quot;</code>: 自动生成主键值的列</p>
</li>
</ul>
<p><strong>示例 1：使用 JDBC null 值处理</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empno&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;empno&quot;</span>&gt;</span></span><br><span class="line">    insert into emp(ename, job, mgr, hiredate, sal, comm, deptno)</span><br><span class="line">    values (#&#123;ename&#125;,#&#123;job,jdbcType=VARCHAR&#125;,#&#123;mgr,jdbcType=INTEGER&#125;,#&#123;hiredate,jdbcType=DATE&#125;,#&#123;sal,jdbcType=DOUBLE&#125;,#&#123;comm,jdbcType=DOUBLE&#125;,#&#123;deptno,jdbcType=INTEGER&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：使用&lt;trim&gt;元素</strong></p>
<p><trim prefix="加上前缀字符" suffix="加上的后缀字符" prefixoverrides="被删除的前缀字符" suffixoverrides="被删除的后缀字符"></trim></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态 insert语句，就是说页面过来有值的字段生成SQL,无值的字段不生成SQL --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert_2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">  insert into emp(</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span>ename,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span>job,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;mgr != null&quot;</span>&gt;</span>mgr,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;hiredate != null&quot;</span>&gt;</span>hiredate,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sal != null&quot;</span>&gt;</span>sal,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;comm != null&quot;</span>&gt;</span>comm,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptno != null&quot;</span>&gt;</span>deptno,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span>)</span><br><span class="line">  values(</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != null&quot;</span>&gt;</span>#&#123;ename&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span>#&#123;job&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;mgr != null&quot;</span>&gt;</span>#&#123;mgr&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;hiredate != null&quot;</span>&gt;</span>#&#123;hiredate&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sal != null&quot;</span>&gt;</span>#&#123;sal&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;comm != null&quot;</span>&gt;</span>#&#123;comm&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptno != null&quot;</span>&gt;</span>#&#123;deptno&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span>)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="6-接口映射器"><a href="#6-接口映射器" class="headerlink" title="6. 接口映射器"></a>6. 接口映射器</h1><p>映射器接口执行SQL语句的规则：</p>
<ol>
<li><p>XML 映射文件 *.xml的名字空间(<em>namespace</em>)必须和<em>映射器接口全类名一致</em>,必须放在与映射器接口相同的包下。</p>
<p>接口映射器类全名：<code>org.glut.mybatis.mapper.EmployeeMapper</code> (名字空间)</p>
</li>
</ol>
<ul>
<li>接口映射器 Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.glut.mybatis.mapper;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> Employee <span class="title function_">selectByPrimaryKey</span><span class="params">(Integer empno)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>XML映射文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.glut.mybatis.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">      select * from emp where empno=#&#123;id&#125;</span><br><span class="line">  	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>selectByPrimaryKey(Integer empno) </code>方法名对应 *.xml中的语句ID</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPrimaryKey&quot;</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">  SQL....</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>selectByPrimaryKey(Integer empno)</code>参数类型对应SQL语句所需的参数类型</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">    SQL....</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>Employee selectByPrimaryKey(Integer empno)</code>返回值  对应 SQL语句的查询结果类型</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">    SQL....</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p><em>如果是 insert,update,delete 操作那么方法声明返回 int 类型</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(Employee parameter)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(Employee parameter)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer empno)</span>;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在<code>mybatis-config.xml</code> 配置文件中配置接口映射器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;package name=&quot;XML映射文件所在包&quot;/&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在程序中使用接口映射器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> SqlSession.getMapper(EmployeeMapper.class);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 通过EmployeeMapper接口全类名 与 EmployeeMapper.xml文件中的命名空间匹配.</span></span><br><span class="line"><span class="comment">* 调用的select() 方法其方法名“select”为 EmployeeMapper.xml文件中的语句ID.</span></span><br><span class="line"><span class="comment">* select()方法返回类型与 sql语句的查询结果匹配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> mapper.selectByPrimaryKey(<span class="number">1234</span>);</span><br></pre></td></tr></table></figure>

<h1 id="7-支持的-JDBC-类型"><a href="#7-支持的-JDBC-类型" class="headerlink" title="7.支持的 JDBC 类型"></a>7.支持的 JDBC 类型</h1><p>为了未来的参考,MyBatis 通过包含的 <em>jdbcType枚举型</em>,支持下面的 JDBC 类型。 </p>
<p><code>java.sql.Types</code>中定义的常量。</p>
<table>
<thead>
<tr>
<th><strong>BIT</strong></th>
<th><strong>FLOAT</strong></th>
<th><strong>CHAR</strong></th>
<th><strong>TIMESTAMP</strong></th>
<th>OTHER</th>
<th>UNDEFINED</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>REAL</td>
<td><strong>VARCHAR</strong></td>
<td>BINARY</td>
<td><strong>BLOG</strong></td>
<td>NVARCHAR</td>
</tr>
<tr>
<td>SMALLINT</td>
<td><strong>DOUBLE</strong></td>
<td>LONGVARCHAR</td>
<td>VARBINARY</td>
<td><strong>CLOB</strong></td>
<td>NCHAR</td>
</tr>
<tr>
<td><strong>INTEGER</strong></td>
<td><strong>NUMERIC</strong></td>
<td><strong>DATE</strong></td>
<td>LONGVARBINARY</td>
<td><strong>BOOLEAN</strong></td>
<td>NCLOB</td>
</tr>
<tr>
<td>BIGINT</td>
<td><strong>DECIMAL</strong></td>
<td>TIME</td>
<td>NULL</td>
<td>CURSOR</td>
<td>ARRAY</td>
</tr>
</tbody></table>
<h1 id="8-支持的-Java类型"><a href="#8-支持的-Java类型" class="headerlink" title="8. 支持的 Java类型"></a>8. 支持的 Java类型</h1><p>mybatis已经为许多常见的 Java 类型内建了相应的<em>类型别名</em>。它们都是大小写不敏感的，<em>需要注意的是由基本类型名称重复导致的特殊处理“带下划线”</em>。</p>
<table>
<thead>
<tr>
<th><em>别名</em></th>
<th><em>映射的Java类型</em></th>
</tr>
</thead>
<tbody><tr>
<td><strong>_byte</strong></td>
<td>byte</td>
</tr>
<tr>
<td><strong>_long</strong></td>
<td>long</td>
</tr>
<tr>
<td><strong>_short</strong></td>
<td>short</td>
</tr>
<tr>
<td><strong>_int</strong></td>
<td>int</td>
</tr>
<tr>
<td><strong>_integer</strong></td>
<td>int</td>
</tr>
<tr>
<td><strong>_double</strong></td>
<td>double</td>
</tr>
<tr>
<td><strong>_float</strong></td>
<td>float</td>
</tr>
<tr>
<td><strong>_boolean</strong></td>
<td>boolean</td>
</tr>
<tr>
<td>string</td>
<td>String</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>integer</td>
<td>Integer</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>date</td>
<td>Date</td>
</tr>
<tr>
<td>decimal</td>
<td>BigDecimal</td>
</tr>
<tr>
<td>bigdecimal</td>
<td>BigDecimal</td>
</tr>
<tr>
<td>object</td>
<td>Object</td>
</tr>
<tr>
<td>map</td>
<td>Map</td>
</tr>
<tr>
<td>hashmap</td>
<td>HashMap</td>
</tr>
<tr>
<td>list</td>
<td>List</td>
</tr>
<tr>
<td>arraylist</td>
<td>ArrayList</td>
</tr>
<tr>
<td>collection</td>
<td>Collection</td>
</tr>
<tr>
<td>iterator</td>
<td>Iterator</td>
</tr>
</tbody></table>
<h1 id="9-expr-与-expr-的区别"><a href="#9-expr-与-expr-的区别" class="headerlink" title="9. #{expr}与 ${expr} 的区别"></a>9. #{expr}与 ${expr} 的区别</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#&#123;ename&#125;: mybatis会将该表达解析成预译语句的 ？号（占位符）。JDBC中的preparedStatement的Set方法</span><br><span class="line">$&#123;ename&#125;: mybatis不将这种表达式解析成预编译语句的 ？号，而是将它直接作为值来处理。这种语法不安全会有SQL注入攻击的风险。</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> ename <span class="keyword">like</span> <span class="string">&#x27;$&#123;ename&#125;&#x27;</span>  #生成<span class="comment">--&gt; and ename like &#x27;%J%&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee <span class="keyword">order</span> <span class="keyword">by</span> $&#123;orderBy&#125;  # orderBy是 Java 里的一个属性</span><br></pre></td></tr></table></figure>



<h1 id="10-SqlSession-持久化操作"><a href="#10-SqlSession-持久化操作" class="headerlink" title="10. SqlSession 持久化操作"></a>10. SqlSession 持久化操作</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession.selectList(<span class="string">&quot;语句ID&quot;</span> [, parameter]);</span><br><span class="line">SqlSession.selectOne(<span class="string">&quot;语句ID&quot;</span> [, parameter]);</span><br><span class="line">SqlSession.insert(<span class="string">&quot;语句ID&quot;</span>, parameter);</span><br><span class="line">SqlSession.delete(<span class="string">&quot;语句ID&quot;</span>, parameter);</span><br><span class="line">SqlSession.update(<span class="string">&quot;语句ID&quot;</span>, parameter);</span><br><span class="line">T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; cls)</span>; <span class="comment">//获取接口映射器</span></span><br></pre></td></tr></table></figure>

<p>parameter 参数对象为调用 SQL语句时所需的占位符参数，一般为 POJO对象。</p>
<h1 id="11-（重要）mybatis工作流程"><a href="#11-（重要）mybatis工作流程" class="headerlink" title="11.（重要）mybatis工作流程"></a>11.（重要）mybatis工作流程</h1><ol>
<li><p>通过<code>Reader</code>对象读取<code>mybatis-config.xml</code>配置文件(该文本的位置和名字可任意)</p>
</li>
<li><p>通过<code>SqlSessionFactoryBuilder</code>对象创建<code>SqlSessionFactory</code>（类似<code>javax.sql.DataSource</code>）对象。</p>
</li>
</ol>
<p>注：如果要在应用程序中使用二级缓存那么可利用第三方的缓存（ehcache等），mybatis提供集成方案。</p>
<ol start="3">
<li>从<code>SqlSessionFactory</code>中获取<code>SqlSession</code>（封装了<code>java.sql.Connection</code>）对象，将<code>sqlSession</code>称为一级缓存。</li>
</ol>
<p><em>说明：</em></p>
<h2 id="SessionFactoryBuilder"><a href="#SessionFactoryBuilder" class="headerlink" title="SessionFactoryBuilder"></a><strong>SessionFactoryBuilder</strong></h2><p><em>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory</em>，就不再需要它了。因此 <code>SqlSessionFactoryBuilder</code> 实例的最佳作用域是方法作用域（也就是局部方法变量）。你可以重用 <code>SqlSessionFactoryBuilder</code> 来创建多个 <code>SqlSessionFactory </code>实例，但是最好还是不要让其一直存在以保证所有的 XML 解析资源开放给更重要的事情。</p>
<h2 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a><strong>SqlSessionFactory</strong></h2><p><code>SqlSessionFactory</code><em>的缓存称为：二级（全局）缓存</em></p>
<p><code>SqlSessionFactory</code> 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。使用 <code>SqlSessionFactory</code> 的最佳实践是在应用运行期间不要重复创建多次，多次重建 <code>SqlSessionFactory</code> 被视为一种代码“坏味道（bad smell）”。因此<code> SqlSessionFactory</code> 的最佳作用域是应用程序作用域级。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p>
<h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a><strong>SqlSession</strong></h2><p><code>SqlSession</code><em>的缓存称为：一级（线程级、事务级）缓存</em></p>
<p>每个线程都应该有它自己的 <code>SqlSession</code> 实例。<code>SqlSession</code> 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。绝对不能将<code> SqlSession</code> 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。也绝不能将 <code>SqlSession</code> 实例的引用放在任何类型的管理作用域中，比如 Servlet 架构中的 <code>HttpSession</code>。如果你现在正在使用一种 Web 框架，要考虑 <code>SqlSession</code> 放在一个和 HTTP 请求对象相似的作用域中。换句话说，每次收到的 HTTP 请求，就可以打开一个 <code>SqlSession</code>，返回一个响应，就关闭它。这个关闭操作是很重要的，你应该把这个关闭操作放到 finally 块中以确保每次都能执行关闭。</p>
<ol>
<li><p>事务开始，在mybatis中事务是默认开启的, 但自动提交是关闭的。</p>
</li>
<li><p>通过<code>SqlSession</code>对象读取<code>EmployeeMapper.xm</code>l映射文件中的操作语句ID，从而读取sql语句。</p>
</li>
<li><p>事务提交。</p>
<ul>
<li><p><code>sqlSession.commit() </code>： 提交事务</p>
</li>
<li><p><code>sqlSession.rollback()</code>：回滚事务</p>
</li>
</ul>
</li>
<li><p>关闭<code>SqlSession</code>对象，释放数据库连接，提高数据库连接的重用性。让mybatis能响应更多的用户请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用try-finally 结构自动关闭 SqlSession</span></span><br><span class="line"><span class="keyword">try</span> ( <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSqlSession() ) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="12-二级缓存配置"><a href="#12-二级缓存配置" class="headerlink" title="12. 二级缓存配置"></a>12. 二级缓存配置</h1><p><a href="https://blog.csdn.net/Lotus_dong/article/details/116334317">MyBatis缓存看这一篇就够了（一级缓存+二级缓存+缓存失效+缓存配置+工作模式+测试）_直接修改数据库数据会使mybatis一级缓存和二级缓存的使用场景失效吗-CSDN博客</a></p>
<p><img src="image-20240906172359473.png" alt="springboot中打开二级缓存"></p>
<p>咱们得知道，做数据<strong>查询</strong>是可以进行缓存的。注意，是查询，dml语句没办法缓存的吧？</p>
<p><strong>SqlSession</strong>级的缓存称为一级缓存、事务级缓存、线程级缓存。</p>
<p><strong>SqlSessionFactory</strong>级的缓存称为二级缓存、应用级缓存、全局缓存。Mybatis除了自身提供二级缓存的实现外，同时也提供对第三方缓存的支持，如：<em>Redis, Ehcache, Memory Cache</em>等。</p>
<h2 id="12-1-修改mybatis-config-xml"><a href="#12-1-修改mybatis-config-xml" class="headerlink" title="12.1 修改mybatis-config.xml"></a>12.1 修改mybatis-config.xml</h2><p><em>默认二级缓存是开启的</em>，如果要启用二级缓存，需要在mybatis-config.xml文件中加入下面设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!--  设置日志的实现方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个配置使全局的映射器启用或禁用二级缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="12-2-在SQL-Mapper映射文件中"><a href="#12-2-在SQL-Mapper映射文件中" class="headerlink" title="12.2 在SQL Mapper映射文件中"></a>12.2 在SQL Mapper映射文件中</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 缓存实体，此元素只对当前名字空间内的实体查询有效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;1024&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--也可让某查询不使用二经缓存，只需在&lt;selec&gt;元素中使用useCache=“true” </span></span><br><span class="line"><span class="comment">     flushCache=&quot;false&quot; </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">flushCache</span>=<span class="string">&quot;false&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    Select_statement</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><cache> 这个简单语句的效果如下:</cache></p>
<ul>
<li><p><em>映射语句文件中的所有 <code>select</code> 语句将会被缓存</em>。</p>
</li>
<li><p><em>映射语句文件中的所有 <code>insert,update</code> 和 <code>delete</code> 语句会刷新缓存</em>。</p>
</li>
<li><p>缓存会使用 Least Recently Used (LRU,最近最少使用的)算法来收回。</p>
</li>
<li><p>根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序来刷新。</p>
</li>
<li><p>缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。</p>
</li>
<li><p>缓存会被视为是 read&#x2F;write(可读&#x2F;可写)的缓存,意味着对象检索不是共享的,而且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。</p>
</li>
</ul>
<p>可用的<em>收回策略</em>(<code>eviction</code>)有： </p>
<ul>
<li><p><em>LRU –  最近最少使用的</em>：移除最长时间不被使用的对象。 </p>
</li>
<li><p><em>FIFO –  先进先出</em>：按对象进入缓存的顺序来移除它们。 </p>
</li>
<li><p><em>SOFT –  软引用</em>：移除基于垃圾回收器状态和软引用规则的对象。 </p>
</li>
<li><p><em>WEAK –  弱引用</em>：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p>
</li>
</ul>
<p><strong>默认的是</strong> LRU收回策略。</p>
<ul>
<li><p>flushInterval（刷新间隔）可以被设置为任意的正整数，而且它们代表一个合理的<strong>毫秒</strong>形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。 </p>
</li>
<li><p>size（引用数目）可以被设置为任意正整数，要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值1024。 </p>
</li>
<li><p>readOnly（只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p>
</li>
</ul>
<h2 id="12-3-实体类实现java-io-Serializable接口"><a href="#12-3-实体类实现java-io-Serializable接口" class="headerlink" title="12.3 实体类实现java.io.Serializable接口"></a>12.3 实体类实现java.io.Serializable接口</h2><p><strong>如果二级缓存想要命中实现，则必须要将上一次sqlSession commit之后才能生效</strong></p>
<p>缓存实体，只对当前名字空间内的实体查询有效。默认数据被缓存在java.io.tmpdir (JVM的一个属性)</p>
<p><strong>注意：</strong></p>
<ol>
<li><p>多表连接查询时关联实体不做缓存</p>
</li>
<li><p>mybatis的缓存是基于SQL语句id（namespace + select_id）做标识的</p>
</li>
<li><p>查询后要调用<strong>SqlSession.commit();</strong> 数据才会被缓存</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>软件技术</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring：IoC、AOP、事务</title>
    <url>/2024/08/19/spring%E6%A1%86%E6%9E%B6%EF%BC%9A%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="一、控制反转（IoC）和依赖注入（DI）"><a href="#一、控制反转（IoC）和依赖注入（DI）" class="headerlink" title="一、控制反转（IoC）和依赖注入（DI）"></a>一、控制反转（IoC）和依赖注入（DI）</h1><h2 id="1-控制反转"><a href="#1-控制反转" class="headerlink" title="1. 控制反转"></a>1. 控制反转</h2><p>　　<strong>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。</strong>在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong></p>
<ul>
<li><p>谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是<strong>程序主动去创建依赖对象</strong>；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建。</p>
<p>谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p>
<blockquote>
<p>这里提到的“外部资源”指的是IoC（Inversion of Control，控制反转）容器之外的资源。</p>
</blockquote>
</li>
<li><p>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象（new关键字），也就是正转；而反转则是由容器来帮忙创建及注入依赖对象。</p>
<p>为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p>
</li>
</ul>
<h2 id="2-依赖注入"><a href="#2-依赖注入" class="headerlink" title="2. 依赖注入"></a>2. 依赖注入</h2><h3 id="2-1-什么是依赖注入"><a href="#2-1-什么是依赖注入" class="headerlink" title="2.1 什么是依赖注入"></a>2.1 什么是依赖注入</h3><p><strong>DI—Dependency Injection，即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。<strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p>
<p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”　</p>
<ul>
<li><p>谁依赖于谁：当然是应用程序依赖于IoC容器； 　　</p>
</li>
<li><p>为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源； 　　</p>
</li>
<li><p>谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象； 　　</p>
</li>
<li><p>注入了什么：就是注入某个对象所需要的<strong>外部资源（包括对象、资源、常量数据）</strong>。</p>
<blockquote>
<p>在依赖注入（DI）的上下文中，提到的“外部资源”并不严格地指IoC（Inversion of Control，控制反转）容器之外的资源，而是相对于被注入对象而言，该对象在执行其功能时所需要但不直接创建或管理的资源。这些资源可以是其他对象、数据访问接口（如数据库连接）、文件句柄、网络资源、配置信息等，它们对于被注入对象来说是外部的，因为它们不是由该对象自身直接创建或控制的。</p>
</blockquote>
</li>
</ul>
<h3 id="2-2-依赖注入的方式"><a href="#2-2-依赖注入的方式" class="headerlink" title="2.2 依赖注入的方式"></a>2.2 依赖注入的方式</h3><ul>
<li><p><strong>构造器注入</strong></p>
<p>这个简单，就是单纯的构造方法，<code>MyDependency</code>是一个类，然后我通过<code>MyClass</code>类对<code>myDependency</code>这个对象进行初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(MyDependency myDependency)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.myDependency = myDependency;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>setter方法注入</strong></p>
<p>这个和构造器的很像，不过用的是set方法。构造器注入能确保两个对象（或者说类）具有绑定关系，而setter的偏向灵活性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> MyDependency myDependency;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyDependency</span><span class="params">(MyDependency myDependency)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.myDependency = myDependency;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>接口注入</strong></p>
<p>通过对象实现一个特定的接口来注入依赖。接口中定义了注入依赖的方法，对象通过实现该接口来接收依赖项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DependencyInjector</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">injectDependency</span><span class="params">(MyClass myClass, MyDependency myDependency)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 实际应用中，接口注入可能通过框架的特定机制来实现，而不是直接这样使用</span></span><br></pre></td></tr></table></figure>

<p>在<code>DependencyInjector</code>接口的实现类中，需要重写<code>injectDependency</code>方法，<code>injectDependency</code>方法应该包含注入对象的逻辑</p>
</li>
<li><p><strong>注解注入</strong></p>
<p>这个没什么好说的，就是<code>@autowired</code>和<code>@resource</code>这两个注解了。一个主打<code>byType</code>注入，一个主打<code>byName</code>注入。</p>
<p><strong>可以参考下文第二节：Bean的第6节。</strong></p>
</li>
</ul>
<p>可以参考的文章，我基本写的差不多了：<a href="https://blog.csdn.net/bestone0213/article/details/47424255">依赖注入和控制反转的理解，写的太好了。-CSDN博客</a></p>
<h2 id="3-循环依赖"><a href="#3-循环依赖" class="headerlink" title="3. 循环依赖"></a>3. 循环依赖</h2><p>循环依赖是bean互相引用的错误，在spring中可以通过<strong>三级缓存</strong>自动解决，但同时也存在三级缓存不能自主解决的情况。</p>
<p>官方文档写的很好，必看内容：<a href="https://springdoc.cn/revisiting-spring-s-circular-dependencies/">再谈谈 Spring 中的循环依赖 - spring 中文网 (springdoc.cn)</a>，这里就简单的写一下三级缓存机制方便速查。</p>
<h3 id="Spring框架中的三级缓存机制"><a href="#Spring框架中的三级缓存机制" class="headerlink" title="Spring框架中的三级缓存机制"></a>Spring框架中的三级缓存机制</h3><p>在Spring框架中，三级缓存机制主要用于解决单例Bean的循环依赖问题。这三级缓存分别是：</p>
<ol>
<li><strong>一级缓存（SingletonObjects）</strong>：用于存放完全初始化好的Bean实例。</li>
<li><strong>二级缓存（earlySingletonObjects）</strong>：存放的是半初始化的Bean实例，这些Bean已经完成了实例化过程，但尚未进行属性填充和初始化方法调用。</li>
<li><strong>三级缓存（singletonFactories）</strong>：存放的是能够生成Bean实例的 Lambda 表达式，这些Lambda 表达式在被调用时会返回相应的Bean实例，并且这些实例会被放入二级缓存中。</li>
</ol>
<p>在一级缓存和二级缓存中，缓存的 key 是 beanName，缓存的 value 则是一个 Bean 对象，但是在三级缓存中，缓存的 value 是一个 Lambda 表达式，通过这个 Lambda 表达式可以创建出来目标对象的一个代理对象。</p>
<p>当Spring容器在创建Bean时遇到循环依赖，它会首先尝试从一级缓存中获取Bean实例，如果获取不到，则尝试从二级缓存中获取半初始化的Bean实例。如果二级缓存中也没有，Spring会查看三级缓存中是否有对应的工厂对象，如果有，则通过工厂对象生成Bean实例，并将其放入二级缓存中，同时返回给需要的Bean进行依赖注入。</p>
<p><strong>详细的说：</strong></p>
<p>也是Bean A 和 Bean B，当 B 创建的时候发现需要 A 的时候，此时 B 需要从二级缓存或者三级缓存中拿到 A，（从二级或者三级是由Spring容器在Bean的生命周期管理中自动完成的，也就是说，B 不需要知道 A 是否需要动态代理，只知道按照一级二级三级的顺序去找，这里也就是 A 的AOP提前在了初始化之前）最终 B 初始化 完成放入一级缓存，A 再从一级缓存中拿到 B ，完成 A 的初始化，然后再将 A 放入一级缓存。</p>
<h1 id="二、Bean"><a href="#二、Bean" class="headerlink" title="二、Bean"></a>二、Bean</h1><h2 id="1-八股：bean生命周期"><a href="#1-八股：bean生命周期" class="headerlink" title="1. 八股：bean生命周期"></a>1. 八股：bean生命周期</h2><p>在上一节讲了，控制反转和依赖注入对bean的操作，那么bean是如何被创建出来，被使用，被销毁的？</p>
<p>Bean 的生命周期概括起来就是 <strong>4 个阶段</strong>：</p>
<ol>
<li>实例化（Instantiation）</li>
<li>属性赋值（Populate）</li>
<li>初始化（Initialization）</li>
<li>销毁（Destruction）</li>
</ol>
<p><img src="ac4ecbed750bc3f4df7a68f951fd9daa.jpeg"></p>
<ol>
<li>Spring对Bean 进行实例化．</li>
<li>Spring 将值和Bean的引用注入进Bean对应的属性中。</li>
<li>如果Bean 实现了<code>BeanNameAware</code> 接口， Spring 将bean 的ID 传递给<code>setBeanName()</code> 接口方法．</li>
<li>如果Bean实现了<code>BeanFactoryAware </code>接口（前置处理）， Spring 将调用<code>setBeanFactory()</code>接口方法，将BeanFactory容器实例传入．</li>
<li>如果Bean 实现了<code>ApplicationcontextAware</code> 接口 Spring 将调用<code>setApplicationContext() </code>接口方法，将应用上下文的引用传入。</li>
<li>如果Bean实现了<code>BeanPostProcessor</code> 接口Spring 将调用它们的<code>postProcessBeforeInitialization</code> 接口方法。</li>
<li>如果Bean 实现了<code>InitializingBean</code> 接口，Spring 将调用它们的<code>afterPropertiesSet()</code>接口方法． 类似地，如果Bean 使用<code>init-method </code>声明了初始化方法，该方法也会被调用。</li>
<li>如果Bean 实现了<code>BeanPostProcessor</code> 接口（后置处理）， Spring 将调用它们的<code>postPoressAfterInitilization</code>方法．</li>
<li>此时此刻Bean 已经准备就绪，可以被应用程序使用了。 它们将一直驻留在应用上下文中，直到该应用上下文补销毁。</li>
<li>如果Bean实现了<code>DisposableBean </code>接口，Spring 将调用它的<code>destroy()</code>接口方法。同样，如果Bean 使用<code>destroy-method </code>声明了销毁方法，方法也会被调用。</li>
</ol>
<p><strong>背起来困难可以看介绍：</strong></p>
<p><strong>BeanPostProcessor是什么？</strong></p>
<p><code>BeanPostProcessor</code>是Spring IOC容器给我们提供的一个扩展接口，它可以在Spring容器实例化bean之后，在执行bean的初始化方法前后，允许我们自定义修改新的bean实例，如修改bean的属性，可以给bean生成一个动态代理实例等等，Spring AOP的底层处理也是通过实现<code>BeanPostProcessor</code>来执行代理包装逻辑的。</p>
<p><strong>BeanFactoryAware接口是什么？</strong></p>
<p><code>BeanFactoryAware</code>是Spring框架中的一个接口，用于在Bean实例化后，将<code>BeanFactory</code>实例注入到Bean中。通过实现该接口，Bean可以获取到<code>BeanFactory</code>实例，从而可以在运行时动态获取其他Bean的实例。具体来说，<code>BeanFactoryAware</code>接口的作用是让Bean能够感知到所在的BeanFactory，从而可以在需要时获取其他Bean的实例。这对于需要动态获取其他Bean的实例的情况非常有用，例如在AOP中需要获取代理对象等。</p>
<p><strong>ApplicationcontextAware接口是什么？</strong></p>
<p><code>ApplicationContextAware</code>是Spring框架中的一个回调接口，它允许实现了该接口的Bean获取对<code>ApplicationContext</code>的引用。当Spring容器实例化Bean后，如果Bean实现了<code>ApplicationContextAware</code>接口，容器会自动调用该Bean的<code>setApplicationContext(ApplicationContext applicationContext)</code>方法，并将当前容器的<code>ApplicationContext</code>对象作为参数传递给这个方法。这样，Bean就可以在需要的时候访问<code>ApplicationContext</code>，进而获取容器中的其他Bean和资源。</p>
<h2 id="2-八股：BeanFactory和ApplicationContext有什么区别？"><a href="#2-八股：BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="2. 八股：BeanFactory和ApplicationContext有什么区别？"></a>2. 八股：BeanFactory和ApplicationContext有什么区别？</h2><p><strong>BeanFactory 可以理解为含有bean集合的工厂类。</strong>BeanFactory 包含了种bean的定义，以便在接收到客户端请求时将对应的bean实例化。</p>
<p>BeanFactory还能在实例化对象的时生成协作类之间的关系。此举将bean自身与bean客户端的配置中解放出来。BeanFactory还包含了bean生命周期的控制，调用客户端的初始化方法（initialization methods）和销毁方法（destruction methods）。</p>
<p><strong>ApplicationContext是BeanFactory的子接口</strong>。application context如同bean factory一样具有bean定义、bean关联关系的设置，根据请求分发bean的功能。但application context在此基础上还提供了其他的功能:</p>
<ul>
<li><p>提供了支持国际化的文本消息</p>
</li>
<li><p>统一的资源文件读取方式</p>
</li>
<li><p>已在监听器中注册的bean的事件</p>
</li>
</ul>
<h2 id="3-八股：解释Spring支持的几种bean的作用域。"><a href="#3-八股：解释Spring支持的几种bean的作用域。" class="headerlink" title="3. 八股：解释Spring支持的几种bean的作用域。"></a>3. 八股：解释Spring支持的几种bean的作用域。</h2><p>Spring容器中的bean可以分为5个范围：</p>
<ol>
<li><p>singleton：默认，每个容器中只有一个bean的实例，单例的模式由BeanFactory自身来维护。</p>
</li>
<li><p>prototype：为每一个bean请求提供一个实例。</p>
</li>
<li><p>request：为每一个网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收。</p>
</li>
<li><p>session：与request范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效。</p>
</li>
<li><p>global-session：全局作用域，global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。全局作用域与Servlet中的session作用域效果相同。</p>
</li>
</ol>
<blockquote>
<p><strong>什么是portlet？</strong></p>
</blockquote>
<p>还记得我们学web应用和servlet容器吧？最常用的就是tomcat，类似的github上开源的基础框架可能还有undertow、jetty</p>
<p>Portlet容器不是一个类似于Servlet容器的独立容器，而是作为Servlet容器之上的一个薄层进行实现，并重复使用Servlet容器所提供的功能。</p>
<p>Portlet是可再用的Web模块，被设计成在门户网站的环境中运行。它们通过portlet容器进行管理，并由容器处理请求，生成动态内容。</p>
<h2 id="4-八股：Spring框架中的单例Beans是线程安全的么？"><a href="#4-八股：Spring框架中的单例Beans是线程安全的么？" class="headerlink" title="4. 八股：Spring框架中的单例Beans是线程安全的么？"></a>4. 八股：Spring框架中的单例Beans是线程安全的么？</h2><p>Spring框架并没有对单例bean进行任何多线程的封装处理。关于单例bean的线程安全和并发问题需要开发者自行去搞定。但实际上，大部分的Spring bean并没有可变的状态(比如Serview类和DAO类)，所以在某种程度上说Spring的单例bean是线程安全的。如果你的bean有多种状态的话（比如 View Model 对象），就需要自行保证线程安全。最浅显的解决办法就是将多态bean的作用域由“singleton”变更为“prototype”。</p>
<h2 id="5-八股：bean自动装配的规则"><a href="#5-八股：bean自动装配的规则" class="headerlink" title="5. 八股：bean自动装配的规则"></a>5. 八股：bean自动装配的规则</h2><p>Spring框架中的自动装配提供了四种主要类型，它们分别是：</p>
<ol>
<li>byName<ul>
<li><strong>工作原理</strong>：在IoC容器中寻找与Bean的属性名相同的id（或name）对应的Bean，并自动装配到该Bean的属性上。</li>
<li><strong>特殊情况</strong>：如果找不到与属性名相匹配的Bean，则该属性将不会被装配。</li>
<li><strong>示例</strong>：假设有一个Bean的某个属性名为<code>customerDao</code>，Spring会在IoC容器中查找id或name为<code>customerDao</code>的Bean，并将其装配到该属性上。</li>
</ul>
</li>
<li>byType<ul>
<li><strong>工作原理</strong>：在IoC容器中寻找与Bean的属性类型相同的Bean，并自动装配到该Bean的属性上。</li>
<li><strong>特殊情况</strong><ul>
<li>如果没有找到与属性类型相匹配的Bean，则该属性将不会被装配。</li>
<li>如果找到多个与属性类型相匹配的Bean，则会抛出异常（如<code>UnsatisfiedDependencyException</code>），指出不能使用byType方式进行自动装配。</li>
</ul>
</li>
<li><strong>示例</strong>：如果有一个Bean的属性类型为<code>CustomerDao</code>，Spring会在IoC容器中查找类型为<code>CustomerDao</code>的Bean，并将其装配到该属性上。</li>
</ul>
</li>
<li>constructor<ul>
<li><strong>工作原理</strong>：在IoC容器中寻找与Bean的构造器参数类型相匹配的Bean，并自动装配到构造器的对应参数上。</li>
<li><strong>特殊情况</strong><ul>
<li>如果存在不确定的Bean或构造方法，容器会抛出异常（如<code>UnsatisfiedDependencyException</code>）。</li>
<li>这种方式通常要求Bean只有一个构造方法，或者至少有一个构造方法的参数可以通过自动装配解决。</li>
</ul>
</li>
<li><strong>示例</strong>：如果有一个Bean的构造器接受一个<code>CustomerDao</code>类型的参数，Spring会在IoC容器中查找类型为<code>CustomerDao</code>的Bean，并将其作为参数传递给该构造器。</li>
</ul>
</li>
<li>autodetect<ul>
<li><strong>工作原理</strong>：这是一种自动检测的模式，它首先尝试使用constructor方式进行自动装配，如果失败（如没有找到匹配的构造方法或构造方法参数无法自动装配），则再尝试使用byType方式进行自动装配。</li>
<li><strong>特殊情况</strong>：其不确定性处理与constructor和byType方式相同。</li>
<li><strong>示例</strong>：Spring会首先尝试通过构造方法自动装配Bean，如果失败，则会尝试通过类型自动装配Bean的属性。</li>
</ul>
</li>
</ol>
<h2 id="6-八股：-autowired和-resource的区别"><a href="#6-八股：-autowired和-resource的区别" class="headerlink" title="6. 八股：@autowired和@resource的区别"></a>6. 八股：@autowired和@resource的区别</h2><p><code>@autowired</code>和<code>@resource</code>注解，一个主打<code>byType</code>注入，一个主打<code>byName</code>注入。</p>
<p>如果<code>@autowired</code>想要走<code>byName</code>，那么可以结合<code>@qualifier</code>注解。</p>
<p><code>@resource</code>如果<code>byName</code>失败，会自动走<code>byType</code>。</p>
<h1 id="三、八股重点：Spring-AOP"><a href="#三、八股重点：Spring-AOP" class="headerlink" title="三、八股重点：Spring AOP"></a>三、八股重点：Spring AOP</h1><h2 id="1-什么是AOP"><a href="#1-什么是AOP" class="headerlink" title="1. 什么是AOP"></a>1. 什么是AOP</h2><p><img src="Snipaste_2024-08-20_02-33-23.png" alt="什么是AOP"></p>
<p>在图中的场景可以说是一个入门的场景：现在想要统计一个方法的执行时间，那么可以使用system类提供的currentTimeMillis() 方法进行统计。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.调用方法记录方法运行前的时间戳</span></span><br><span class="line"><span class="type">long</span> <span class="variable">before</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 2.调用被测的方法</span></span><br><span class="line">List&lt;Dept&gt; list = deptMapper.list();</span><br><span class="line"><span class="comment">// 3.调用方法记录方法运行后的时间戳</span></span><br><span class="line"><span class="type">long</span> <span class="variable">after</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.打印运行时间</span></span><br><span class="line">System.out.PrintIn(after - before);</span><br></pre></td></tr></table></figure>

<p>可以看到这样非常麻烦。如果要测试的方法多起来，难不成还要在每个方法前后都这么写？</p>
<p>其实在Java基础的时候，我们是学过的<strong>动态代理</strong>可以解决这个问题。<strong>动态代理可以无代码入侵的让对象的方法进行功能性增强。</strong>而AOP的思想底层也就是根据动态代理来实现。</p>
<blockquote>
<p>动态代理主要分为两种：</p>
<ol>
<li><strong>基于接口的动态代理</strong>：Java的动态代理机制是基于接口的。它使用<code>java.lang.reflect.Proxy</code>类和<code>java.lang.reflect.InvocationHandler</code>接口来创建代理对象。在这种方式下，代理类需要实现和原始类相同的接口。</li>
<li><strong>基于继承的动态代理</strong>：这种方式使用<code>CGLIB</code>库来实现。<code>CGLIB</code>是一个强大的、高性能的代码生成库，用于扩展Java类和实现Java接口。基于继承的动态代理是通过继承原始类来创建代理对象的，因此不需要原始类实现接口。</li>
</ol>
</blockquote>
<p><strong>现在正式的介绍什么是AOP：</strong></p>
<p>AOP直译过来就是 <strong>面向切面编程</strong>，AOP 是一种编程思想，是面向对象编程（OOP）的一种补充。AOP可以拦截指定的方法并且对方法增强，而且无需侵入到业务代码中，使业务与非业务处理逻辑分离，比如Spring的事务，通过事务的注解配置，Spring会自动在业务方法中开启、提交业务，并且在业务处理失败时，执行相应的回滚策略。</p>
<h2 id="2-Spring-AOP中的重要概念"><a href="#2-Spring-AOP中的重要概念" class="headerlink" title="2. Spring AOP中的重要概念"></a>2. Spring AOP中的重要概念</h2><p><img src="%E5%9B%BE%E7%89%871.png"></p>
<p><strong>直接看我在下面写的文字：</strong></p>
<ul>
<li><p><strong>连接点：</strong>JoinPoint。指的是可以被AOP控制的方法，图中<code>list()</code>，<code>delete()</code>，<code>save()</code>方法都是连接点。<strong>同时也是潜在的切入点，</strong>是否成为真正的切入点由切入点表达式决定。</p>
</li>
<li><p><strong>通知：</strong>在图中，<code>recordTime</code>方法以及实现逻辑就是通知。<strong>通知的处理重复的代码逻辑，增强对象的方法的功能的部分。</strong></p>
</li>
<li><p><strong>切入点：</strong>PointCut。匹配连接点的条件，也是一组连接点，实际上是真正被AOP控制的方法。<strong>切入点的条件由切入点表达式决定。</strong></p>
</li>
<li><p><strong>切入点表达式：</strong>图中的<code>execution(* com.itheima.service.impl.DeptServiceImpl.list()) </code>这段代码就是切入点表达式。</p>
<p>这个代码表示，在匹配<code>com.itheima.service.impl</code>包下的<code>DeptServiceImpl</code>类的<code>list()</code>方法。</p>
</li>
<li><p><strong>切面：</strong>通知+切入点。通常使用<code>@Aspect</code>注解标识，当前类是一个切面类。</p>
</li>
<li><p><strong>目标对象：</strong>Target，通知所应用的对象。图中<code>DeptServiceImpl</code>是目标对象。</p>
</li>
</ul>
<h2 id="3-AOP执行流程"><a href="#3-AOP执行流程" class="headerlink" title="3. AOP执行流程"></a>3. AOP执行流程</h2><p><img src="Snipaste_2024-08-20_03-24-33.png"></p>
<p>在一开始的切面类<code>TimeAspect</code>和目标对象<code>DeptServiceImpl</code>类中，是我们书写的代码逻辑。AOP在执行过程中，会生成<code>DeptServiceImpl</code>的动态代理类<code>DeptServicePorxy</code>。AOP中的调用原始方法（<code>joinPoint.proceed()</code>在下文介绍）的方法，将在代理对象中换成真正原始方法，并且将生成的代理对象注入到实例中。</p>
<p><strong>我们再来讨论一个细节，还记得循环依赖中，三级缓存为什么存在吗？</strong></p>
<p>也是这篇博客的内容：<a href="https://springdoc.cn/revisiting-spring-s-circular-dependencies/">再谈谈 Spring 中的循环依赖 - spring 中文网 (springdoc.cn)</a>。</p>
<p>在进行AOP代理的时候，为了防止注入的是非代理的对象，所以才有的三级缓存。</p>
<p><img src="Snipaste_2024-08-21_17-16-20.png" alt="spring的第三级缓存" style="zoom:150%;">这里不仅介绍了为什么需要三级缓存，还介绍了AOP与创建bean的流程。</p>
<p><strong>那么AOP和三级缓存涉及到bean的什么生命周期？</strong></p>
<p>AOP主要涉及Bean生命周期的<strong>初始化</strong>阶段。</p>
<p>还记得<code>BeanPostProcessor</code>吗？我们在第二节的生命周期提到过，<code>BeanPostProcessor</code>是Spring IOC容器给我们提供的一个扩展接口，它可以在Spring容器实例化bean之后，在执行bean的初始化方法前后，允许我们自定义修改新的bean实例，如修改bean的属性，可以给bean生成一个动态代理实例等等，Spring AOP的底层处理也是通过实现<code>BeanPostProcessor</code>来执行代理包装逻辑的。</p>
<p>在Bean完成属性赋值后，但在Bean被正式使用之前，Spring会检查Bean是否需要进行AOP增强。如果需要，Spring会创建Bean的代理对象，并将代理对象放入容器中，而不是原始的Bean对象。这个代理对象会在Bean被调用时执行相应的增强逻辑。</p>
<p><strong>八股：织入的时机有哪些？</strong></p>
<p>在AOP中，<strong>将切面应用到目标对象来创建新的代理对象的过程称为织入（Waving）。</strong></p>
<ol>
<li><p>编译期——切面在目标类编译时被织入。</p>
</li>
<li><p>类加载期——切面在目标类加载到JVM时被织入，这种方式需要特殊的类加载器，可以在目标类被引入应用之前增强该目标类的字节。</p>
</li>
<li><p>运行期——切面在应用运行的某个时刻被织入，一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个代表对象。</p>
</li>
</ol>
<h2 id="4-通知类型"><a href="#4-通知类型" class="headerlink" title="4. 通知类型"></a>4. 通知类型</h2><p>通知类型指定在切入点表达式，用于表示代理的逻辑运行时机。</p>
<p><img src="%E5%9B%BE%E7%89%872.png" alt="通知类型"></p>
<p>现在对<code>@Around</code>这个注解再来进行介绍，还是这张图：</p>
<p><img src="%E5%9B%BE%E7%89%871.png" alt="介绍@around"></p>
<p>我们可以看到，之前这个案例是使用<code>@Around</code>注解的。</p>
<p>在原始方法执行之前一段逻辑，原始方法后又执行一段逻辑，<strong>那么如何调用原始方法？</strong></p>
<ul>
<li><p>我们需要使用<code>ProceedingJoinPoint</code>类提供的<code>proceed()</code>方法，可以调用原始方法。调用原始方法可能会出现异常，直接在方法上抛。</p>
<blockquote>
<p><code>ProceedingJoinPoint</code>类下文介绍更详细的内容，可以看第6节。</p>
</blockquote>
</li>
<li><p>方法具备返回值且是<code>Object</code>类型的，如果方法最后不 return ，方法是拿不到返回值的。所以<code>recordTime</code>方法的返回值类型是<code>Object</code>类型的这个你发现了吗？</p>
</li>
</ul>
<p>ok，我们到下一个模块的内容。</p>
<p>如果<code>TimeAspect</code>类中，有多个<code>recordTime</code>方法，比如<code>recordTime1</code>，<code>recordTime2</code>，那么每个方法都需要写切入点表达式是不是很麻烦？</p>
<p>yes，其实还是有改进方式的，那就是<code>PointCut</code>注解。</p>
<p><img src="%E5%9B%BE%E7%89%873.png" alt="pointcut注解">拿一个具体的代码看看：</p>
<p><img src="Snipaste_2024-08-20_03-44-37.png" alt="举个例子"></p>
<p>OK，下一个模块。</p>
<p>如果多个切面的切入点都匹配到了目标方法，可以使用<code>@Order</code>注解指定顺序。</p>
<p><img src="Snipaste_2024-08-20_03-47-44.png" alt="通知顺序"></p>
<h2 id="5-切入点表达式"><a href="#5-切入点表达式" class="headerlink" title="5. 切入点表达式"></a>5. 切入点表达式</h2><p>切入点表达式除了刚刚演示的<code>execution</code>，还有基于注解的<code>@annotation</code>。</p>
<p><img src="Snipaste_2024-08-20_10-05-07.png"></p>
<p><code>execution</code>这里就不多介绍了，直接看图</p>
<p><img src="Snipaste_2024-08-20_10-08-50.png"></p>
<p>这里主要介绍<code>@annotation</code>的方式。</p>
<p>首先肯定需要有一个注解类型的类啦，Java中使用的是<code>@interface</code>表示一个类为注解类，就相当于<code>interface</code>表示接口，<code>class</code>表示类一样。</p>
<p><img src="%E6%B3%A8%E8%A7%A3.png"></p>
<p>之后在想要生效的方法上加上这个注解的类名就可以生效切入点表达式。</p>
<p><img src="%E6%B3%A8%E8%A7%A32.png"></p>
<p><img src="%E6%B3%A8%E8%A7%A33.png"></p>
<h2 id="6-连接点"><a href="#6-连接点" class="headerlink" title="6. 连接点"></a>6. 连接点</h2><p><img src="Snipaste_2024-08-20_10-14-35.png"></p>
<p><code>ProceedingJoinPoint</code>类和<code>JoinPoint</code>类获取原始方法取决于通知类型。</p>
<p>除了获取原始方法，还有一些其他的api，可以大致看一下：</p>
<p><img src="%E5%9B%BE%E7%89%874.png"></p>
<h2 id="7-八股：Spring-AOP和AspectJ-AOP有什么区别？"><a href="#7-八股：Spring-AOP和AspectJ-AOP有什么区别？" class="headerlink" title="7. 八股：Spring AOP和AspectJ AOP有什么区别？"></a>7. 八股：Spring AOP和AspectJ AOP有什么区别？</h2><p> Spring AOP是属于运行时增强，而AspectJ是编译时增强。Spring AOP基于代理（Proxying），而 AspectJ基于字节码操作（Bytecode Manipulation）。 Spring AOP已经集成了AspectJ，AspectJ应该算得上是Java生态系统中最完整的AOP框架了。 AspectJ相比于Spring AOP功能更加强大，但是Spring AOP相对来说更简单。 如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择AspectJ，它比 SpringAOP快很多。</p>
<h1 id="四、事务"><a href="#四、事务" class="headerlink" title="四、事务"></a>四、事务</h1><h2 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1. 事务隔离级别"></a>1. 事务隔离级别</h2><p>这个必须知道的，附上一篇博客参考：<a href="https://blog.csdn.net/justlpf/article/details/106835122">MySQL 四种事务隔离级别详解介绍_mysql中的四种事务隔离级别是什么-CSDN博客</a></p>
<h2 id="2-事务传播级别"><a href="#2-事务传播级别" class="headerlink" title="2. 事务传播级别"></a>2. 事务传播级别</h2><p>Spring事务的传播行为说的是，当多个事务同时存在的时候，Spring如何处理这些事务的行为。</p>
<ol>
<li><p>PROPAGATION_REQUIRED – 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</p>
</li>
<li><p>PROPAGATION_SUPPORTS – 支持当前事务，如果当前没有事务，就以非事务方式执行。</p>
</li>
<li><p>PROPAGATION_MANDATORY – 支持当前事务，如果当前没有事务，就抛出异常。</p>
</li>
<li><p>PROPAGATION_REQUIRES_NEW – 新建事务，如果当前存在事务，把当前事务挂起。</p>
</li>
<li><p>PROPAGATION_NOT_SUPPORTED – 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p>
</li>
<li><p>PROPAGATION_NEVER – 以非事务方式执行，如果当前存在事务，则抛出异常。</p>
</li>
<li><p>PROPAGATION_NESTED – 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED类似的操作。</p>
</li>
</ol>
<p>备注：常用的两个事务传播属性是1和4，即PROPAGATION_REQUIRED，PROPAGATION_REQUIRES_NEW</p>
<h2 id="3-事务种类"><a href="#3-事务种类" class="headerlink" title="3. 事务种类"></a>3. 事务种类</h2><p>Spring支持<strong>编程式事务管理和声明式事务</strong>管理两种方式：</p>
<p>a) 编程式事务管理使用<code>TransactionTemplate</code>。</p>
<p>b) 声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。</p>
<p>声明式事务最大的优点就是不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明或通过<code>@Transactional</code>注解的方式，便可以将事务规则应用到业务逻辑中。</p>
<h2 id="4-Spring事务三要素"><a href="#4-Spring事务三要素" class="headerlink" title="4. Spring事务三要素"></a>4. Spring事务三要素</h2><ol>
<li>数据源：表示具体的事务性资源，是事务的真正处理者，如MySQL等。</li>
<li>事务管理器：像一个大管家，从整体上管理事务的处理过程，如打开、提交、回滚等。</li>
<li>事务应用和属性配置：像一个标识符，表明哪些方法要参与事务，如何参与事务，以及一些相关属性如隔离级别、超时时间等。</li>
</ol>
]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个博客？本站搭建博客花费了多少精力？</title>
    <url>/2024/07/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%9F%E6%9C%AC%E7%AB%99%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%8A%B1%E8%B4%B9%E4%BA%86%E5%A4%9A%E5%B0%91%E7%B2%BE%E5%8A%9B%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="哇塞-终于费劲心思把这个博客建好了"><a href="#哇塞-终于费劲心思把这个博客建好了" class="headerlink" title="哇塞~终于费劲心思把这个博客建好了"></a>哇塞~终于费劲心思把这个博客建好了</h1><p>哇塞~终于费劲心思把这个博客建好了，我要写一篇博客记录这个过程以及如何实现的。</p>
<p>本博客基于hexo搭建起来，起因也是我专业的朋友给我推送了这个视频，晚上睡不着觉突然又刷到了，于是第二天就开始马上着手准备~</p>
<h1 id="1-hexo"><a href="#1-hexo" class="headerlink" title="1.hexo"></a>1.hexo</h1><p>众所周知搭建一个博客的有hexo，以及其他我不用的框架，使用博客框架搭建起来非常快，而不是需要真的说去写一个前后端来实现，对非计算机专业的同学要求也不是那么高（如果你需要实现主题样式那就很高了），所以hexo真的是十分的nice啊~</p>
<p>不过需要去另外会用git，安装nodeJS，直接给它拿下</p>
<p><img src="1.png"></p>
<p><img src="Snipaste_2024-07-14_17-18-28.png"></p>
<p>当初按照下来的步骤很简单，不过在git上确实有问题，有时候<code>git bash命令</code>下载失败，有时候<code>npm命令</code>查找不到，单单装hexo下来就费劲了很多脑子~</p>
<p>仔细一想nodeJs我已经用nvm做版本管理了，才记得把hexo生成的文件夹扔到nvm下才生效，又花费了一点时间</p>
<p><img src="Snipaste_2024-07-14_17-15-03.png"></p>
<p>ok，咱也是直接拿下</p>
<p><img src="Snipaste_2024-07-14_17-20-01.png"></p>
<h1 id="2-主题样式"><a href="#2-主题样式" class="headerlink" title="2.主题样式"></a>2.主题样式</h1><p>接下来访问本地hexo成功以后就是选择主题了，hexo官方截止2024年7月14日有407个主题，每隔一段时间都会有开发者将自己的主题扔上去</p>
<p><img src="Snipaste_2024-07-14_17-23-07.png"></p>
<p><img src="Snipaste_2024-07-14_17-24-22.png"></p>
<p>最终我选择了当前的solitude主题，看上去比较符合我的要求，就这个了</p>
<p><img src="Snipaste_2024-07-14_17-25-15.png"></p>
<p>接下来也就是用git把代码拉到本地就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-theme-solitude</span><br></pre></td></tr></table></figure>

<p><img src="Snipaste_2024-07-14_17-26-00.png"></p>
<p>下载下来了以后其实和你现在看到的我的博客大差不差了，主要是需要逐步的添加功能</p>
<h1 id="3-评论区如何实现"><a href="#3-评论区如何实现" class="headerlink" title="3.评论区如何实现"></a>3.评论区如何实现</h1><p>博客的留言板是需要配置界面的，可以看文档手册；最主要的是如何实现帖子的评论区，实现以后留言板用同一个就好</p>
<p><img src="Snipaste_2024-07-14_17-29-48.png"></p>
<p><img src="Snipaste_2024-07-14_17-32-24.png"></p>
<p>在文档中，提供了多个实现评论区的方式</p>
<p><img src="Snipaste_2024-07-14_17-33-31.png"></p>
<p>我用的是vercel + twikoo。twikoo有个很优秀的地方，就是输入qq邮箱可以获取到本人的qq信息，也可以评论后有回复的信息通过qq邮箱发送，就和B站抖音一样，也可以配置反垃圾处理等等功能十分优秀；vercel作为云部署的后端部分，加上<strong>MongoDB</strong>存储数据即可。</p>
<p><img src="Snipaste_2024-07-14_17-36-14.png"></p>
<p>不过缺点就是vercel和MongoDB的网站确实很难进，取决于你科学上网的实力了，不好的魔法开了也很费时间</p>
<p><img src="Snipaste_2024-07-14_17-38-27.png"></p>
<p><img src="Snipaste_2024-07-14_17-39-17.png"></p>
<p>此时还有一个最大的问题就是vercel是被墙了的，需要科学上网，不然进去非常慢，此时教程有说使用一个个人域名替换他就快很多，就是图中domains的地方</p>
<h1 id="4-购买域名"><a href="#4-购买域名" class="headerlink" title="4.购买域名"></a>4.购买域名</h1><p>这个就比较简单，华为云，腾讯云，阿里云都提供了购买域名的途径，而且一年下来10+块钱就可以了，比如说本站的域名在阿里云已经被我注册了。</p>
<p><strong>不过购买域名需要实名等等个人信息核查，最长需要一天，</strong>其他没什么问题。</p>
<p><img src="Snipaste_2024-07-14_17-43-58.png"></p>
<p>随便挑一个，然后把vercel里面的域名换掉就行了</p>
<p><img src="Snipaste_2024-07-14_17-45-08.png"></p>
<p>OK，在主题的yaml文件打开评论区就实现了</p>
<h1 id="5-博客ai"><a href="#5-博客ai" class="headerlink" title="5.博客ai"></a>5.博客ai</h1><p>这个主题可以使用的ai有两个，这个弄起来也比较简单，跟着弄就可以了，没啥难度</p>
<p><img src="Snipaste_2024-07-14_17-46-15.png"></p>
<p>postai一个月18！！！！！！！钱包好痛</p>
<p><img src="Snipaste_2024-07-14_17-50-52.png"></p>
<p>博客的聊天机器人和摘要ai都可以用了</p>
<p><img src="Snipaste_2024-07-14_17-51-45.png"></p>
<p><img src="Snipaste_2024-07-14_17-52-02.png"></p>
<h1 id="6-页面图片"><a href="#6-页面图片" class="headerlink" title="6.页面图片"></a>6.页面图片</h1><p>一开始我是打算用阿里云OSS的，不过免费的容量很小，果断放弃；</p>
<p><img src="Snipaste_2024-07-14_17-54-24.png"></p>
<p>再来打算使用图床，麻烦，放弃，反正我不用</p>
<p><img src="Snipaste_2024-07-14_17-57-00.png"></p>
<p>存本地，简单实用（其实一开始不确定可不可以存本地）</p>
<p><img src="Snipaste_2024-07-14_17-56-26.png"></p>
<p>有些图片也不是存本地的，其实可以去网页偷一下，比如mbti的那个，仔细一看连接是16人格官网的，看了他们的源代码也是部署到公网上，那么自然也可以直接引用他们的</p>
<p><img src="Snipaste_2024-07-14_18-00-01.png"></p>
<p>偷，都可以偷</p>
<p><img src="Snipaste_2024-07-14_18-02-18.png"></p>
<h1 id="7-矢量图标库"><a href="#7-矢量图标库" class="headerlink" title="7.矢量图标库"></a>7.矢量图标库</h1><p>你不得不说阿里巴巴矢量图标库很好用，这些都是从里面下的。下载得到的图片可以是svg格式的，你也可以换jpg&#x2F;png</p>
<p><img src="Snipaste_2024-07-14_18-05-26.png"></p>
<p>我特别喜欢影视飓风，干脆把他们公司的口号搜一下也有</p>
<p><img src="Snipaste_2024-07-14_18-06-01.png"></p>
<p>svg格式的图片有一个效果，就是图片的背景可以跟随主题背景变化</p>
<p><img src="Snipaste_2024-07-14_18-11-31.png"></p>
<p><img src="Snipaste_2024-07-14_18-11-51.png"></p>
<p><img src="2.png"></p>
<h1 id="8-公网访问"><a href="#8-公网访问" class="headerlink" title="8.公网访问"></a>8.公网访问</h1><p>在hexo下载到本地后，只能部署到本地，但是为了让大家都能访问得到需要放到公网上，因此围绕这个的实践就此展开….</p>
<h2 id="8-1-云服务器"><a href="#8-1-云服务器" class="headerlink" title="8.1 云服务器"></a>8.1 云服务器</h2><p>云服务器就是一台云端的服务器，可以在华为云、腾讯云、阿里云中购买，这个服务器具备公网ip，大家是可以访问到的。</p>
<p>以我的为例，我在阿里云免费试用了三个月，什么都好，就是我用不惯，部署一个博客有种大炮打蚊子的感觉</p>
<p><img src="Snipaste_2024-07-14_18-16-49.png"></p>
<p>而且，当时公网ip我还没有配置域名，泄露了一下就DDoS了（俗称恶意访问ip，访问量超过限制）</p>
<p><img src="DDoS.png"></p>
<p>在finalshell里面配置nginx等也非常麻烦，改一次就弄一次，上传文件也要挺久的，不推荐</p>
<p><img src="Snipaste_2024-07-14_18-20-59.png"></p>
<h2 id="8-2-githubpage"><a href="#8-2-githubpage" class="headerlink" title="8.2 githubpage"></a>8.2 githubpage</h2><p>这个真福音，但是也是真的慢。githubpage面向静态页面的功能，专门为部署博客这种静态页面而设计。但是众所周知，github是被墙的，所以部署到github上直接访问io文件特别慢，我自己进都半天。gitee原本是有这个功能的，但是现在封了，另选方法。</p>
<p><img src="Snipaste_2024-07-14_18-23-57.png"></p>
<h2 id="8-3-改用vercel部署"><a href="#8-3-改用vercel部署" class="headerlink" title="8.3 改用vercel部署"></a>8.3 改用vercel部署</h2><p>这个可行度取决于科学上网的实力。</p>
<p><img src="Snipaste_2024-07-14_18-27-26.png"></p>
<p>不过我用这个的时候版本问题搞得我头大，有时候我都推送上来了但是都不更新这个版本。</p>
<p><img src="Cache_7fd171c3712b5284.jpg" alt="版本问题"></p>
<p><img src="Snipaste_2024-07-14_18-30-43.png" alt="取消vercel对域名的映射"></p>
<p>使用vercel我的弹幕不能用，很奇怪</p>
<h2 id="8-4-cdn加速"><a href="#8-4-cdn加速" class="headerlink" title="8.4 cdn加速"></a>8.4 cdn加速</h2><p>cdn，context distributed network，内容分发网络，说白了就是就近访问cdn节点，不需要跨一系列的计算机网络到达提供服务的服务器，理论上可行的</p>
<p>但是阿里云这个需要icp备案，要求云产品下面需要有实例（比如买了一个云服务器），劝退我了</p>
<p><img src="Snipaste_2024-07-14_18-35-09.png" alt="ICP备案"></p>
<p>第二个就是用cloudflare给的dns服务器，亲测只能说拉了依托大的。免费版的链接换进阿里云了以后花了两天都没给他换完，进行测速的时候基本上占比进展特别慢，而且多次搞这个还让我一个域名报废了，重定向次数过多。</p>
<p><img src="Snipaste_2024-07-14_18-38-06.png"></p>
<h2 id="8-5-4everland"><a href="#8-5-4everland" class="headerlink" title="8.5 4everland"></a>8.5 4everland</h2><p>在掘金看到的一篇博客：<a href="https://juejin.cn/post/7009209925024874526?enable_transcoding_confirm=true">忘了缓慢的GithubPage，免费加速你的Hexo静态博客吧 - 掘金 (juejin.cn)</a></p>
<p><img src="Snipaste_2024-07-14_18-42-54.png"></p>
<p>最近，使用这个部署的速度变得非常慢，我就用回vercel了，但是vercel还是那样，弹幕没办法用</p>
<h1 id="9-来访者api"><a href="#9-来访者api" class="headerlink" title="9.来访者api"></a>9.来访者api</h1><p>这个定位的功能用一个博主的api，可以直接定位所在地或者ip，不知道准不准确。不过不需要害怕暴露ip，真正定位的是MAC地址而非是你的ip，下次切个网啥的就换掉了~</p>
<p><img src="Snipaste_2024-07-14_18-43-49.png"></p>
<h1 id="至最后"><a href="#至最后" class="headerlink" title="至最后"></a>至最后</h1><p>搭建出来确实累，不过可以有一个记录的地方啦，就当做个人的qq空间或者朋友圈吧~博客的最后至看到这里的每位朋友，正如本站的介绍：</p>
<p><strong>这里与大多数垂直类的技术博客不同，这里的种类会非常的繁杂，有技能的教程干货、有生活上的吐槽和妙招、有话题上的思考和想法。一般我研究什么、发现了什么都会分享在这里。</strong><br><strong>这些就是创造这个小站的本意，也是我分享生活的方式。有幸能和你相遇在这里，相信我们能共同留下一段美好记忆~</strong></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>软件技术</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统：（一）快速学习存储器</title>
    <url>/2024/07/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0%E5%AD%98%E5%82%A8%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、CPU"><a href="#一、CPU" class="headerlink" title="一、CPU"></a>一、CPU</h2><h3 id="1、冯诺依曼模型"><a href="#1、冯诺依曼模型" class="headerlink" title="1、冯诺依曼模型"></a>1、冯诺依曼模型</h3><p>在 1945 年冯诺依曼和其他计算机科学家们提出了计算机具体实现的报告，其遵循了图灵机的设计，而且还提出用电子元件构造计算机，并约定了用二进制进行计算和存储。</p>
<p>最重要的是定义计算机基本结构为 5 个部分，分别是<strong>运算器、控制器、存储器、输入设备、输出设备</strong>，这 5 个部分也被称为<strong>冯诺依曼模型</strong>。</p>
<p><img src="Von_Neumann_architecture.svg"></p>
<p><strong>运算器、控制器是在中央处理器（CPU）里的，存储器就我们常见的内存，输入输出设备则是计算机外接的设备，</strong>比如键盘就是输入设备，显示器就是输出设备。</p>
<p>存储单元和输入输出设备要与中央处理器打交道的话，离不开总线。所以，它们之间的关系如下图：</p>
<p><img src="%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E6%A8%A1%E5%9E%8B.webp"></p>
<hr>
<h4 id="1-1-内存"><a href="#1-1-内存" class="headerlink" title="1.1 内存"></a>1.1 内存</h4><h4 id="1-什么是内存？"><a href="#1-什么是内存？" class="headerlink" title="1.什么是内存？"></a>1.什么是内存？</h4><p><strong>内存是硬件，是用于存放数据的硬件。</strong></p>
<p>程序执行前需要先放到内存中才能被CPU处理。</p>
<p>内存是与CPU沟通的桥梁，计算机中所有程序的运行都要依靠内存，内存对计算机的影响非常大。</p>
<p><strong>主存储器，内存，内存条，内部存储器是一个东西</strong>。这很重要，不然看到后面概念都混淆。</p>
<h4 id="2-内存的作用"><a href="#2-内存的作用" class="headerlink" title="2.内存的作用"></a>2.内存的作用</h4><p><strong>内存，用于存放CPU中的运算数据以及硬盘等外部存储设备交换的数据。</strong></p>
<p>CPU一般会把需要运算的数据调到主存中进行运算，运算完后CPU将结果再传出来。</p>
<p>我们的程序和数据都是存储在内存，存储的区域是线性的。</p>
<p>在计算机数据存储中，存储数据的基本单位是<strong>字节（byte）</strong>，1 字节等于 8 位（8 bit）。每一个字节都对应一个内存地址。</p>
<p>内存的地址是从 0 开始编号的，然后自增排列，最后一个地址为内存总字节数 - 1，这种结构好似我们程序里的数组，所以内存的读写任何一个数据的速度都是一样的。</p>
<hr>
<h4 id="1-2-中央处理器（CPU）"><a href="#1-2-中央处理器（CPU）" class="headerlink" title="1.2 中央处理器（CPU）"></a>1.2 中央处理器（CPU）</h4><p>中央处理器也就是我们常说的 CPU，32 位和 64 位 CPU 最主要区别在于一次能计算多少字节数据：</p>
<ul>
<li>32 位 CPU 一次可以计算 4 个字节；</li>
<li>64 位 CPU 一次可以计算 8 个字节；</li>
</ul>
<p>这里的 32 位和 64 位，通常称为 CPU 的位宽，代表的是 CPU 一次可以计算（运算）的数据量。</p>
<p>之所以 CPU 要这样设计，是为了能计算更大的数值，如果是 8 位的 CPU，那么一次只能计算 1 个字节 <code>0~255</code> 范围内的数值，这样就无法一次完成计算 <code>10000 * 500</code> ，于是为了能一次计算大数的运算，CPU 需要支持多个 byte 一起计算，所以 CPU 位宽越大，可以计算的数值就越大，比如说 32 位 CPU 能计算的最大整数是 <code>4294967295</code>。</p>
<p>CPU 内部还有一些组件，常见的有<strong>寄存器、控制单元和逻辑运算单元</strong>等。其中，控制单元负责控制 CPU 工作，逻辑运算单元负责计算，而寄存器可以分为多种类，每种寄存器的功能又不尽相同。</p>
<p><strong>寄存器是计算机中央处理器（CPU）内部的一种高速存储单元，用于临时存储数据和指令。</strong></p>
<p><strong>为什么有了内存还需要寄存器？</strong></p>
<p>因为内存离 CPU 太远了，而寄存器就在 CPU 里，还紧挨着控制单元和逻辑运算单元，自然计算时速度会很快。</p>
<hr>
<h4 id="1-3-输入、输出设备"><a href="#1-3-输入、输出设备" class="headerlink" title="1.3 输入、输出设备"></a>1.3 输入、输出设备</h4><p>输入设备向计算机输入数据，计算机经过计算后，把数据输出给输出设备。期间，如果输入设备是键盘，按下按键时是需要和 CPU 进行交互的，这时就需要用到控制总线了。</p>
<hr>
<h3 id="2、线路位宽与-CPU-位宽（操作系统32位和64位）"><a href="#2、线路位宽与-CPU-位宽（操作系统32位和64位）" class="headerlink" title="2、线路位宽与 CPU 位宽（操作系统32位和64位）"></a>2、线路位宽与 CPU 位宽（操作系统32位和64位）</h3><p>数据是如何通过线路传输的呢？其实是通过操作电压，低电压表示 0，高压电压则表示 1。</p>
<p>如果构造了高低高这样的信号，其实就是 101 二进制数据，十进制则表示 5，如果只有一条线路，就意味着每次只能传递 1 bit 的数据，即 0 或 1，那么传输 101 这个数据，就需要 3 次才能传输完成，这样的效率非常低。</p>
<p>这样一位一位传输的方式，称为串行，下一个 bit 必须等待上一个 bit 传输完成才能进行传输。当然，想一次多传一些数据，增加线路即可，这时数据就可以并行传输。</p>
<p>为了避免低效率的串行传输的方式，线路的位宽最好一次就能访问到所有的内存地址。</p>
<p>CPU 想要操作「内存地址」就需要「地址总线」：</p>
<ul>
<li>如果地址总线只有 1 条，那每次只能表示 「0 或 1」这两种地址，所以 CPU 能操作的内存地址最大数量为 2（2^1）个（注意，不要理解成同时能操作 2 个内存地址）；</li>
<li>如果地址总线有 2 条，那么能表示 00、01、10、11 这四种地址，所以 CPU 能操作的内存地址最大数量为 4（2^2）个。</li>
</ul>
<p>那么，想要 CPU 操作 4G 大的内存，那么就需要 32 条地址总线，因为 <code>2 ^ 32 = 4G</code>。</p>
<p>知道了线路位宽的意义后，我们再来看看 CPU 位宽。</p>
<p>CPU 的位宽最好不要小于线路位宽，比如 32 位 CPU 控制 40 位宽的地址总线和数据总线的话，工作起来就会非常复杂且麻烦，所以 32 位的 CPU 最好和 32 位宽的线路搭配，因为 32 位 CPU 一次最多只能操作 32 位宽的地址总线和数据总线。</p>
<p>如果用 32 位 CPU 去加和两个 64 位大小的数字，就需要把这 2 个 64 位的数字分成 2 个低位 32 位数字和 2 个高位 32 位数字来计算，先加个两个低位的 32 位数字，算出进位，然后加和两个高位的 32 位数字，最后再加上进位，就能算出结果了，可以发现 32 位 CPU 并不能一次性计算出加和两个 64 位数字的结果。</p>
<p>对于 64 位 CPU 就可以一次性算出加和两个 64 位数字的结果，因为 64 位 CPU 可以一次读入 64 位的数字，并且 64 位 CPU 内部的逻辑运算单元也支持 64 位数字的计算。</p>
<p>但是并不代表 64 位 CPU 性能比 32 位 CPU 高很多，很少应用需要算超过 32 位的数字，所以<strong>如果计算的数额不超过 32 位数字的情况下，32 位和 64 位 CPU 之间没什么区别的，只有当计算超过 32 位数字的情况下，64 位的优势才能体现出来</strong>。</p>
<p>另外，32 位 CPU 最大只能操作 4GB 内存，就算装了 8 GB 内存条，也没用。而 64 位 CPU 寻址范围则很大，理论最大的寻址空间为 <code>2^64</code>（256T）</p>
<h2 id="二、存储器的层次结构"><a href="#二、存储器的层次结构" class="headerlink" title="二、存储器的层次结构"></a>二、存储器的层次结构</h2><h3 id="层次结构介绍"><a href="#层次结构介绍" class="headerlink" title="层次结构介绍"></a>层次结构介绍</h3><p>计算机的两类存储器，一是外部存储器，二是内部存储器。<strong>常见的外部存储器主要是磁盘，磁盘又分为硬盘和软盘，而内部存储器就是常说的内存。</strong></p>
<p><strong>小林coding层次结构：</strong></p>
<img src="%E5%AD%98%E5%82%A8%E5%99%A8%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.png" style="zoom: 80%;">

<p><strong>OS教材：</strong></p>
<img src="OS%E7%9A%84%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1.png" style="zoom: 80%;">

<h3 id="聚焦CPU内部："><a href="#聚焦CPU内部：" class="headerlink" title="聚焦CPU内部："></a>聚焦CPU内部：</h3><p>我们想象中一个场景，大学期末准备考试了，你前去图书馆临时抱佛脚。那么，在看书的时候，我们的大脑会思考问题，也会记忆知识点，另外我们通常也会把常用的书放在自己的桌子上，当我们要找一本不常用的书，则会去图书馆的书架找。</p>
<p>我们可以把 CPU 比喻成我们的大脑，大脑正在思考的东西，就好比 CPU 中的<strong>寄存器</strong>，处理速度是最快的，但是能存储的数据也是最少的，毕竟我们也不能一下同时思考太多的事情，除非你练过。</p>
<p>我们大脑中的记忆，就好比 <strong>CPU Cache</strong>，中文称为 CPU 高速缓存，处理速度相比寄存器慢了一点，但是能存储的数据也稍微多了一些。</p>
<p>CPU Cache 通常会分为 <strong>L1、L2、L3 三层</strong>，其中 L1 Cache 通常分成「数据缓存」和「指令缓存」，L1 是距离 CPU 最近的，因此它比 L2、L3 的读写速度都快、存储空间都小。我们大脑中短期记忆，就好比 L1 Cache，而长期记忆就好比 L2&#x2F;L3 Cache。</p>
<p>寄存器和 CPU Cache 都是在 CPU 内部，跟 CPU 挨着很近，因此它们的读写速度都相当的快，但是能存储的数据很少，毕竟 CPU 就这么丁点大。</p>
<p><img src="%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB.webp"></p>
<h3 id="聚焦CPU外部："><a href="#聚焦CPU外部：" class="headerlink" title="聚焦CPU外部："></a>聚焦CPU外部：</h3><p>知道 CPU 内部的存储器的层次分布，我们放眼看看 CPU 外部的存储器。</p>
<p>当我们大脑记忆中没有资料的时候，可以从书桌或书架上拿书来阅读，那我们桌子上的书，就好比<strong>内存</strong>，我们虽然可以一伸手就可以拿到，但读写速度肯定远慢于寄存器，那图书馆书架上的书，就好比<strong>硬盘</strong>，能存储的数据非常大，但是读写速度相比内存差好几个数量级，更别说跟寄存器的差距了。</p>
<p>硬盘有如下的内容：</p>
<p><strong>机械硬盘（HDD）</strong><br>机械硬盘是计算机中的一种数据存储设备，它使用旋转的盘片和移动的磁头来读写数据。机械硬盘通常比固态硬盘容量更大，价格更便宜，但是速度相对较慢，且比较容易受到机械损伤的影响。机械硬盘通常用于存储大量数据和长期存储。</p>
<p><strong>固态硬盘（SSD）</strong><br>固态硬盘是一种新型的数据存储设备，它使用闪存芯片来读写数据。固态硬盘比机械硬盘速度更快，能够更快地启动计算机和打开文件，且比较抗震抗摔，寿命也更长。但是，固态硬盘价格相对较高，容量相对较小。</p>
<p>在第一节介绍内存的时候，曾说内存就是主存，<strong>但是严格的说，内存包括主存(内存条,基于DRAM)与高速缓存(Cache,基于SRAM)两部分。</strong></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="1-CPU的寄存器"><a href="#1-CPU的寄存器" class="headerlink" title="1. CPU的寄存器"></a>1. CPU的寄存器</h4><p><strong>定义与功能</strong></p>
<ol>
<li><p>寄存器是CPU内部的高速存储单元，用于暂时存储CPU运算过程中的数据和指令。</p>
</li>
<li><p>它们具有极快的访问速度，能够减少CPU对内存的访问次数，提高程序执行效率。</p>
</li>
</ol>
<h4 id="2-内存"><a href="#2-内存" class="headerlink" title="2. 内存"></a>2. 内存</h4><p><strong>定义与功能</strong></p>
<ol>
<li><p>内存（RAM，随机存取存储器）是计算机系统中用于存储数据和程序的临时存储器。</p>
</li>
<li><p>提供了较大的存储容量，但相对于CPU的访问速度较慢。</p>
</li>
</ol>
<p><strong>与CPU的关系</strong></p>
<ol>
<li><p>CPU通过内存总线与内存进行通信，以读取和写入数据。</p>
</li>
<li><p>当CPU需要执行程序时，它会从内存中读取指令和数据到寄存器中进行处理。</p>
</li>
</ol>
<h4 id="3-高速缓存（Cache）"><a href="#3-高速缓存（Cache）" class="headerlink" title="3. 高速缓存（Cache）"></a>3. 高速缓存（Cache）</h4><p><strong>定义与功能</strong></p>
<ol>
<li><p>高速缓存是位于CPU和内存之间的一种存储器层次结构，用于存储CPU频繁访问的数据和指令。</p>
</li>
<li><p>它通过减少CPU对内存的访问次数来提高计算机系统的性能。</p>
</li>
</ol>
<p><strong>多级缓存结构</strong></p>
<ol>
<li><p>通常包括L1、L2、L3等多级缓存，其中L1缓存距离CPU最近且速度最快，L2、L3缓存则更大但速度稍慢。</p>
</li>
<li><p>这种多级缓存结构旨在利用容量、速度和成本之间的平衡，以提供更好的性能。</p>
</li>
</ol>
<h4 id="4-寄存器、内存与高速缓存之间的联系"><a href="#4-寄存器、内存与高速缓存之间的联系" class="headerlink" title="4. 寄存器、内存与高速缓存之间的联系"></a>4. 寄存器、内存与高速缓存之间的联系</h4><p><strong>数据传输</strong></p>
<ol>
<li><p>当CPU执行程序时，它会从内存中读取指令和数据到寄存器中进行处理。</p>
</li>
<li><p>如果这些指令和数据已经存储在高速缓存中，则CPU可以直接从缓存中读取，减少了对内存的访问次数。</p>
</li>
</ol>
<p><strong>性能提升</strong></p>
<ol>
<li><p>寄存器和高速缓存的存在大大提高了CPU的数据访问速度，从而提升了计算机系统的整体性能。</p>
</li>
<li><p>它们通过减少CPU对内存的依赖，降低了内存访问的延迟和能耗。</p>
</li>
</ol>
<p><strong>协同工作</strong></p>
<ol>
<li><p>寄存器、内存和高速缓存之间通过复杂的协同工作机制，共同支持CPU的高效运行。</p>
</li>
<li><p>寄存器提供快速的数据访问能力，高速缓存减少了对内存的访问次数，而内存则提供了较大的存储容量以支持复杂的程序和数据结构。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统：（二）原码，反码，补码，计算丢失精度</title>
    <url>/2024/07/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%880-1-0-2%E4%B8%8D%E7%AD%89%E4%BA%8E0-3/</url>
    <content><![CDATA[<h1 id="1-原码"><a href="#1-原码" class="headerlink" title="1.原码"></a>1.原码</h1><p>对于一个数， 计算机要使用一定的编码方式进行存储。<strong>原码， 反码， 补码</strong>是机器存储一个具体数字的编码方式。<strong>在计算机中数据存储都是以二进制的形式表示数据，那么将一个十进制数转换为其二进制形式称为其原码。</strong>二进制最左边的是符号位，0为正，1为负。</p>
<p>计算机中存储的最小单元是<code>字节</code>，字节以二进制存储数据，一个字节对应<code>8个比特位</code>。也就是说一个字节的最大值的二进制表示形式为<code>0111 1111</code>，其中第一个0为符号位，最大值对应十进制就是127。最小值为<code>1111 1111</code>，十进制为-127。</p>
<h1 id="2-反码"><a href="#2-反码" class="headerlink" title="2.反码"></a>2.反码</h1><p><strong>当前讨论的反码和补码都是讨论负数，正数的反码和补码等于其原码</strong></p>
<p>在原码为负数的情况进行相加，会出现运算结果不一致的情况，例如<code>1000 0001</code>，加1，那么理论得到的结果应该是<code>1000 0000</code>（十进制0），实际得到的是100000010（十进制-2）。</p>
<p>为了解决原码不能计算负数，遵循以下反码的计算规则：正数反码不变，负数的反码在原码的基础上，符号位不变，0变1,1变0。计算完后再取反码就可以得到负数的运算结果。</p>
<p><strong>但是在跨0计算的时候会存在误差：例如-5+6得0（当前讨论一个字节，多出去的1直接忽略）</strong></p>
<p><img src="%E5%8F%8D%E7%A0%81%E9%97%AE%E9%A2%981.png" alt="反码原理以及反码存在的问题"></p>
<h1 id="3-补码"><a href="#3-补码" class="headerlink" title="3.补码"></a>3.补码</h1><p><strong>当前讨论的反码和补码都是讨论负数，正数的反码和补码等于其原码</strong></p>
<p>为了针对0在二进制中有两个表示形式，引出使用补码进行计算，<strong>即负数的补码等于负数的反码+1</strong></p>
<p><img src="%E8%A1%A5%E7%A0%81.png" alt="负数补码等于其反码+1"></p>
<p>由于原码的0占了两个反码，在修改成补码后会多出一个数字，二进制数字为<code>1000 0000</code>，即-128，所以规定-128的补码为<code>1000 0000</code>。</p>
<p><img src="-128%E7%9A%84%E8%A1%A5%E7%A0%81.png" alt="-128补码"></p>
<p><strong>在计算机中存储和计算都采用补码</strong>，所以即使-128没有原码和反码也不碍事（在1个字节的情况下）。</p>
<h1 id="4-Java中的隐式转换和强制转换（拓展）"><a href="#4-Java中的隐式转换和强制转换（拓展）" class="headerlink" title="4.Java中的隐式转换和强制转换（拓展）"></a>4.Java中的隐式转换和强制转换（拓展）</h1><p>隐式转换直接加0</p>
<p><img src="Snipaste_2024-07-30_16-19-43.png" alt="隐式转换"></p>
<p>强制转换直接删掉字节前面的全部内容，得到补码进行计算（<strong>在计算机中存储和计算都采用补码</strong>）</p>
<p><img src="Snipaste_2024-07-30_16-20-57.png" alt="强制转换"></p>
<p>b的值就是二进制-1后取反，得到原码，最后是-56。因为b是补码形式的二进制数据。</p>
<h1 id="5-其他运算符（拓展）"><a href="#5-其他运算符（拓展）" class="headerlink" title="5.其他运算符（拓展）"></a>5.其他运算符（拓展）</h1><p><img src="%E9%80%BB%E8%BE%91%E4%B8%8E.png" alt="逻辑与"></p>
<p>左移一次乘2，右移一次除2。</p>
<p><img src="%E5%B7%A6%E7%A7%BB%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="左移"></p>
<h1 id="6-十进制转二进制"><a href="#6-十进制转二进制" class="headerlink" title="6.十进制转二进制"></a>6.十进制转二进制</h1><p>小数部分的转换不同于整数部分，它采用的是乘2取整法，将十进制中的小数部分乘以2作为二进制的一位，然后继续取小数部分乘以2作为下一位，直到不存在小数为止。</p>
<p><img src="%E5%8D%81%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.webp" alt="十进制转二进制"></p>
<p>但是，并不是所有小数都可以用二进制表示，前面提到的0.625小数是一个特例，刚好通过乘2取整法的方式完整的转换成二进制。<br>如果我们用相同的方式，来把0.1 转换成二进制，过程如下:</p>
<p><img src="%E6%97%A0%E9%99%90%E5%B0%8F%E6%95%B0.webp"></p>
<p>所以只能无限接近0.1而取不到0.1的值，所以算出来就不是0.3</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：（一）排序算法</title>
    <url>/2024/07/03/%E7%AE%97%E6%B3%95%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dd8fe8f995c1f728ddaff46bcf5f6b5f15df6ac30518870afd66b9f05cbd9b5f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：（三）数据结构——链表</title>
    <url>/2024/07/06/%E7%AE%97%E6%B3%95%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="96aab9b3e2177d505525ae6918281d95882099f3d4eedc2bb03a376d625ae44f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：（二）二分查找</title>
    <url>/2024/07/03/%E7%AE%97%E6%B3%95%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="58c31e43b3f57f4e86b76c93bc89186241724c44e8ac9925de911be8c580bacb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法：（四）递归</title>
    <url>/2024/07/09/%E7%AE%97%E6%B3%95%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="98d071054f133ef271af915b81e1e96228577bc687088a51a0c3bb6b86c5b6ff"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
